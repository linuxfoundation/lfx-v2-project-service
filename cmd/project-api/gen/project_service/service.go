// Code generated by goa v3.21.1, DO NOT EDIT.
//
// project-service service
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/design

package projectservice

import (
	"context"

	"goa.design/goa/v3/security"
)

// The project service provides LFX Project resources.
type Service interface {
	// Get all projects.
	GetProjects(context.Context, *GetProjectsPayload) (res *GetProjectsResult, err error)
	// Create a new project.
	CreateProject(context.Context, *CreateProjectPayload) (res *Project, err error)
	// Get a single project.
	GetOneProject(context.Context, *GetOneProjectPayload) (res *GetOneProjectResult, err error)
	// Update an existing project.
	UpdateProject(context.Context, *UpdateProjectPayload) (res *Project, err error)
	// Delete an existing project.
	DeleteProject(context.Context, *DeleteProjectPayload) (err error)
	// Check if the service is able to take inbound requests.
	Readyz(context.Context) (res []byte, err error)
	// Check if the service is alive.
	Livez(context.Context) (res []byte, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "project-service"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "project-service"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [7]string{"get-projects", "create-project", "get-one-project", "update-project", "delete-project", "readyz", "livez"}

type BadRequestError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

type ConflictError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// CreateProjectPayload is the payload type of the project-service service
// create-project method.
type CreateProjectPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// Project slug, a short slugified name of the project
	Slug string
	// A description of the project
	Description string
	// The pretty name of the project
	Name string
	// A list of project managers by their user IDs
	Managers []string
}

// DeleteProjectPayload is the payload type of the project-service service
// delete-project method.
type DeleteProjectPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// ETag header value
	Etag *string
	// Version of the API
	Version *string
	// Project ID -- v2 id, not related to v1 id directly
	ID *string
}

// GetOneProjectPayload is the payload type of the project-service service
// get-one-project method.
type GetOneProjectPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// Project ID -- v2 id, not related to v1 id directly
	ID *string
}

// GetOneProjectResult is the result type of the project-service service
// get-one-project method.
type GetOneProjectResult struct {
	Project *Project
	// ETag header value
	Etag *string
}

// GetProjectsPayload is the payload type of the project-service service
// get-projects method.
type GetProjectsPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
}

// GetProjectsResult is the result type of the project-service service
// get-projects method.
type GetProjectsResult struct {
	// Resources found
	Projects []*Project
	// Cache control header
	CacheControl *string
}

type InternalServerError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

type NotFoundError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// Project is the result type of the project-service service create-project
// method.
type Project struct {
	// Project ID -- v2 id, not related to v1 id directly
	ID *string
	// Project slug, a short slugified name of the project
	Slug *string
	// A description of the project
	Description *string
	// The pretty name of the project
	Name *string
	// A list of project managers by their user IDs
	Managers []string
}

type ServiceUnavailableError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// UpdateProjectPayload is the payload type of the project-service service
// update-project method.
type UpdateProjectPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// ETag header value
	Etag *string
	// Version of the API
	Version *string
	// Project ID -- v2 id, not related to v1 id directly
	ID *string
	// Project slug, a short slugified name of the project
	Slug string
	// A description of the project
	Description string
	// The pretty name of the project
	Name string
	// A list of project managers by their user IDs
	Managers []string
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return ""
}

// ErrorName returns "BadRequestError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequestError".
func (e *BadRequestError) GoaErrorName() string {
	return "BadRequest"
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return ""
}

// ErrorName returns "ConflictError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ConflictError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ConflictError".
func (e *ConflictError) GoaErrorName() string {
	return "Conflict"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return ""
}

// ErrorName returns "InternalServerError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalServerError".
func (e *InternalServerError) GoaErrorName() string {
	return "InternalServerError"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return ""
}

// ErrorName returns "NotFoundError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFoundError".
func (e *NotFoundError) GoaErrorName() string {
	return "NotFound"
}

// Error returns an error description.
func (e *ServiceUnavailableError) Error() string {
	return ""
}

// ErrorName returns "ServiceUnavailableError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ServiceUnavailableError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ServiceUnavailableError".
func (e *ServiceUnavailableError) GoaErrorName() string {
	return "ServiceUnavailable"
}
