// Code generated by goa v3.21.1, DO NOT EDIT.
//
// project-service HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	projectservicec "github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/gen/http/project_service/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `project-service (get-projects|create-project|get-one-project|update-project|delete-project|readyz|livez)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` project-service get-projects --version "1" --bearer-token "eyJhbGci..."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		projectServiceFlags = flag.NewFlagSet("project-service", flag.ContinueOnError)

		projectServiceGetProjectsFlags           = flag.NewFlagSet("get-projects", flag.ExitOnError)
		projectServiceGetProjectsVersionFlag     = projectServiceGetProjectsFlags.String("version", "", "")
		projectServiceGetProjectsBearerTokenFlag = projectServiceGetProjectsFlags.String("bearer-token", "", "")

		projectServiceCreateProjectFlags           = flag.NewFlagSet("create-project", flag.ExitOnError)
		projectServiceCreateProjectBodyFlag        = projectServiceCreateProjectFlags.String("body", "REQUIRED", "")
		projectServiceCreateProjectVersionFlag     = projectServiceCreateProjectFlags.String("version", "", "")
		projectServiceCreateProjectBearerTokenFlag = projectServiceCreateProjectFlags.String("bearer-token", "", "")

		projectServiceGetOneProjectFlags           = flag.NewFlagSet("get-one-project", flag.ExitOnError)
		projectServiceGetOneProjectIDFlag          = projectServiceGetOneProjectFlags.String("id", "REQUIRED", "Project ID -- v2 id, not related to v1 id directly")
		projectServiceGetOneProjectVersionFlag     = projectServiceGetOneProjectFlags.String("version", "", "")
		projectServiceGetOneProjectBearerTokenFlag = projectServiceGetOneProjectFlags.String("bearer-token", "", "")

		projectServiceUpdateProjectFlags           = flag.NewFlagSet("update-project", flag.ExitOnError)
		projectServiceUpdateProjectBodyFlag        = projectServiceUpdateProjectFlags.String("body", "REQUIRED", "")
		projectServiceUpdateProjectIDFlag          = projectServiceUpdateProjectFlags.String("id", "REQUIRED", "Project ID -- v2 id, not related to v1 id directly")
		projectServiceUpdateProjectVersionFlag     = projectServiceUpdateProjectFlags.String("version", "", "")
		projectServiceUpdateProjectBearerTokenFlag = projectServiceUpdateProjectFlags.String("bearer-token", "", "")
		projectServiceUpdateProjectEtagFlag        = projectServiceUpdateProjectFlags.String("etag", "", "")

		projectServiceDeleteProjectFlags           = flag.NewFlagSet("delete-project", flag.ExitOnError)
		projectServiceDeleteProjectIDFlag          = projectServiceDeleteProjectFlags.String("id", "REQUIRED", "Project ID -- v2 id, not related to v1 id directly")
		projectServiceDeleteProjectVersionFlag     = projectServiceDeleteProjectFlags.String("version", "", "")
		projectServiceDeleteProjectBearerTokenFlag = projectServiceDeleteProjectFlags.String("bearer-token", "", "")
		projectServiceDeleteProjectEtagFlag        = projectServiceDeleteProjectFlags.String("etag", "", "")

		projectServiceReadyzFlags = flag.NewFlagSet("readyz", flag.ExitOnError)

		projectServiceLivezFlags = flag.NewFlagSet("livez", flag.ExitOnError)
	)
	projectServiceFlags.Usage = projectServiceUsage
	projectServiceGetProjectsFlags.Usage = projectServiceGetProjectsUsage
	projectServiceCreateProjectFlags.Usage = projectServiceCreateProjectUsage
	projectServiceGetOneProjectFlags.Usage = projectServiceGetOneProjectUsage
	projectServiceUpdateProjectFlags.Usage = projectServiceUpdateProjectUsage
	projectServiceDeleteProjectFlags.Usage = projectServiceDeleteProjectUsage
	projectServiceReadyzFlags.Usage = projectServiceReadyzUsage
	projectServiceLivezFlags.Usage = projectServiceLivezUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "project-service":
			svcf = projectServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "project-service":
			switch epn {
			case "get-projects":
				epf = projectServiceGetProjectsFlags

			case "create-project":
				epf = projectServiceCreateProjectFlags

			case "get-one-project":
				epf = projectServiceGetOneProjectFlags

			case "update-project":
				epf = projectServiceUpdateProjectFlags

			case "delete-project":
				epf = projectServiceDeleteProjectFlags

			case "readyz":
				epf = projectServiceReadyzFlags

			case "livez":
				epf = projectServiceLivezFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "project-service":
			c := projectservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-projects":
				endpoint = c.GetProjects()
				data, err = projectservicec.BuildGetProjectsPayload(*projectServiceGetProjectsVersionFlag, *projectServiceGetProjectsBearerTokenFlag)
			case "create-project":
				endpoint = c.CreateProject()
				data, err = projectservicec.BuildCreateProjectPayload(*projectServiceCreateProjectBodyFlag, *projectServiceCreateProjectVersionFlag, *projectServiceCreateProjectBearerTokenFlag)
			case "get-one-project":
				endpoint = c.GetOneProject()
				data, err = projectservicec.BuildGetOneProjectPayload(*projectServiceGetOneProjectIDFlag, *projectServiceGetOneProjectVersionFlag, *projectServiceGetOneProjectBearerTokenFlag)
			case "update-project":
				endpoint = c.UpdateProject()
				data, err = projectservicec.BuildUpdateProjectPayload(*projectServiceUpdateProjectBodyFlag, *projectServiceUpdateProjectIDFlag, *projectServiceUpdateProjectVersionFlag, *projectServiceUpdateProjectBearerTokenFlag, *projectServiceUpdateProjectEtagFlag)
			case "delete-project":
				endpoint = c.DeleteProject()
				data, err = projectservicec.BuildDeleteProjectPayload(*projectServiceDeleteProjectIDFlag, *projectServiceDeleteProjectVersionFlag, *projectServiceDeleteProjectBearerTokenFlag, *projectServiceDeleteProjectEtagFlag)
			case "readyz":
				endpoint = c.Readyz()
			case "livez":
				endpoint = c.Livez()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// projectServiceUsage displays the usage of the project-service command and
// its subcommands.
func projectServiceUsage() {
	fmt.Fprintf(os.Stderr, `The project service provides LFX Project resources.
Usage:
    %[1]s [globalflags] project-service COMMAND [flags]

COMMAND:
    get-projects: Get all projects.
    create-project: Create a new project.
    get-one-project: Get a single project.
    update-project: Update an existing project.
    delete-project: Delete an existing project.
    readyz: Check if the service is able to take inbound requests.
    livez: Check if the service is alive.

Additional help:
    %[1]s project-service COMMAND --help
`, os.Args[0])
}
func projectServiceGetProjectsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] project-service get-projects -version STRING -bearer-token STRING

Get all projects.
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s project-service get-projects --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func projectServiceCreateProjectUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] project-service create-project -body JSON -version STRING -bearer-token STRING

Create a new project.
    -body JSON: 
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s project-service create-project --body '{
      "auditors": [
         "user123",
         "user456"
      ],
      "description": "project foo is a project about bar",
      "name": "Foo Foundation",
      "parent_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "public": true,
      "slug": "project-slug",
      "writers": [
         "user123",
         "user456"
      ]
   }' --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func projectServiceGetOneProjectUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] project-service get-one-project -id STRING -version STRING -bearer-token STRING

Get a single project.
    -id STRING: Project ID -- v2 id, not related to v1 id directly
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s project-service get-one-project --id "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func projectServiceUpdateProjectUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] project-service update-project -body JSON -id STRING -version STRING -bearer-token STRING -etag STRING

Update an existing project.
    -body JSON: 
    -id STRING: Project ID -- v2 id, not related to v1 id directly
    -version STRING: 
    -bearer-token STRING: 
    -etag STRING: 

Example:
    %[1]s project-service update-project --body '{
      "auditors": [
         "user123",
         "user456"
      ],
      "description": "project foo is a project about bar",
      "name": "Foo Foundation",
      "parent_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "public": true,
      "slug": "project-slug",
      "writers": [
         "user123",
         "user456"
      ]
   }' --id "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --etag "123"
`, os.Args[0])
}

func projectServiceDeleteProjectUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] project-service delete-project -id STRING -version STRING -bearer-token STRING -etag STRING

Delete an existing project.
    -id STRING: Project ID -- v2 id, not related to v1 id directly
    -version STRING: 
    -bearer-token STRING: 
    -etag STRING: 

Example:
    %[1]s project-service delete-project --id "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --etag "123"
`, os.Args[0])
}

func projectServiceReadyzUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] project-service readyz

Check if the service is able to take inbound requests.

Example:
    %[1]s project-service readyz
`, os.Args[0])
}

func projectServiceLivezUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] project-service livez

Check if the service is alive.

Example:
    %[1]s project-service livez
`, os.Args[0])
}
