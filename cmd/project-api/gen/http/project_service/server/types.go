// Code generated by goa v3.21.1, DO NOT EDIT.
//
// project-service HTTP server types
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/design

package server

import (
	projectservice "github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/gen/project_service"
	goa "goa.design/goa/v3/pkg"
)

// CreateProjectRequestBody is the type of the "project-service" service
// "create-project" endpoint HTTP request body.
type CreateProjectRequestBody struct {
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, required and must be a valid UUID
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
}

// UpdateProjectRequestBody is the type of the "project-service" service
// "update-project" endpoint HTTP request body.
type UpdateProjectRequestBody struct {
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, required and must be a valid UUID
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
}

// GetProjectsResponseBody is the type of the "project-service" service
// "get-projects" endpoint HTTP response body.
type GetProjectsResponseBody struct {
	// Resources found
	Projects []*ProjectResponseBody `form:"projects" json:"projects" xml:"projects"`
}

// CreateProjectResponseBody is the type of the "project-service" service
// "create-project" endpoint HTTP response body.
type CreateProjectResponseBody struct {
	// Project ID -- v2 id, not related to v1 id directly
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, required and must be a valid UUID
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
}

// GetOneProjectResponseBody is the type of the "project-service" service
// "get-one-project" endpoint HTTP response body.
type GetOneProjectResponseBody ProjectResponseBody

// UpdateProjectResponseBody is the type of the "project-service" service
// "update-project" endpoint HTTP response body.
type UpdateProjectResponseBody struct {
	// Project ID -- v2 id, not related to v1 id directly
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, required and must be a valid UUID
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
}

// GetProjectsBadRequestResponseBody is the type of the "project-service"
// service "get-projects" endpoint HTTP response body for the "BadRequest"
// error.
type GetProjectsBadRequestResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetProjectsInternalServerErrorResponseBody is the type of the
// "project-service" service "get-projects" endpoint HTTP response body for the
// "InternalServerError" error.
type GetProjectsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetProjectsServiceUnavailableResponseBody is the type of the
// "project-service" service "get-projects" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type GetProjectsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateProjectBadRequestResponseBody is the type of the "project-service"
// service "create-project" endpoint HTTP response body for the "BadRequest"
// error.
type CreateProjectBadRequestResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateProjectConflictResponseBody is the type of the "project-service"
// service "create-project" endpoint HTTP response body for the "Conflict"
// error.
type CreateProjectConflictResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateProjectInternalServerErrorResponseBody is the type of the
// "project-service" service "create-project" endpoint HTTP response body for
// the "InternalServerError" error.
type CreateProjectInternalServerErrorResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateProjectServiceUnavailableResponseBody is the type of the
// "project-service" service "create-project" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type CreateProjectServiceUnavailableResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetOneProjectInternalServerErrorResponseBody is the type of the
// "project-service" service "get-one-project" endpoint HTTP response body for
// the "InternalServerError" error.
type GetOneProjectInternalServerErrorResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetOneProjectNotFoundResponseBody is the type of the "project-service"
// service "get-one-project" endpoint HTTP response body for the "NotFound"
// error.
type GetOneProjectNotFoundResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetOneProjectServiceUnavailableResponseBody is the type of the
// "project-service" service "get-one-project" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type GetOneProjectServiceUnavailableResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateProjectBadRequestResponseBody is the type of the "project-service"
// service "update-project" endpoint HTTP response body for the "BadRequest"
// error.
type UpdateProjectBadRequestResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateProjectInternalServerErrorResponseBody is the type of the
// "project-service" service "update-project" endpoint HTTP response body for
// the "InternalServerError" error.
type UpdateProjectInternalServerErrorResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateProjectNotFoundResponseBody is the type of the "project-service"
// service "update-project" endpoint HTTP response body for the "NotFound"
// error.
type UpdateProjectNotFoundResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateProjectServiceUnavailableResponseBody is the type of the
// "project-service" service "update-project" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type UpdateProjectServiceUnavailableResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteProjectBadRequestResponseBody is the type of the "project-service"
// service "delete-project" endpoint HTTP response body for the "BadRequest"
// error.
type DeleteProjectBadRequestResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteProjectInternalServerErrorResponseBody is the type of the
// "project-service" service "delete-project" endpoint HTTP response body for
// the "InternalServerError" error.
type DeleteProjectInternalServerErrorResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteProjectNotFoundResponseBody is the type of the "project-service"
// service "delete-project" endpoint HTTP response body for the "NotFound"
// error.
type DeleteProjectNotFoundResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteProjectServiceUnavailableResponseBody is the type of the
// "project-service" service "delete-project" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type DeleteProjectServiceUnavailableResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// ReadyzServiceUnavailableResponseBody is the type of the "project-service"
// service "readyz" endpoint HTTP response body for the "ServiceUnavailable"
// error.
type ReadyzServiceUnavailableResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	// Project ID -- v2 id, not related to v1 id directly
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, required and must be a valid UUID
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
}

// NewGetProjectsResponseBody builds the HTTP response body from the result of
// the "get-projects" endpoint of the "project-service" service.
func NewGetProjectsResponseBody(res *projectservice.GetProjectsResult) *GetProjectsResponseBody {
	body := &GetProjectsResponseBody{}
	if res.Projects != nil {
		body.Projects = make([]*ProjectResponseBody, len(res.Projects))
		for i, val := range res.Projects {
			body.Projects[i] = marshalProjectserviceProjectToProjectResponseBody(val)
		}
	} else {
		body.Projects = []*ProjectResponseBody{}
	}
	return body
}

// NewCreateProjectResponseBody builds the HTTP response body from the result
// of the "create-project" endpoint of the "project-service" service.
func NewCreateProjectResponseBody(res *projectservice.Project) *CreateProjectResponseBody {
	body := &CreateProjectResponseBody{
		ID:          res.ID,
		Slug:        res.Slug,
		Description: res.Description,
		Name:        res.Name,
		Public:      res.Public,
		ParentUID:   res.ParentUID,
	}
	if res.Auditors != nil {
		body.Auditors = make([]string, len(res.Auditors))
		for i, val := range res.Auditors {
			body.Auditors[i] = val
		}
	}
	if res.Writers != nil {
		body.Writers = make([]string, len(res.Writers))
		for i, val := range res.Writers {
			body.Writers[i] = val
		}
	}
	return body
}

// NewGetOneProjectResponseBody builds the HTTP response body from the result
// of the "get-one-project" endpoint of the "project-service" service.
func NewGetOneProjectResponseBody(res *projectservice.GetOneProjectResult) *GetOneProjectResponseBody {
	body := &GetOneProjectResponseBody{
		ID:          res.Project.ID,
		Slug:        res.Project.Slug,
		Description: res.Project.Description,
		Name:        res.Project.Name,
		Public:      res.Project.Public,
		ParentUID:   res.Project.ParentUID,
	}
	if res.Project.Auditors != nil {
		body.Auditors = make([]string, len(res.Project.Auditors))
		for i, val := range res.Project.Auditors {
			body.Auditors[i] = val
		}
	}
	if res.Project.Writers != nil {
		body.Writers = make([]string, len(res.Project.Writers))
		for i, val := range res.Project.Writers {
			body.Writers[i] = val
		}
	}
	return body
}

// NewUpdateProjectResponseBody builds the HTTP response body from the result
// of the "update-project" endpoint of the "project-service" service.
func NewUpdateProjectResponseBody(res *projectservice.Project) *UpdateProjectResponseBody {
	body := &UpdateProjectResponseBody{
		ID:          res.ID,
		Slug:        res.Slug,
		Description: res.Description,
		Name:        res.Name,
		Public:      res.Public,
		ParentUID:   res.ParentUID,
	}
	if res.Auditors != nil {
		body.Auditors = make([]string, len(res.Auditors))
		for i, val := range res.Auditors {
			body.Auditors[i] = val
		}
	}
	if res.Writers != nil {
		body.Writers = make([]string, len(res.Writers))
		for i, val := range res.Writers {
			body.Writers[i] = val
		}
	}
	return body
}

// NewGetProjectsBadRequestResponseBody builds the HTTP response body from the
// result of the "get-projects" endpoint of the "project-service" service.
func NewGetProjectsBadRequestResponseBody(res *projectservice.BadRequestError) *GetProjectsBadRequestResponseBody {
	body := &GetProjectsBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetProjectsInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "get-projects" endpoint of the "project-service"
// service.
func NewGetProjectsInternalServerErrorResponseBody(res *projectservice.InternalServerError) *GetProjectsInternalServerErrorResponseBody {
	body := &GetProjectsInternalServerErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetProjectsServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "get-projects" endpoint of the "project-service"
// service.
func NewGetProjectsServiceUnavailableResponseBody(res *projectservice.ServiceUnavailableError) *GetProjectsServiceUnavailableResponseBody {
	body := &GetProjectsServiceUnavailableResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewCreateProjectBadRequestResponseBody builds the HTTP response body from
// the result of the "create-project" endpoint of the "project-service" service.
func NewCreateProjectBadRequestResponseBody(res *projectservice.BadRequestError) *CreateProjectBadRequestResponseBody {
	body := &CreateProjectBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewCreateProjectConflictResponseBody builds the HTTP response body from the
// result of the "create-project" endpoint of the "project-service" service.
func NewCreateProjectConflictResponseBody(res *projectservice.ConflictError) *CreateProjectConflictResponseBody {
	body := &CreateProjectConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewCreateProjectInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "create-project" endpoint of the
// "project-service" service.
func NewCreateProjectInternalServerErrorResponseBody(res *projectservice.InternalServerError) *CreateProjectInternalServerErrorResponseBody {
	body := &CreateProjectInternalServerErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewCreateProjectServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "create-project" endpoint of the "project-service"
// service.
func NewCreateProjectServiceUnavailableResponseBody(res *projectservice.ServiceUnavailableError) *CreateProjectServiceUnavailableResponseBody {
	body := &CreateProjectServiceUnavailableResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetOneProjectInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "get-one-project" endpoint of the
// "project-service" service.
func NewGetOneProjectInternalServerErrorResponseBody(res *projectservice.InternalServerError) *GetOneProjectInternalServerErrorResponseBody {
	body := &GetOneProjectInternalServerErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetOneProjectNotFoundResponseBody builds the HTTP response body from the
// result of the "get-one-project" endpoint of the "project-service" service.
func NewGetOneProjectNotFoundResponseBody(res *projectservice.NotFoundError) *GetOneProjectNotFoundResponseBody {
	body := &GetOneProjectNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetOneProjectServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "get-one-project" endpoint of the "project-service"
// service.
func NewGetOneProjectServiceUnavailableResponseBody(res *projectservice.ServiceUnavailableError) *GetOneProjectServiceUnavailableResponseBody {
	body := &GetOneProjectServiceUnavailableResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewUpdateProjectBadRequestResponseBody builds the HTTP response body from
// the result of the "update-project" endpoint of the "project-service" service.
func NewUpdateProjectBadRequestResponseBody(res *projectservice.BadRequestError) *UpdateProjectBadRequestResponseBody {
	body := &UpdateProjectBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewUpdateProjectInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "update-project" endpoint of the
// "project-service" service.
func NewUpdateProjectInternalServerErrorResponseBody(res *projectservice.InternalServerError) *UpdateProjectInternalServerErrorResponseBody {
	body := &UpdateProjectInternalServerErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewUpdateProjectNotFoundResponseBody builds the HTTP response body from the
// result of the "update-project" endpoint of the "project-service" service.
func NewUpdateProjectNotFoundResponseBody(res *projectservice.NotFoundError) *UpdateProjectNotFoundResponseBody {
	body := &UpdateProjectNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewUpdateProjectServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "update-project" endpoint of the "project-service"
// service.
func NewUpdateProjectServiceUnavailableResponseBody(res *projectservice.ServiceUnavailableError) *UpdateProjectServiceUnavailableResponseBody {
	body := &UpdateProjectServiceUnavailableResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewDeleteProjectBadRequestResponseBody builds the HTTP response body from
// the result of the "delete-project" endpoint of the "project-service" service.
func NewDeleteProjectBadRequestResponseBody(res *projectservice.BadRequestError) *DeleteProjectBadRequestResponseBody {
	body := &DeleteProjectBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewDeleteProjectInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "delete-project" endpoint of the
// "project-service" service.
func NewDeleteProjectInternalServerErrorResponseBody(res *projectservice.InternalServerError) *DeleteProjectInternalServerErrorResponseBody {
	body := &DeleteProjectInternalServerErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewDeleteProjectNotFoundResponseBody builds the HTTP response body from the
// result of the "delete-project" endpoint of the "project-service" service.
func NewDeleteProjectNotFoundResponseBody(res *projectservice.NotFoundError) *DeleteProjectNotFoundResponseBody {
	body := &DeleteProjectNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewDeleteProjectServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "delete-project" endpoint of the "project-service"
// service.
func NewDeleteProjectServiceUnavailableResponseBody(res *projectservice.ServiceUnavailableError) *DeleteProjectServiceUnavailableResponseBody {
	body := &DeleteProjectServiceUnavailableResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewReadyzServiceUnavailableResponseBody builds the HTTP response body from
// the result of the "readyz" endpoint of the "project-service" service.
func NewReadyzServiceUnavailableResponseBody(res *projectservice.ServiceUnavailableError) *ReadyzServiceUnavailableResponseBody {
	body := &ReadyzServiceUnavailableResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetProjectsPayload builds a project-service service get-projects endpoint
// payload.
func NewGetProjectsPayload(version *string, bearerToken *string) *projectservice.GetProjectsPayload {
	v := &projectservice.GetProjectsPayload{}
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewCreateProjectPayload builds a project-service service create-project
// endpoint payload.
func NewCreateProjectPayload(body *CreateProjectRequestBody, version *string, bearerToken *string) *projectservice.CreateProjectPayload {
	v := &projectservice.CreateProjectPayload{
		Slug:        *body.Slug,
		Description: *body.Description,
		Name:        *body.Name,
		Public:      body.Public,
		ParentUID:   *body.ParentUID,
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewGetOneProjectPayload builds a project-service service get-one-project
// endpoint payload.
func NewGetOneProjectPayload(id string, version *string, bearerToken *string) *projectservice.GetOneProjectPayload {
	v := &projectservice.GetOneProjectPayload{}
	v.ID = &id
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewUpdateProjectPayload builds a project-service service update-project
// endpoint payload.
func NewUpdateProjectPayload(body *UpdateProjectRequestBody, id string, version *string, bearerToken *string, etag *string) *projectservice.UpdateProjectPayload {
	v := &projectservice.UpdateProjectPayload{
		Slug:        *body.Slug,
		Description: *body.Description,
		Name:        *body.Name,
		Public:      body.Public,
		ParentUID:   *body.ParentUID,
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	v.ID = &id
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v
}

// NewDeleteProjectPayload builds a project-service service delete-project
// endpoint payload.
func NewDeleteProjectPayload(id string, version *string, bearerToken *string, etag *string) *projectservice.DeleteProjectPayload {
	v := &projectservice.DeleteProjectPayload{}
	v.ID = &id
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v
}

// ValidateCreateProjectRequestBody runs the validations defined on
// Create-ProjectRequestBody
func ValidateCreateProjectRequestBody(body *CreateProjectRequestBody) (err error) {
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ParentUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("parent_uid", "body"))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", *body.Slug, goa.FormatRegexp))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	return
}

// ValidateUpdateProjectRequestBody runs the validations defined on
// Update-ProjectRequestBody
func ValidateUpdateProjectRequestBody(body *UpdateProjectRequestBody) (err error) {
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ParentUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("parent_uid", "body"))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", *body.Slug, goa.FormatRegexp))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	return
}
