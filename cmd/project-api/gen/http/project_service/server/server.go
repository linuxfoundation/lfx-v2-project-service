// Code generated by goa v3.21.1, DO NOT EDIT.
//
// project-service HTTP server
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/design

package server

import (
	"context"
	"net/http"
	"path"

	projectservice "github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/gen/project_service"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the project-service service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	GetProjects         http.Handler
	CreateProject       http.Handler
	GetOneProject       http.Handler
	UpdateProject       http.Handler
	DeleteProject       http.Handler
	Readyz              http.Handler
	Livez               http.Handler
	GenHTTPOpenapi3JSON http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the project-service service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *projectservice.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	fileSystemGenHTTPOpenapi3JSON http.FileSystem,
) *Server {
	if fileSystemGenHTTPOpenapi3JSON == nil {
		fileSystemGenHTTPOpenapi3JSON = http.Dir(".")
	}
	fileSystemGenHTTPOpenapi3JSON = appendPrefix(fileSystemGenHTTPOpenapi3JSON, "/gen/http")
	return &Server{
		Mounts: []*MountPoint{
			{"GetProjects", "GET", "/projects"},
			{"CreateProject", "POST", "/projects"},
			{"GetOneProject", "GET", "/projects/{project_id}"},
			{"UpdateProject", "PUT", "/projects/{project_id}"},
			{"DeleteProject", "DELETE", "/projects/{project_id}"},
			{"Readyz", "GET", "/readyz"},
			{"Livez", "GET", "/livez"},
			{"Serve gen/http/openapi3.json", "GET", "/openapi.json"},
		},
		GetProjects:         NewGetProjectsHandler(e.GetProjects, mux, decoder, encoder, errhandler, formatter),
		CreateProject:       NewCreateProjectHandler(e.CreateProject, mux, decoder, encoder, errhandler, formatter),
		GetOneProject:       NewGetOneProjectHandler(e.GetOneProject, mux, decoder, encoder, errhandler, formatter),
		UpdateProject:       NewUpdateProjectHandler(e.UpdateProject, mux, decoder, encoder, errhandler, formatter),
		DeleteProject:       NewDeleteProjectHandler(e.DeleteProject, mux, decoder, encoder, errhandler, formatter),
		Readyz:              NewReadyzHandler(e.Readyz, mux, decoder, encoder, errhandler, formatter),
		Livez:               NewLivezHandler(e.Livez, mux, decoder, encoder, errhandler, formatter),
		GenHTTPOpenapi3JSON: http.FileServer(fileSystemGenHTTPOpenapi3JSON),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "project-service" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetProjects = m(s.GetProjects)
	s.CreateProject = m(s.CreateProject)
	s.GetOneProject = m(s.GetOneProject)
	s.UpdateProject = m(s.UpdateProject)
	s.DeleteProject = m(s.DeleteProject)
	s.Readyz = m(s.Readyz)
	s.Livez = m(s.Livez)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return projectservice.MethodNames[:] }

// Mount configures the mux to serve the project-service endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetProjectsHandler(mux, h.GetProjects)
	MountCreateProjectHandler(mux, h.CreateProject)
	MountGetOneProjectHandler(mux, h.GetOneProject)
	MountUpdateProjectHandler(mux, h.UpdateProject)
	MountDeleteProjectHandler(mux, h.DeleteProject)
	MountReadyzHandler(mux, h.Readyz)
	MountLivezHandler(mux, h.Livez)
	MountGenHTTPOpenapi3JSON(mux, h.GenHTTPOpenapi3JSON)
}

// Mount configures the mux to serve the project-service endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetProjectsHandler configures the mux to serve the "project-service"
// service "get-projects" endpoint.
func MountGetProjectsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/projects", f)
}

// NewGetProjectsHandler creates a HTTP handler which loads the HTTP request
// and calls the "project-service" service "get-projects" endpoint.
func NewGetProjectsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetProjectsRequest(mux, decoder)
		encodeResponse = EncodeGetProjectsResponse(encoder)
		encodeError    = EncodeGetProjectsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-projects")
		ctx = context.WithValue(ctx, goa.ServiceKey, "project-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateProjectHandler configures the mux to serve the "project-service"
// service "create-project" endpoint.
func MountCreateProjectHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/projects", f)
}

// NewCreateProjectHandler creates a HTTP handler which loads the HTTP request
// and calls the "project-service" service "create-project" endpoint.
func NewCreateProjectHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateProjectRequest(mux, decoder)
		encodeResponse = EncodeCreateProjectResponse(encoder)
		encodeError    = EncodeCreateProjectError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create-project")
		ctx = context.WithValue(ctx, goa.ServiceKey, "project-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetOneProjectHandler configures the mux to serve the "project-service"
// service "get-one-project" endpoint.
func MountGetOneProjectHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/projects/{project_id}", f)
}

// NewGetOneProjectHandler creates a HTTP handler which loads the HTTP request
// and calls the "project-service" service "get-one-project" endpoint.
func NewGetOneProjectHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetOneProjectRequest(mux, decoder)
		encodeResponse = EncodeGetOneProjectResponse(encoder)
		encodeError    = EncodeGetOneProjectError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-one-project")
		ctx = context.WithValue(ctx, goa.ServiceKey, "project-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateProjectHandler configures the mux to serve the "project-service"
// service "update-project" endpoint.
func MountUpdateProjectHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/projects/{project_id}", f)
}

// NewUpdateProjectHandler creates a HTTP handler which loads the HTTP request
// and calls the "project-service" service "update-project" endpoint.
func NewUpdateProjectHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateProjectRequest(mux, decoder)
		encodeResponse = EncodeUpdateProjectResponse(encoder)
		encodeError    = EncodeUpdateProjectError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-project")
		ctx = context.WithValue(ctx, goa.ServiceKey, "project-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteProjectHandler configures the mux to serve the "project-service"
// service "delete-project" endpoint.
func MountDeleteProjectHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/projects/{project_id}", f)
}

// NewDeleteProjectHandler creates a HTTP handler which loads the HTTP request
// and calls the "project-service" service "delete-project" endpoint.
func NewDeleteProjectHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteProjectRequest(mux, decoder)
		encodeResponse = EncodeDeleteProjectResponse(encoder)
		encodeError    = EncodeDeleteProjectError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete-project")
		ctx = context.WithValue(ctx, goa.ServiceKey, "project-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReadyzHandler configures the mux to serve the "project-service" service
// "readyz" endpoint.
func MountReadyzHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/readyz", f)
}

// NewReadyzHandler creates a HTTP handler which loads the HTTP request and
// calls the "project-service" service "readyz" endpoint.
func NewReadyzHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeReadyzResponse(encoder)
		encodeError    = EncodeReadyzError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "readyz")
		ctx = context.WithValue(ctx, goa.ServiceKey, "project-service")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountLivezHandler configures the mux to serve the "project-service" service
// "livez" endpoint.
func MountLivezHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/livez", f)
}

// NewLivezHandler creates a HTTP handler which loads the HTTP request and
// calls the "project-service" service "livez" endpoint.
func NewLivezHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeLivezResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "livez")
		ctx = context.WithValue(ctx, goa.ServiceKey, "project-service")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// appendFS is a custom implementation of fs.FS that appends a specified prefix
// to the file paths before delegating the Open call to the underlying fs.FS.
type appendFS struct {
	prefix string
	fs     http.FileSystem
}

// Open opens the named file, appending the prefix to the file path before
// passing it to the underlying fs.FS.
func (s appendFS) Open(name string) (http.File, error) {
	switch name {
	case "/openapi.json":
		name = "/openapi3.json"
	}
	return s.fs.Open(path.Join(s.prefix, name))
}

// appendPrefix returns a new fs.FS that appends the specified prefix to file paths
// before delegating to the provided embed.FS.
func appendPrefix(fsys http.FileSystem, prefix string) http.FileSystem {
	return appendFS{prefix: prefix, fs: fsys}
}

// MountGenHTTPOpenapi3JSON configures the mux to serve GET request made to
// "/openapi.json".
func MountGenHTTPOpenapi3JSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi.json", h.ServeHTTP)
}
