// Code generated by goa v3.21.1, DO NOT EDIT.
//
// project-service HTTP server encoders and decoders
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strings"

	projectservice "github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/gen/project_service"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetProjectsResponse returns an encoder for responses returned by the
// project-service get-projects endpoint.
func EncodeGetProjectsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*projectservice.GetProjectsResult)
		enc := encoder(ctx, w)
		body := NewGetProjectsResponseBody(res)
		if res.CacheControl != nil {
			w.Header().Set("Cache-Control", *res.CacheControl)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetProjectsRequest returns a decoder for requests sent to the
// project-service get-projects endpoint.
func DecodeGetProjectsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			version     *string
			bearerToken *string
			err         error
		)
		versionRaw := r.URL.Query().Get("v")
		if versionRaw != "" {
			version = &versionRaw
		}
		if version != nil {
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
		}
		bearerTokenRaw := r.Header.Get("Authorization")
		if bearerTokenRaw != "" {
			bearerToken = &bearerTokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetProjectsPayload(version, bearerToken)
		if payload.BearerToken != nil {
			if strings.Contains(*payload.BearerToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.BearerToken, " ", 2)[1]
				payload.BearerToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetProjectsError returns an encoder for errors returned by the
// get-projects project-service endpoint.
func EncodeGetProjectsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *projectservice.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetProjectsBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "InternalServerError":
			var res *projectservice.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetProjectsInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *projectservice.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetProjectsServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateProjectResponse returns an encoder for responses returned by the
// project-service create-project endpoint.
func EncodeCreateProjectResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*projectservice.Project)
		enc := encoder(ctx, w)
		body := NewCreateProjectResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateProjectRequest returns a decoder for requests sent to the
// project-service create-project endpoint.
func DecodeCreateProjectRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateProjectRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateProjectRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			version     *string
			bearerToken *string
		)
		versionRaw := r.URL.Query().Get("v")
		if versionRaw != "" {
			version = &versionRaw
		}
		if version != nil {
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
		}
		bearerTokenRaw := r.Header.Get("Authorization")
		if bearerTokenRaw != "" {
			bearerToken = &bearerTokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateProjectPayload(&body, version, bearerToken)
		if payload.BearerToken != nil {
			if strings.Contains(*payload.BearerToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.BearerToken, " ", 2)[1]
				payload.BearerToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeCreateProjectError returns an encoder for errors returned by the
// create-project project-service endpoint.
func EncodeCreateProjectError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *projectservice.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateProjectBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "Conflict":
			var res *projectservice.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateProjectConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "InternalServerError":
			var res *projectservice.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateProjectInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *projectservice.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateProjectServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetOneProjectResponse returns an encoder for responses returned by the
// project-service get-one-project endpoint.
func EncodeGetOneProjectResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*projectservice.GetOneProjectResult)
		enc := encoder(ctx, w)
		body := NewGetOneProjectResponseBody(res)
		if res.Etag != nil {
			w.Header().Set("Etag", *res.Etag)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetOneProjectRequest returns a decoder for requests sent to the
// project-service get-one-project endpoint.
func DecodeGetOneProjectRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id          string
			version     *string
			bearerToken *string
			err         error

			params = mux.Vars(r)
		)
		id = params["id"]
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		versionRaw := r.URL.Query().Get("v")
		if versionRaw != "" {
			version = &versionRaw
		}
		if version != nil {
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
		}
		bearerTokenRaw := r.Header.Get("Authorization")
		if bearerTokenRaw != "" {
			bearerToken = &bearerTokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetOneProjectPayload(id, version, bearerToken)
		if payload.BearerToken != nil {
			if strings.Contains(*payload.BearerToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.BearerToken, " ", 2)[1]
				payload.BearerToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetOneProjectError returns an encoder for errors returned by the
// get-one-project project-service endpoint.
func EncodeGetOneProjectError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "InternalServerError":
			var res *projectservice.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetOneProjectInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "NotFound":
			var res *projectservice.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetOneProjectNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *projectservice.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetOneProjectServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateProjectResponse returns an encoder for responses returned by the
// project-service update-project endpoint.
func EncodeUpdateProjectResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*projectservice.Project)
		enc := encoder(ctx, w)
		body := NewUpdateProjectResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateProjectRequest returns a decoder for requests sent to the
// project-service update-project endpoint.
func DecodeUpdateProjectRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateProjectRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateProjectRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id          string
			version     *string
			bearerToken *string
			etag        *string

			params = mux.Vars(r)
		)
		id = params["id"]
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		versionRaw := r.URL.Query().Get("v")
		if versionRaw != "" {
			version = &versionRaw
		}
		if version != nil {
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
		}
		bearerTokenRaw := r.Header.Get("Authorization")
		if bearerTokenRaw != "" {
			bearerToken = &bearerTokenRaw
		}
		etagRaw := r.Header.Get("ETag")
		if etagRaw != "" {
			etag = &etagRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateProjectPayload(&body, id, version, bearerToken, etag)
		if payload.BearerToken != nil {
			if strings.Contains(*payload.BearerToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.BearerToken, " ", 2)[1]
				payload.BearerToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateProjectError returns an encoder for errors returned by the
// update-project project-service endpoint.
func EncodeUpdateProjectError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *projectservice.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateProjectBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "InternalServerError":
			var res *projectservice.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateProjectInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "NotFound":
			var res *projectservice.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateProjectNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *projectservice.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateProjectServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteProjectResponse returns an encoder for responses returned by the
// project-service delete-project endpoint.
func EncodeDeleteProjectResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteProjectRequest returns a decoder for requests sent to the
// project-service delete-project endpoint.
func DecodeDeleteProjectRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id          string
			version     *string
			bearerToken *string
			etag        *string
			err         error

			params = mux.Vars(r)
		)
		id = params["id"]
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		versionRaw := r.URL.Query().Get("v")
		if versionRaw != "" {
			version = &versionRaw
		}
		if version != nil {
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
		}
		bearerTokenRaw := r.Header.Get("Authorization")
		if bearerTokenRaw != "" {
			bearerToken = &bearerTokenRaw
		}
		etagRaw := r.Header.Get("ETag")
		if etagRaw != "" {
			etag = &etagRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteProjectPayload(id, version, bearerToken, etag)
		if payload.BearerToken != nil {
			if strings.Contains(*payload.BearerToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.BearerToken, " ", 2)[1]
				payload.BearerToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDeleteProjectError returns an encoder for errors returned by the
// delete-project project-service endpoint.
func EncodeDeleteProjectError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *projectservice.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteProjectBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "InternalServerError":
			var res *projectservice.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteProjectInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "NotFound":
			var res *projectservice.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteProjectNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *projectservice.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteProjectServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeReadyzResponse returns an encoder for responses returned by the
// project-service readyz endpoint.
func EncodeReadyzResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]byte)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "text/plain")
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeReadyzError returns an encoder for errors returned by the readyz
// project-service endpoint.
func EncodeReadyzError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "ServiceUnavailable":
			var res *projectservice.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewReadyzServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeLivezResponse returns an encoder for responses returned by the
// project-service livez endpoint.
func EncodeLivezResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]byte)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "text/plain")
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// marshalProjectserviceProjectToProjectResponseBody builds a value of type
// *ProjectResponseBody from a value of type *projectservice.Project.
func marshalProjectserviceProjectToProjectResponseBody(v *projectservice.Project) *ProjectResponseBody {
	res := &ProjectResponseBody{
		ID:          v.ID,
		Slug:        v.Slug,
		Description: v.Description,
		Name:        v.Name,
		Public:      v.Public,
		ParentUID:   v.ParentUID,
	}
	if v.Auditors != nil {
		res.Auditors = make([]string, len(v.Auditors))
		for i, val := range v.Auditors {
			res.Auditors[i] = val
		}
	}
	if v.Writers != nil {
		res.Writers = make([]string, len(v.Writers))
		for i, val := range v.Writers {
			res.Writers[i] = val
		}
	}

	return res
}
