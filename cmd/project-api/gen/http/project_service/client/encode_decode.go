// Code generated by goa v3.21.1, DO NOT EDIT.
//
// project-service HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	projectservice "github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/gen/project_service"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetProjectsRequest instantiates a HTTP request object with method and
// path set to call the "project-service" service "get-projects" endpoint
func (c *Client) BuildGetProjectsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetProjectsProjectServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project-service", "get-projects", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetProjectsRequest returns an encoder for requests sent to the
// project-service get-projects server.
func EncodeGetProjectsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*projectservice.GetProjectsPayload)
		if !ok {
			return goahttp.ErrInvalidType("project-service", "get-projects", "*projectservice.GetProjectsPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetProjectsResponse returns a decoder for responses returned by the
// project-service get-projects endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetProjectsResponse may return the following errors:
//   - "BadRequest" (type *projectservice.BadRequestError): http.StatusBadRequest
//   - "InternalServerError" (type *projectservice.InternalServerError): http.StatusInternalServerError
//   - "ServiceUnavailable" (type *projectservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeGetProjectsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetProjectsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "get-projects", err)
			}
			err = ValidateGetProjectsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "get-projects", err)
			}
			var (
				cacheControl *string
			)
			cacheControlRaw := resp.Header.Get("Cache-Control")
			if cacheControlRaw != "" {
				cacheControl = &cacheControlRaw
			}
			res := NewGetProjectsResultOK(&body, cacheControl)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetProjectsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "get-projects", err)
			}
			err = ValidateGetProjectsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "get-projects", err)
			}
			return nil, NewGetProjectsBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body GetProjectsInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "get-projects", err)
			}
			err = ValidateGetProjectsInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "get-projects", err)
			}
			return nil, NewGetProjectsInternalServerError(&body)
		case http.StatusServiceUnavailable:
			var (
				body GetProjectsServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "get-projects", err)
			}
			err = ValidateGetProjectsServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "get-projects", err)
			}
			return nil, NewGetProjectsServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project-service", "get-projects", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateProjectRequest instantiates a HTTP request object with method and
// path set to call the "project-service" service "create-project" endpoint
func (c *Client) BuildCreateProjectRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateProjectProjectServicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project-service", "create-project", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateProjectRequest returns an encoder for requests sent to the
// project-service create-project server.
func EncodeCreateProjectRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*projectservice.CreateProjectPayload)
		if !ok {
			return goahttp.ErrInvalidType("project-service", "create-project", "*projectservice.CreateProjectPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		body := NewCreateProjectRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("project-service", "create-project", err)
		}
		return nil
	}
}

// DecodeCreateProjectResponse returns a decoder for responses returned by the
// project-service create-project endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateProjectResponse may return the following errors:
//   - "BadRequest" (type *projectservice.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *projectservice.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *projectservice.InternalServerError): http.StatusInternalServerError
//   - "ServiceUnavailable" (type *projectservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeCreateProjectResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateProjectResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "create-project", err)
			}
			err = ValidateCreateProjectResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "create-project", err)
			}
			res := NewCreateProjectProjectOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateProjectBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "create-project", err)
			}
			err = ValidateCreateProjectBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "create-project", err)
			}
			return nil, NewCreateProjectBadRequest(&body)
		case http.StatusConflict:
			var (
				body CreateProjectConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "create-project", err)
			}
			err = ValidateCreateProjectConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "create-project", err)
			}
			return nil, NewCreateProjectConflict(&body)
		case http.StatusInternalServerError:
			var (
				body CreateProjectInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "create-project", err)
			}
			err = ValidateCreateProjectInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "create-project", err)
			}
			return nil, NewCreateProjectInternalServerError(&body)
		case http.StatusServiceUnavailable:
			var (
				body CreateProjectServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "create-project", err)
			}
			err = ValidateCreateProjectServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "create-project", err)
			}
			return nil, NewCreateProjectServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project-service", "create-project", resp.StatusCode, string(body))
		}
	}
}

// BuildGetOneProjectRequest instantiates a HTTP request object with method and
// path set to call the "project-service" service "get-one-project" endpoint
func (c *Client) BuildGetOneProjectRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*projectservice.GetOneProjectPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project-service", "get-one-project", "*projectservice.GetOneProjectPayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetOneProjectProjectServicePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project-service", "get-one-project", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetOneProjectRequest returns an encoder for requests sent to the
// project-service get-one-project server.
func EncodeGetOneProjectRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*projectservice.GetOneProjectPayload)
		if !ok {
			return goahttp.ErrInvalidType("project-service", "get-one-project", "*projectservice.GetOneProjectPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetOneProjectResponse returns a decoder for responses returned by the
// project-service get-one-project endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetOneProjectResponse may return the following errors:
//   - "InternalServerError" (type *projectservice.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *projectservice.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *projectservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeGetOneProjectResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetOneProjectResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "get-one-project", err)
			}
			err = ValidateGetOneProjectResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "get-one-project", err)
			}
			var (
				etag *string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw != "" {
				etag = &etagRaw
			}
			res := NewGetOneProjectResultOK(&body, etag)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetOneProjectInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "get-one-project", err)
			}
			err = ValidateGetOneProjectInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "get-one-project", err)
			}
			return nil, NewGetOneProjectInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body GetOneProjectNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "get-one-project", err)
			}
			err = ValidateGetOneProjectNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "get-one-project", err)
			}
			return nil, NewGetOneProjectNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body GetOneProjectServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "get-one-project", err)
			}
			err = ValidateGetOneProjectServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "get-one-project", err)
			}
			return nil, NewGetOneProjectServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project-service", "get-one-project", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateProjectRequest instantiates a HTTP request object with method and
// path set to call the "project-service" service "update-project" endpoint
func (c *Client) BuildUpdateProjectRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*projectservice.UpdateProjectPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project-service", "update-project", "*projectservice.UpdateProjectPayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateProjectProjectServicePath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project-service", "update-project", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateProjectRequest returns an encoder for requests sent to the
// project-service update-project server.
func EncodeUpdateProjectRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*projectservice.UpdateProjectPayload)
		if !ok {
			return goahttp.ErrInvalidType("project-service", "update-project", "*projectservice.UpdateProjectPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Etag != nil {
			head := *p.Etag
			req.Header.Set("ETag", head)
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("project-service", "update-project", err)
		}
		return nil
	}
}

// DecodeUpdateProjectResponse returns a decoder for responses returned by the
// project-service update-project endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateProjectResponse may return the following errors:
//   - "BadRequest" (type *projectservice.BadRequestError): http.StatusBadRequest
//   - "InternalServerError" (type *projectservice.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *projectservice.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *projectservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeUpdateProjectResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateProjectResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "update-project", err)
			}
			err = ValidateUpdateProjectResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "update-project", err)
			}
			res := NewUpdateProjectProjectOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateProjectBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "update-project", err)
			}
			err = ValidateUpdateProjectBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "update-project", err)
			}
			return nil, NewUpdateProjectBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateProjectInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "update-project", err)
			}
			err = ValidateUpdateProjectInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "update-project", err)
			}
			return nil, NewUpdateProjectInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body UpdateProjectNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "update-project", err)
			}
			err = ValidateUpdateProjectNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "update-project", err)
			}
			return nil, NewUpdateProjectNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body UpdateProjectServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "update-project", err)
			}
			err = ValidateUpdateProjectServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "update-project", err)
			}
			return nil, NewUpdateProjectServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project-service", "update-project", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteProjectRequest instantiates a HTTP request object with method and
// path set to call the "project-service" service "delete-project" endpoint
func (c *Client) BuildDeleteProjectRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*projectservice.DeleteProjectPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project-service", "delete-project", "*projectservice.DeleteProjectPayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteProjectProjectServicePath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project-service", "delete-project", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteProjectRequest returns an encoder for requests sent to the
// project-service delete-project server.
func EncodeDeleteProjectRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*projectservice.DeleteProjectPayload)
		if !ok {
			return goahttp.ErrInvalidType("project-service", "delete-project", "*projectservice.DeleteProjectPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.Etag != nil {
			head := *p.Etag
			req.Header.Set("ETag", head)
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDeleteProjectResponse returns a decoder for responses returned by the
// project-service delete-project endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteProjectResponse may return the following errors:
//   - "BadRequest" (type *projectservice.BadRequestError): http.StatusBadRequest
//   - "InternalServerError" (type *projectservice.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *projectservice.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *projectservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeDeleteProjectResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteProjectBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "delete-project", err)
			}
			err = ValidateDeleteProjectBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "delete-project", err)
			}
			return nil, NewDeleteProjectBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteProjectInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "delete-project", err)
			}
			err = ValidateDeleteProjectInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "delete-project", err)
			}
			return nil, NewDeleteProjectInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body DeleteProjectNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "delete-project", err)
			}
			err = ValidateDeleteProjectNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "delete-project", err)
			}
			return nil, NewDeleteProjectNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body DeleteProjectServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "delete-project", err)
			}
			err = ValidateDeleteProjectServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "delete-project", err)
			}
			return nil, NewDeleteProjectServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project-service", "delete-project", resp.StatusCode, string(body))
		}
	}
}

// BuildReadyzRequest instantiates a HTTP request object with method and path
// set to call the "project-service" service "readyz" endpoint
func (c *Client) BuildReadyzRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReadyzProjectServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project-service", "readyz", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeReadyzResponse returns a decoder for responses returned by the
// project-service readyz endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeReadyzResponse may return the following errors:
//   - "ServiceUnavailable" (type *projectservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeReadyzResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "readyz", err)
			}
			return body, nil
		case http.StatusServiceUnavailable:
			var (
				body ReadyzServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "readyz", err)
			}
			err = ValidateReadyzServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "readyz", err)
			}
			return nil, NewReadyzServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project-service", "readyz", resp.StatusCode, string(body))
		}
	}
}

// BuildLivezRequest instantiates a HTTP request object with method and path
// set to call the "project-service" service "livez" endpoint
func (c *Client) BuildLivezRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LivezProjectServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project-service", "livez", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeLivezResponse returns a decoder for responses returned by the
// project-service livez endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeLivezResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "livez", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project-service", "livez", resp.StatusCode, string(body))
		}
	}
}

// unmarshalProjectResponseBodyToProjectserviceProject builds a value of type
// *projectservice.Project from a value of type *ProjectResponseBody.
func unmarshalProjectResponseBodyToProjectserviceProject(v *ProjectResponseBody) *projectservice.Project {
	res := &projectservice.Project{
		ID:          v.ID,
		Slug:        v.Slug,
		Description: v.Description,
		Name:        v.Name,
	}
	if v.Managers != nil {
		res.Managers = make([]string, len(v.Managers))
		for i, val := range v.Managers {
			res.Managers[i] = val
		}
	}

	return res
}
