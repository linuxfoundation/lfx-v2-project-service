// Code generated by goa v3.21.1, DO NOT EDIT.
//
// project-service HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/design

package client

import (
	"encoding/json"
	"fmt"

	projectservice "github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/gen/project_service"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetProjectsPayload builds the payload for the project-service
// get-projects endpoint from CLI flags.
func BuildGetProjectsPayload(projectServiceGetProjectsVersion string, projectServiceGetProjectsBearerToken string) (*projectservice.GetProjectsPayload, error) {
	var err error
	var version *string
	{
		if projectServiceGetProjectsVersion != "" {
			version = &projectServiceGetProjectsVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if projectServiceGetProjectsBearerToken != "" {
			bearerToken = &projectServiceGetProjectsBearerToken
		}
	}
	v := &projectservice.GetProjectsPayload{}
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildCreateProjectPayload builds the payload for the project-service
// create-project endpoint from CLI flags.
func BuildCreateProjectPayload(projectServiceCreateProjectBody string, projectServiceCreateProjectVersion string, projectServiceCreateProjectBearerToken string) (*projectservice.CreateProjectPayload, error) {
	var err error
	var body CreateProjectRequestBody
	{
		err = json.Unmarshal([]byte(projectServiceCreateProjectBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"announcement_date\": \"2021-01-01\",\n      \"auditors\": [\n         \"user123\",\n         \"user456\"\n      ],\n      \"autojoin_enabled\": false,\n      \"category\": \"Active\",\n      \"charter_url\": \"https://example.com/charter.pdf\",\n      \"description\": \"project foo is a project about bar\",\n      \"entity_dissolution_date\": \"2021-12-31\",\n      \"entity_formation_document_url\": \"https://example.com/formation.pdf\",\n      \"formation_date\": \"2021-01-01\",\n      \"funding_model\": [\n         \"Crowdfunding\"\n      ],\n      \"legal_entity_name\": \"Example Foundation LLC\",\n      \"legal_entity_type\": \"Subproject\",\n      \"legal_parent_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"logo_url\": \"https://example.com/logo.png\",\n      \"meeting_coordinators\": [\n         \"user123\",\n         \"user456\"\n      ],\n      \"mission_statement\": \"The mission of the project is to build a sustainable ecosystem around open source projects to accelerate technology development and industry adoption.\",\n      \"name\": \"Foo Foundation\",\n      \"parent_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"public\": true,\n      \"repository_url\": \"https://example.com/project\",\n      \"slug\": \"project-slug\",\n      \"stage\": \"Formation - Exploratory\",\n      \"website_url\": \"https://example.com\",\n      \"writers\": [\n         \"user123\",\n         \"user456\"\n      ]\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", body.Slug, goa.FormatRegexp))
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
		if body.Stage != nil {
			if !(*body.Stage == "Formation - Exploratory" || *body.Stage == "Formation - Engaged" || *body.Stage == "Active" || *body.Stage == "Archived" || *body.Stage == "Formation - On Hold" || *body.Stage == "Formation - Disengaged" || *body.Stage == "Formation - Confidential" || *body.Stage == "Prospect") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.stage", *body.Stage, []any{"Formation - Exploratory", "Formation - Engaged", "Active", "Archived", "Formation - On Hold", "Formation - Disengaged", "Formation - Confidential", "Prospect"}))
			}
		}
		if body.Category != nil {
			if !(*body.Category == "Active" || *body.Category == "Adopted" || *body.Category == "Archived" || *body.Category == "At-Large" || *body.Category == "Early Adoption" || *body.Category == "Emeritus" || *body.Category == "Graduated" || *body.Category == "Growth" || *body.Category == "Idle" || *body.Category == "Impact" || *body.Category == "Incubating" || *body.Category == "Kanister" || *body.Category == "Mature" || *body.Category == "Pre-LFESS" || *body.Category == "Sandbox" || *body.Category == "SIG" || *body.Category == "Standards" || *body.Category == "TAC" || *body.Category == "Working Group" || *body.Category == "TAG" || *body.Category == "NONE") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Active", "Adopted", "Archived", "At-Large", "Early Adoption", "Emeritus", "Graduated", "Growth", "Idle", "Impact", "Incubating", "Kanister", "Mature", "Pre-LFESS", "Sandbox", "SIG", "Standards", "TAC", "Working Group", "TAG", "NONE"}))
			}
		}
		for _, e := range body.FundingModel {
			if !(e == "Crowdfunding" || e == "Membership" || e == "Alternate Funding") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.funding_model[*]", e, []any{"Crowdfunding", "Membership", "Alternate Funding"}))
			}
		}
		if body.CharterURL != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.charter_url", *body.CharterURL, goa.FormatURI))
		}
		if body.LegalEntityType != nil {
			if !(*body.LegalEntityType == "Subproject" || *body.LegalEntityType == "Incorporated Entity" || *body.LegalEntityType == "Series LLC" || *body.LegalEntityType == "Unofficial Subproject" || *body.LegalEntityType == "Internal Allocation" || *body.LegalEntityType == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.legal_entity_type", *body.LegalEntityType, []any{"Subproject", "Incorporated Entity", "Series LLC", "Unofficial Subproject", "Internal Allocation", "None"}))
			}
		}
		if body.LegalParentUID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.legal_parent_uid", *body.LegalParentUID, goa.FormatUUID))
		}
		if body.EntityDissolutionDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_dissolution_date", *body.EntityDissolutionDate, goa.FormatDate))
		}
		if body.EntityFormationDocumentURL != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_formation_document_url", *body.EntityFormationDocumentURL, goa.FormatURI))
		}
		if body.FormationDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.formation_date", *body.FormationDate, goa.FormatDate))
		}
		if body.LogoURL != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.logo_url", *body.LogoURL, goa.FormatURI))
		}
		if body.RepositoryURL != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.repository_url", *body.RepositoryURL, goa.FormatURI))
		}
		if body.WebsiteURL != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.website_url", *body.WebsiteURL, goa.FormatURI))
		}
		if body.AnnouncementDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.announcement_date", *body.AnnouncementDate, goa.FormatDate))
		}
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if projectServiceCreateProjectVersion != "" {
			version = &projectServiceCreateProjectVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if projectServiceCreateProjectBearerToken != "" {
			bearerToken = &projectServiceCreateProjectBearerToken
		}
	}
	v := &projectservice.CreateProjectPayload{
		Slug:                       body.Slug,
		Description:                body.Description,
		Name:                       body.Name,
		Public:                     body.Public,
		ParentUID:                  body.ParentUID,
		Stage:                      body.Stage,
		Category:                   body.Category,
		CharterURL:                 body.CharterURL,
		LegalEntityType:            body.LegalEntityType,
		LegalEntityName:            body.LegalEntityName,
		LegalParentUID:             body.LegalParentUID,
		EntityDissolutionDate:      body.EntityDissolutionDate,
		EntityFormationDocumentURL: body.EntityFormationDocumentURL,
		AutojoinEnabled:            body.AutojoinEnabled,
		FormationDate:              body.FormationDate,
		LogoURL:                    body.LogoURL,
		RepositoryURL:              body.RepositoryURL,
		WebsiteURL:                 body.WebsiteURL,
		AnnouncementDate:           body.AnnouncementDate,
		MissionStatement:           body.MissionStatement,
	}
	if body.FundingModel != nil {
		v.FundingModel = make([]string, len(body.FundingModel))
		for i, val := range body.FundingModel {
			v.FundingModel[i] = val
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.MeetingCoordinators != nil {
		v.MeetingCoordinators = make([]string, len(body.MeetingCoordinators))
		for i, val := range body.MeetingCoordinators {
			v.MeetingCoordinators[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildGetOneProjectBasePayload builds the payload for the project-service
// get-one-project-base endpoint from CLI flags.
func BuildGetOneProjectBasePayload(projectServiceGetOneProjectBaseUID string, projectServiceGetOneProjectBaseVersion string, projectServiceGetOneProjectBaseBearerToken string) (*projectservice.GetOneProjectBasePayload, error) {
	var err error
	var uid string
	{
		uid = projectServiceGetOneProjectBaseUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if projectServiceGetOneProjectBaseVersion != "" {
			version = &projectServiceGetOneProjectBaseVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if projectServiceGetOneProjectBaseBearerToken != "" {
			bearerToken = &projectServiceGetOneProjectBaseBearerToken
		}
	}
	v := &projectservice.GetOneProjectBasePayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildGetOneProjectSettingsPayload builds the payload for the project-service
// get-one-project-settings endpoint from CLI flags.
func BuildGetOneProjectSettingsPayload(projectServiceGetOneProjectSettingsUID string, projectServiceGetOneProjectSettingsVersion string, projectServiceGetOneProjectSettingsBearerToken string) (*projectservice.GetOneProjectSettingsPayload, error) {
	var err error
	var uid string
	{
		uid = projectServiceGetOneProjectSettingsUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if projectServiceGetOneProjectSettingsVersion != "" {
			version = &projectServiceGetOneProjectSettingsVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if projectServiceGetOneProjectSettingsBearerToken != "" {
			bearerToken = &projectServiceGetOneProjectSettingsBearerToken
		}
	}
	v := &projectservice.GetOneProjectSettingsPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateProjectBasePayload builds the payload for the project-service
// update-project-base endpoint from CLI flags.
func BuildUpdateProjectBasePayload(projectServiceUpdateProjectBaseBody string, projectServiceUpdateProjectBaseUID string, projectServiceUpdateProjectBaseVersion string, projectServiceUpdateProjectBaseBearerToken string, projectServiceUpdateProjectBaseEtag string) (*projectservice.UpdateProjectBasePayload, error) {
	var err error
	var body UpdateProjectBaseRequestBody
	{
		err = json.Unmarshal([]byte(projectServiceUpdateProjectBaseBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"autojoin_enabled\": false,\n      \"category\": \"Active\",\n      \"charter_url\": \"https://example.com/charter.pdf\",\n      \"description\": \"project foo is a project about bar\",\n      \"entity_dissolution_date\": \"2021-12-31\",\n      \"entity_formation_document_url\": \"https://example.com/formation.pdf\",\n      \"formation_date\": \"2021-01-01\",\n      \"funding_model\": [\n         \"Crowdfunding\"\n      ],\n      \"legal_entity_name\": \"Example Foundation LLC\",\n      \"legal_entity_type\": \"Subproject\",\n      \"legal_parent_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"logo_url\": \"https://example.com/logo.png\",\n      \"name\": \"Foo Foundation\",\n      \"parent_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"public\": true,\n      \"repository_url\": \"https://example.com/project\",\n      \"slug\": \"project-slug\",\n      \"stage\": \"Formation - Exploratory\",\n      \"website_url\": \"https://example.com\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", body.Slug, goa.FormatRegexp))
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
		if body.Stage != nil {
			if !(*body.Stage == "Formation - Exploratory" || *body.Stage == "Formation - Engaged" || *body.Stage == "Active" || *body.Stage == "Archived" || *body.Stage == "Formation - On Hold" || *body.Stage == "Formation - Disengaged" || *body.Stage == "Formation - Confidential" || *body.Stage == "Prospect") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.stage", *body.Stage, []any{"Formation - Exploratory", "Formation - Engaged", "Active", "Archived", "Formation - On Hold", "Formation - Disengaged", "Formation - Confidential", "Prospect"}))
			}
		}
		if body.Category != nil {
			if !(*body.Category == "Active" || *body.Category == "Adopted" || *body.Category == "Archived" || *body.Category == "At-Large" || *body.Category == "Early Adoption" || *body.Category == "Emeritus" || *body.Category == "Graduated" || *body.Category == "Growth" || *body.Category == "Idle" || *body.Category == "Impact" || *body.Category == "Incubating" || *body.Category == "Kanister" || *body.Category == "Mature" || *body.Category == "Pre-LFESS" || *body.Category == "Sandbox" || *body.Category == "SIG" || *body.Category == "Standards" || *body.Category == "TAC" || *body.Category == "Working Group" || *body.Category == "TAG" || *body.Category == "NONE") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Active", "Adopted", "Archived", "At-Large", "Early Adoption", "Emeritus", "Graduated", "Growth", "Idle", "Impact", "Incubating", "Kanister", "Mature", "Pre-LFESS", "Sandbox", "SIG", "Standards", "TAC", "Working Group", "TAG", "NONE"}))
			}
		}
		for _, e := range body.FundingModel {
			if !(e == "Crowdfunding" || e == "Membership" || e == "Alternate Funding") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.funding_model[*]", e, []any{"Crowdfunding", "Membership", "Alternate Funding"}))
			}
		}
		if body.CharterURL != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.charter_url", *body.CharterURL, goa.FormatURI))
		}
		if body.LegalEntityType != nil {
			if !(*body.LegalEntityType == "Subproject" || *body.LegalEntityType == "Incorporated Entity" || *body.LegalEntityType == "Series LLC" || *body.LegalEntityType == "Unofficial Subproject" || *body.LegalEntityType == "Internal Allocation" || *body.LegalEntityType == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.legal_entity_type", *body.LegalEntityType, []any{"Subproject", "Incorporated Entity", "Series LLC", "Unofficial Subproject", "Internal Allocation", "None"}))
			}
		}
		if body.LegalParentUID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.legal_parent_uid", *body.LegalParentUID, goa.FormatUUID))
		}
		if body.EntityDissolutionDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_dissolution_date", *body.EntityDissolutionDate, goa.FormatDate))
		}
		if body.EntityFormationDocumentURL != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_formation_document_url", *body.EntityFormationDocumentURL, goa.FormatURI))
		}
		if body.FormationDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.formation_date", *body.FormationDate, goa.FormatDate))
		}
		if body.LogoURL != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.logo_url", *body.LogoURL, goa.FormatURI))
		}
		if body.RepositoryURL != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.repository_url", *body.RepositoryURL, goa.FormatURI))
		}
		if body.WebsiteURL != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.website_url", *body.WebsiteURL, goa.FormatURI))
		}
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = projectServiceUpdateProjectBaseUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if projectServiceUpdateProjectBaseVersion != "" {
			version = &projectServiceUpdateProjectBaseVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if projectServiceUpdateProjectBaseBearerToken != "" {
			bearerToken = &projectServiceUpdateProjectBaseBearerToken
		}
	}
	var etag *string
	{
		if projectServiceUpdateProjectBaseEtag != "" {
			etag = &projectServiceUpdateProjectBaseEtag
		}
	}
	v := &projectservice.UpdateProjectBasePayload{
		Slug:                       body.Slug,
		Description:                body.Description,
		Name:                       body.Name,
		Public:                     body.Public,
		ParentUID:                  body.ParentUID,
		Stage:                      body.Stage,
		Category:                   body.Category,
		CharterURL:                 body.CharterURL,
		LegalEntityType:            body.LegalEntityType,
		LegalEntityName:            body.LegalEntityName,
		LegalParentUID:             body.LegalParentUID,
		EntityDissolutionDate:      body.EntityDissolutionDate,
		EntityFormationDocumentURL: body.EntityFormationDocumentURL,
		AutojoinEnabled:            body.AutojoinEnabled,
		FormationDate:              body.FormationDate,
		LogoURL:                    body.LogoURL,
		RepositoryURL:              body.RepositoryURL,
		WebsiteURL:                 body.WebsiteURL,
	}
	if body.FundingModel != nil {
		v.FundingModel = make([]string, len(body.FundingModel))
		for i, val := range body.FundingModel {
			v.FundingModel[i] = val
		}
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}

// BuildUpdateProjectSettingsPayload builds the payload for the project-service
// update-project-settings endpoint from CLI flags.
func BuildUpdateProjectSettingsPayload(projectServiceUpdateProjectSettingsBody string, projectServiceUpdateProjectSettingsUID string, projectServiceUpdateProjectSettingsVersion string, projectServiceUpdateProjectSettingsBearerToken string, projectServiceUpdateProjectSettingsEtag string) (*projectservice.UpdateProjectSettingsPayload, error) {
	var err error
	var body UpdateProjectSettingsRequestBody
	{
		err = json.Unmarshal([]byte(projectServiceUpdateProjectSettingsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"announcement_date\": \"2021-01-01\",\n      \"auditors\": [\n         \"user123\",\n         \"user456\"\n      ],\n      \"meeting_coordinators\": [\n         \"user123\",\n         \"user456\"\n      ],\n      \"mission_statement\": \"The mission of the project is to build a sustainable ecosystem around open source projects to accelerate technology development and industry adoption.\",\n      \"writers\": [\n         \"user123\",\n         \"user456\"\n      ]\n   }'")
		}
	}
	var uid string
	{
		uid = projectServiceUpdateProjectSettingsUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if projectServiceUpdateProjectSettingsVersion != "" {
			version = &projectServiceUpdateProjectSettingsVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if projectServiceUpdateProjectSettingsBearerToken != "" {
			bearerToken = &projectServiceUpdateProjectSettingsBearerToken
		}
	}
	var etag *string
	{
		if projectServiceUpdateProjectSettingsEtag != "" {
			etag = &projectServiceUpdateProjectSettingsEtag
		}
	}
	v := &projectservice.UpdateProjectSettingsPayload{
		MissionStatement: body.MissionStatement,
		AnnouncementDate: body.AnnouncementDate,
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.MeetingCoordinators != nil {
		v.MeetingCoordinators = make([]string, len(body.MeetingCoordinators))
		for i, val := range body.MeetingCoordinators {
			v.MeetingCoordinators[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}

// BuildDeleteProjectPayload builds the payload for the project-service
// delete-project endpoint from CLI flags.
func BuildDeleteProjectPayload(projectServiceDeleteProjectUID string, projectServiceDeleteProjectVersion string, projectServiceDeleteProjectBearerToken string, projectServiceDeleteProjectEtag string) (*projectservice.DeleteProjectPayload, error) {
	var err error
	var uid string
	{
		uid = projectServiceDeleteProjectUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if projectServiceDeleteProjectVersion != "" {
			version = &projectServiceDeleteProjectVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if projectServiceDeleteProjectBearerToken != "" {
			bearerToken = &projectServiceDeleteProjectBearerToken
		}
	}
	var etag *string
	{
		if projectServiceDeleteProjectEtag != "" {
			etag = &projectServiceDeleteProjectEtag
		}
	}
	v := &projectservice.DeleteProjectPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}
