// Code generated by goa v3.21.1, DO NOT EDIT.
//
// project-service HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/design

package client

import (
	"encoding/json"
	"fmt"

	projectservice "github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/gen/project_service"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetProjectsPayload builds the payload for the project-service
// get-projects endpoint from CLI flags.
func BuildGetProjectsPayload(projectServiceGetProjectsVersion string, projectServiceGetProjectsBearerToken string) (*projectservice.GetProjectsPayload, error) {
	var err error
	var version *string
	{
		if projectServiceGetProjectsVersion != "" {
			version = &projectServiceGetProjectsVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if projectServiceGetProjectsBearerToken != "" {
			bearerToken = &projectServiceGetProjectsBearerToken
		}
	}
	v := &projectservice.GetProjectsPayload{}
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildCreateProjectPayload builds the payload for the project-service
// create-project endpoint from CLI flags.
func BuildCreateProjectPayload(projectServiceCreateProjectBody string, projectServiceCreateProjectVersion string, projectServiceCreateProjectBearerToken string) (*projectservice.CreateProjectPayload, error) {
	var err error
	var body CreateProjectRequestBody
	{
		err = json.Unmarshal([]byte(projectServiceCreateProjectBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"project foo is a project about bar\",\n      \"managers\": [\n         \"user123\",\n         \"user456\"\n      ],\n      \"name\": \"Foo Foundation\",\n      \"slug\": \"project-slug\"\n   }'")
		}
		if body.Managers == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("managers", "body"))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", body.Slug, goa.FormatRegexp))
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if projectServiceCreateProjectVersion != "" {
			version = &projectServiceCreateProjectVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if projectServiceCreateProjectBearerToken != "" {
			bearerToken = &projectServiceCreateProjectBearerToken
		}
	}
	v := &projectservice.CreateProjectPayload{
		Slug:        body.Slug,
		Description: body.Description,
		Name:        body.Name,
	}
	if body.Managers != nil {
		v.Managers = make([]string, len(body.Managers))
		for i, val := range body.Managers {
			v.Managers[i] = val
		}
	} else {
		v.Managers = []string{}
	}
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildGetOneProjectPayload builds the payload for the project-service
// get-one-project endpoint from CLI flags.
func BuildGetOneProjectPayload(projectServiceGetOneProjectID string, projectServiceGetOneProjectVersion string, projectServiceGetOneProjectBearerToken string) (*projectservice.GetOneProjectPayload, error) {
	var err error
	var id string
	{
		id = projectServiceGetOneProjectID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if projectServiceGetOneProjectVersion != "" {
			version = &projectServiceGetOneProjectVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if projectServiceGetOneProjectBearerToken != "" {
			bearerToken = &projectServiceGetOneProjectBearerToken
		}
	}
	v := &projectservice.GetOneProjectPayload{}
	v.ID = &id
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateProjectPayload builds the payload for the project-service
// update-project endpoint from CLI flags.
func BuildUpdateProjectPayload(projectServiceUpdateProjectBody string, projectServiceUpdateProjectID string, projectServiceUpdateProjectVersion string, projectServiceUpdateProjectBearerToken string, projectServiceUpdateProjectEtag string) (*projectservice.UpdateProjectPayload, error) {
	var err error
	var body struct {
		// Project slug, a short slugified name of the project
		Slug *string `form:"slug" json:"slug" xml:"slug"`
		// A description of the project
		Description *string `form:"description" json:"description" xml:"description"`
		// The pretty name of the project
		Name *string `form:"name" json:"name" xml:"name"`
		// A list of project managers by their user IDs
		Managers []string `form:"managers" json:"managers" xml:"managers"`
	}
	{
		err = json.Unmarshal([]byte(projectServiceUpdateProjectBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"project foo is a project about bar\",\n      \"managers\": [\n         \"user123\",\n         \"user456\"\n      ],\n      \"name\": \"Foo Foundation\",\n      \"slug\": \"project-slug\"\n   }'")
		}
	}
	var id string
	{
		id = projectServiceUpdateProjectID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if projectServiceUpdateProjectVersion != "" {
			version = &projectServiceUpdateProjectVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if projectServiceUpdateProjectBearerToken != "" {
			bearerToken = &projectServiceUpdateProjectBearerToken
		}
	}
	var etag *string
	{
		if projectServiceUpdateProjectEtag != "" {
			etag = &projectServiceUpdateProjectEtag
		}
	}
	v := &projectservice.UpdateProjectPayload{}
	if body.Slug != nil {
		v.Slug = *body.Slug
	}
	if body.Description != nil {
		v.Description = *body.Description
	}
	if body.Name != nil {
		v.Name = *body.Name
	}
	if body.Managers != nil {
		v.Managers = make([]string, len(body.Managers))
		for i, val := range body.Managers {
			v.Managers[i] = val
		}
	}
	v.ID = &id
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}

// BuildDeleteProjectPayload builds the payload for the project-service
// delete-project endpoint from CLI flags.
func BuildDeleteProjectPayload(projectServiceDeleteProjectID string, projectServiceDeleteProjectVersion string, projectServiceDeleteProjectBearerToken string, projectServiceDeleteProjectEtag string) (*projectservice.DeleteProjectPayload, error) {
	var err error
	var id string
	{
		id = projectServiceDeleteProjectID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if projectServiceDeleteProjectVersion != "" {
			version = &projectServiceDeleteProjectVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if projectServiceDeleteProjectBearerToken != "" {
			bearerToken = &projectServiceDeleteProjectBearerToken
		}
	}
	var etag *string
	{
		if projectServiceDeleteProjectEtag != "" {
			etag = &projectServiceDeleteProjectEtag
		}
	}
	v := &projectservice.DeleteProjectPayload{}
	v.ID = &id
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}
