// Code generated by goa v3.21.1, DO NOT EDIT.
//
// project-service HTTP client types
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/design

package client

import (
	projectservice "github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/gen/project_service"
	goa "goa.design/goa/v3/pkg"
)

// CreateProjectRequestBody is the type of the "project-service" service
// "create-project" endpoint HTTP request body.
type CreateProjectRequestBody struct {
	// Project slug, a short slugified name of the project
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// A description of the project
	Description string `form:"description" json:"description" xml:"description"`
	// The pretty name of the project
	Name string `form:"name" json:"name" xml:"name"`
	// A list of project managers by their user IDs
	Managers []string `form:"managers" json:"managers" xml:"managers"`
}

// GetProjectsResponseBody is the type of the "project-service" service
// "get-projects" endpoint HTTP response body.
type GetProjectsResponseBody struct {
	// Resources found
	Projects []*ProjectResponseBody `form:"projects,omitempty" json:"projects,omitempty" xml:"projects,omitempty"`
}

// CreateProjectResponseBody is the type of the "project-service" service
// "create-project" endpoint HTTP response body.
type CreateProjectResponseBody struct {
	// Project ID -- v2 id, not related to v1 id directly
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// A list of project managers by their user IDs
	Managers []string `form:"managers,omitempty" json:"managers,omitempty" xml:"managers,omitempty"`
}

// GetOneProjectResponseBody is the type of the "project-service" service
// "get-one-project" endpoint HTTP response body.
type GetOneProjectResponseBody ProjectResponseBody

// UpdateProjectResponseBody is the type of the "project-service" service
// "update-project" endpoint HTTP response body.
type UpdateProjectResponseBody struct {
	// Project ID -- v2 id, not related to v1 id directly
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// A list of project managers by their user IDs
	Managers []string `form:"managers,omitempty" json:"managers,omitempty" xml:"managers,omitempty"`
}

// GetProjectsBadRequestResponseBody is the type of the "project-service"
// service "get-projects" endpoint HTTP response body for the "BadRequest"
// error.
type GetProjectsBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetProjectsInternalServerErrorResponseBody is the type of the
// "project-service" service "get-projects" endpoint HTTP response body for the
// "InternalServerError" error.
type GetProjectsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetProjectsServiceUnavailableResponseBody is the type of the
// "project-service" service "get-projects" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type GetProjectsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateProjectBadRequestResponseBody is the type of the "project-service"
// service "create-project" endpoint HTTP response body for the "BadRequest"
// error.
type CreateProjectBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateProjectConflictResponseBody is the type of the "project-service"
// service "create-project" endpoint HTTP response body for the "Conflict"
// error.
type CreateProjectConflictResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateProjectInternalServerErrorResponseBody is the type of the
// "project-service" service "create-project" endpoint HTTP response body for
// the "InternalServerError" error.
type CreateProjectInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateProjectServiceUnavailableResponseBody is the type of the
// "project-service" service "create-project" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type CreateProjectServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetOneProjectInternalServerErrorResponseBody is the type of the
// "project-service" service "get-one-project" endpoint HTTP response body for
// the "InternalServerError" error.
type GetOneProjectInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetOneProjectNotFoundResponseBody is the type of the "project-service"
// service "get-one-project" endpoint HTTP response body for the "NotFound"
// error.
type GetOneProjectNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetOneProjectServiceUnavailableResponseBody is the type of the
// "project-service" service "get-one-project" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type GetOneProjectServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateProjectBadRequestResponseBody is the type of the "project-service"
// service "update-project" endpoint HTTP response body for the "BadRequest"
// error.
type UpdateProjectBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateProjectInternalServerErrorResponseBody is the type of the
// "project-service" service "update-project" endpoint HTTP response body for
// the "InternalServerError" error.
type UpdateProjectInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateProjectNotFoundResponseBody is the type of the "project-service"
// service "update-project" endpoint HTTP response body for the "NotFound"
// error.
type UpdateProjectNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateProjectServiceUnavailableResponseBody is the type of the
// "project-service" service "update-project" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type UpdateProjectServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteProjectBadRequestResponseBody is the type of the "project-service"
// service "delete-project" endpoint HTTP response body for the "BadRequest"
// error.
type DeleteProjectBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteProjectInternalServerErrorResponseBody is the type of the
// "project-service" service "delete-project" endpoint HTTP response body for
// the "InternalServerError" error.
type DeleteProjectInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteProjectNotFoundResponseBody is the type of the "project-service"
// service "delete-project" endpoint HTTP response body for the "NotFound"
// error.
type DeleteProjectNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteProjectServiceUnavailableResponseBody is the type of the
// "project-service" service "delete-project" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type DeleteProjectServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ReadyzServiceUnavailableResponseBody is the type of the "project-service"
// service "readyz" endpoint HTTP response body for the "ServiceUnavailable"
// error.
type ReadyzServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	// Project ID -- v2 id, not related to v1 id directly
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// A list of project managers by their user IDs
	Managers []string `form:"managers,omitempty" json:"managers,omitempty" xml:"managers,omitempty"`
}

// NewCreateProjectRequestBody builds the HTTP request body from the payload of
// the "create-project" endpoint of the "project-service" service.
func NewCreateProjectRequestBody(p *projectservice.CreateProjectPayload) *CreateProjectRequestBody {
	body := &CreateProjectRequestBody{
		Slug:        p.Slug,
		Description: p.Description,
		Name:        p.Name,
	}
	if p.Managers != nil {
		body.Managers = make([]string, len(p.Managers))
		for i, val := range p.Managers {
			body.Managers[i] = val
		}
	} else {
		body.Managers = []string{}
	}
	return body
}

// NewGetProjectsResultOK builds a "project-service" service "get-projects"
// endpoint result from a HTTP "OK" response.
func NewGetProjectsResultOK(body *GetProjectsResponseBody, cacheControl *string) *projectservice.GetProjectsResult {
	v := &projectservice.GetProjectsResult{}
	v.Projects = make([]*projectservice.Project, len(body.Projects))
	for i, val := range body.Projects {
		v.Projects[i] = unmarshalProjectResponseBodyToProjectserviceProject(val)
	}
	v.CacheControl = cacheControl

	return v
}

// NewGetProjectsBadRequest builds a project-service service get-projects
// endpoint BadRequest error.
func NewGetProjectsBadRequest(body *GetProjectsBadRequestResponseBody) *projectservice.BadRequestError {
	v := &projectservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetProjectsInternalServerError builds a project-service service
// get-projects endpoint InternalServerError error.
func NewGetProjectsInternalServerError(body *GetProjectsInternalServerErrorResponseBody) *projectservice.InternalServerError {
	v := &projectservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetProjectsServiceUnavailable builds a project-service service
// get-projects endpoint ServiceUnavailable error.
func NewGetProjectsServiceUnavailable(body *GetProjectsServiceUnavailableResponseBody) *projectservice.ServiceUnavailableError {
	v := &projectservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateProjectProjectOK builds a "project-service" service
// "create-project" endpoint result from a HTTP "OK" response.
func NewCreateProjectProjectOK(body *CreateProjectResponseBody) *projectservice.Project {
	v := &projectservice.Project{
		ID:          body.ID,
		Slug:        body.Slug,
		Description: body.Description,
		Name:        body.Name,
	}
	if body.Managers != nil {
		v.Managers = make([]string, len(body.Managers))
		for i, val := range body.Managers {
			v.Managers[i] = val
		}
	}

	return v
}

// NewCreateProjectBadRequest builds a project-service service create-project
// endpoint BadRequest error.
func NewCreateProjectBadRequest(body *CreateProjectBadRequestResponseBody) *projectservice.BadRequestError {
	v := &projectservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateProjectConflict builds a project-service service create-project
// endpoint Conflict error.
func NewCreateProjectConflict(body *CreateProjectConflictResponseBody) *projectservice.ConflictError {
	v := &projectservice.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateProjectInternalServerError builds a project-service service
// create-project endpoint InternalServerError error.
func NewCreateProjectInternalServerError(body *CreateProjectInternalServerErrorResponseBody) *projectservice.InternalServerError {
	v := &projectservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateProjectServiceUnavailable builds a project-service service
// create-project endpoint ServiceUnavailable error.
func NewCreateProjectServiceUnavailable(body *CreateProjectServiceUnavailableResponseBody) *projectservice.ServiceUnavailableError {
	v := &projectservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetOneProjectResultOK builds a "project-service" service
// "get-one-project" endpoint result from a HTTP "OK" response.
func NewGetOneProjectResultOK(body *GetOneProjectResponseBody, etag *string) *projectservice.GetOneProjectResult {
	v := &projectservice.Project{
		ID:          body.ID,
		Slug:        body.Slug,
		Description: body.Description,
		Name:        body.Name,
	}
	if body.Managers != nil {
		v.Managers = make([]string, len(body.Managers))
		for i, val := range body.Managers {
			v.Managers[i] = val
		}
	}
	res := &projectservice.GetOneProjectResult{
		Project: v,
	}
	res.Etag = etag

	return res
}

// NewGetOneProjectInternalServerError builds a project-service service
// get-one-project endpoint InternalServerError error.
func NewGetOneProjectInternalServerError(body *GetOneProjectInternalServerErrorResponseBody) *projectservice.InternalServerError {
	v := &projectservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetOneProjectNotFound builds a project-service service get-one-project
// endpoint NotFound error.
func NewGetOneProjectNotFound(body *GetOneProjectNotFoundResponseBody) *projectservice.NotFoundError {
	v := &projectservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetOneProjectServiceUnavailable builds a project-service service
// get-one-project endpoint ServiceUnavailable error.
func NewGetOneProjectServiceUnavailable(body *GetOneProjectServiceUnavailableResponseBody) *projectservice.ServiceUnavailableError {
	v := &projectservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateProjectProjectOK builds a "project-service" service
// "update-project" endpoint result from a HTTP "OK" response.
func NewUpdateProjectProjectOK(body *UpdateProjectResponseBody) *projectservice.Project {
	v := &projectservice.Project{
		ID:          body.ID,
		Slug:        body.Slug,
		Description: body.Description,
		Name:        body.Name,
	}
	if body.Managers != nil {
		v.Managers = make([]string, len(body.Managers))
		for i, val := range body.Managers {
			v.Managers[i] = val
		}
	}

	return v
}

// NewUpdateProjectBadRequest builds a project-service service update-project
// endpoint BadRequest error.
func NewUpdateProjectBadRequest(body *UpdateProjectBadRequestResponseBody) *projectservice.BadRequestError {
	v := &projectservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateProjectInternalServerError builds a project-service service
// update-project endpoint InternalServerError error.
func NewUpdateProjectInternalServerError(body *UpdateProjectInternalServerErrorResponseBody) *projectservice.InternalServerError {
	v := &projectservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateProjectNotFound builds a project-service service update-project
// endpoint NotFound error.
func NewUpdateProjectNotFound(body *UpdateProjectNotFoundResponseBody) *projectservice.NotFoundError {
	v := &projectservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateProjectServiceUnavailable builds a project-service service
// update-project endpoint ServiceUnavailable error.
func NewUpdateProjectServiceUnavailable(body *UpdateProjectServiceUnavailableResponseBody) *projectservice.ServiceUnavailableError {
	v := &projectservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteProjectBadRequest builds a project-service service delete-project
// endpoint BadRequest error.
func NewDeleteProjectBadRequest(body *DeleteProjectBadRequestResponseBody) *projectservice.BadRequestError {
	v := &projectservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteProjectInternalServerError builds a project-service service
// delete-project endpoint InternalServerError error.
func NewDeleteProjectInternalServerError(body *DeleteProjectInternalServerErrorResponseBody) *projectservice.InternalServerError {
	v := &projectservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteProjectNotFound builds a project-service service delete-project
// endpoint NotFound error.
func NewDeleteProjectNotFound(body *DeleteProjectNotFoundResponseBody) *projectservice.NotFoundError {
	v := &projectservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteProjectServiceUnavailable builds a project-service service
// delete-project endpoint ServiceUnavailable error.
func NewDeleteProjectServiceUnavailable(body *DeleteProjectServiceUnavailableResponseBody) *projectservice.ServiceUnavailableError {
	v := &projectservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewReadyzServiceUnavailable builds a project-service service readyz endpoint
// ServiceUnavailable error.
func NewReadyzServiceUnavailable(body *ReadyzServiceUnavailableResponseBody) *projectservice.ServiceUnavailableError {
	v := &projectservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// ValidateGetProjectsResponseBody runs the validations defined on
// Get-ProjectsResponseBody
func ValidateGetProjectsResponseBody(body *GetProjectsResponseBody) (err error) {
	if body.Projects == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("projects", "body"))
	}
	for _, e := range body.Projects {
		if e != nil {
			if err2 := ValidateProjectResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateProjectResponseBody runs the validations defined on
// Create-ProjectResponseBody
func ValidateCreateProjectResponseBody(body *CreateProjectResponseBody) (err error) {
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", *body.Slug, goa.FormatRegexp))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	return
}

// ValidateGetOneProjectResponseBody runs the validations defined on
// Get-One-ProjectResponseBody
func ValidateGetOneProjectResponseBody(body *GetOneProjectResponseBody) (err error) {
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", *body.Slug, goa.FormatRegexp))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	return
}

// ValidateUpdateProjectResponseBody runs the validations defined on
// Update-ProjectResponseBody
func ValidateUpdateProjectResponseBody(body *UpdateProjectResponseBody) (err error) {
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", *body.Slug, goa.FormatRegexp))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	return
}

// ValidateGetProjectsBadRequestResponseBody runs the validations defined on
// get-projects_BadRequest_response_body
func ValidateGetProjectsBadRequestResponseBody(body *GetProjectsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetProjectsInternalServerErrorResponseBody runs the validations
// defined on get-projects_InternalServerError_response_body
func ValidateGetProjectsInternalServerErrorResponseBody(body *GetProjectsInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetProjectsServiceUnavailableResponseBody runs the validations
// defined on get-projects_ServiceUnavailable_response_body
func ValidateGetProjectsServiceUnavailableResponseBody(body *GetProjectsServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateProjectBadRequestResponseBody runs the validations defined on
// create-project_BadRequest_response_body
func ValidateCreateProjectBadRequestResponseBody(body *CreateProjectBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateProjectConflictResponseBody runs the validations defined on
// create-project_Conflict_response_body
func ValidateCreateProjectConflictResponseBody(body *CreateProjectConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateProjectInternalServerErrorResponseBody runs the validations
// defined on create-project_InternalServerError_response_body
func ValidateCreateProjectInternalServerErrorResponseBody(body *CreateProjectInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateProjectServiceUnavailableResponseBody runs the validations
// defined on create-project_ServiceUnavailable_response_body
func ValidateCreateProjectServiceUnavailableResponseBody(body *CreateProjectServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOneProjectInternalServerErrorResponseBody runs the validations
// defined on get-one-project_InternalServerError_response_body
func ValidateGetOneProjectInternalServerErrorResponseBody(body *GetOneProjectInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOneProjectNotFoundResponseBody runs the validations defined on
// get-one-project_NotFound_response_body
func ValidateGetOneProjectNotFoundResponseBody(body *GetOneProjectNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOneProjectServiceUnavailableResponseBody runs the validations
// defined on get-one-project_ServiceUnavailable_response_body
func ValidateGetOneProjectServiceUnavailableResponseBody(body *GetOneProjectServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateProjectBadRequestResponseBody runs the validations defined on
// update-project_BadRequest_response_body
func ValidateUpdateProjectBadRequestResponseBody(body *UpdateProjectBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateProjectInternalServerErrorResponseBody runs the validations
// defined on update-project_InternalServerError_response_body
func ValidateUpdateProjectInternalServerErrorResponseBody(body *UpdateProjectInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateProjectNotFoundResponseBody runs the validations defined on
// update-project_NotFound_response_body
func ValidateUpdateProjectNotFoundResponseBody(body *UpdateProjectNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateProjectServiceUnavailableResponseBody runs the validations
// defined on update-project_ServiceUnavailable_response_body
func ValidateUpdateProjectServiceUnavailableResponseBody(body *UpdateProjectServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteProjectBadRequestResponseBody runs the validations defined on
// delete-project_BadRequest_response_body
func ValidateDeleteProjectBadRequestResponseBody(body *DeleteProjectBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteProjectInternalServerErrorResponseBody runs the validations
// defined on delete-project_InternalServerError_response_body
func ValidateDeleteProjectInternalServerErrorResponseBody(body *DeleteProjectInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteProjectNotFoundResponseBody runs the validations defined on
// delete-project_NotFound_response_body
func ValidateDeleteProjectNotFoundResponseBody(body *DeleteProjectNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteProjectServiceUnavailableResponseBody runs the validations
// defined on delete-project_ServiceUnavailable_response_body
func ValidateDeleteProjectServiceUnavailableResponseBody(body *DeleteProjectServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReadyzServiceUnavailableResponseBody runs the validations defined on
// readyz_ServiceUnavailable_response_body
func ValidateReadyzServiceUnavailableResponseBody(body *ReadyzServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateProjectResponseBody runs the validations defined on
// ProjectResponseBody
func ValidateProjectResponseBody(body *ProjectResponseBody) (err error) {
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", *body.Slug, goa.FormatRegexp))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	return
}
