// Code generated by goa v3.21.1, DO NOT EDIT.
//
// project-service HTTP client types
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/design

package client

import (
	projectservice "github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/gen/project_service"
	goa "goa.design/goa/v3/pkg"
)

// CreateProjectRequestBody is the type of the "project-service" service
// "create-project" endpoint HTTP request body.
type CreateProjectRequestBody struct {
	// Project slug, a short slugified name of the project
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// A description of the project
	Description string `form:"description" json:"description" xml:"description"`
	// The pretty name of the project
	Name string `form:"name" json:"name" xml:"name"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The stage of the project
	Stage *string `form:"stage,omitempty" json:"stage,omitempty" xml:"stage,omitempty"`
	// The category of the project
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// A list of funding models for the project
	FundingModel []string `form:"funding_model,omitempty" json:"funding_model,omitempty" xml:"funding_model,omitempty"`
	// The URL of the project charter document
	CharterURL *string `form:"charter_url,omitempty" json:"charter_url,omitempty" xml:"charter_url,omitempty"`
	// The legal entity type of the project
	LegalEntityType *string `form:"legal_entity_type,omitempty" json:"legal_entity_type,omitempty" xml:"legal_entity_type,omitempty"`
	// The legal entity name of the project
	LegalEntityName *string `form:"legal_entity_name,omitempty" json:"legal_entity_name,omitempty" xml:"legal_entity_name,omitempty"`
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string `form:"legal_parent_uid,omitempty" json:"legal_parent_uid,omitempty" xml:"legal_parent_uid,omitempty"`
	// The date the project entity was dissolved
	EntityDissolutionDate *string `form:"entity_dissolution_date,omitempty" json:"entity_dissolution_date,omitempty" xml:"entity_dissolution_date,omitempty"`
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string `form:"entity_formation_document_url,omitempty" json:"entity_formation_document_url,omitempty" xml:"entity_formation_document_url,omitempty"`
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool `form:"autojoin_enabled,omitempty" json:"autojoin_enabled,omitempty" xml:"autojoin_enabled,omitempty"`
	// The date the project was formed
	FormationDate *string `form:"formation_date,omitempty" json:"formation_date,omitempty" xml:"formation_date,omitempty"`
	// The URL of the project logo
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// The URL of the project repository
	RepositoryURL *string `form:"repository_url,omitempty" json:"repository_url,omitempty" xml:"repository_url,omitempty"`
	// The URL of the project website
	WebsiteURL *string `form:"website_url,omitempty" json:"website_url,omitempty" xml:"website_url,omitempty"`
	// The date the project was announced
	AnnouncementDate *string `form:"announcement_date,omitempty" json:"announcement_date,omitempty" xml:"announcement_date,omitempty"`
	// The mission statement of the project
	MissionStatement *string `form:"mission_statement,omitempty" json:"mission_statement,omitempty" xml:"mission_statement,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// UpdateProjectBaseRequestBody is the type of the "project-service" service
// "update-project-base" endpoint HTTP request body.
type UpdateProjectBaseRequestBody struct {
	// Project slug, a short slugified name of the project
	Slug string `form:"slug" json:"slug" xml:"slug"`
	// A description of the project
	Description string `form:"description" json:"description" xml:"description"`
	// The pretty name of the project
	Name string `form:"name" json:"name" xml:"name"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The stage of the project
	Stage *string `form:"stage,omitempty" json:"stage,omitempty" xml:"stage,omitempty"`
	// The category of the project
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// A list of funding models for the project
	FundingModel []string `form:"funding_model,omitempty" json:"funding_model,omitempty" xml:"funding_model,omitempty"`
	// The URL of the project charter document
	CharterURL *string `form:"charter_url,omitempty" json:"charter_url,omitempty" xml:"charter_url,omitempty"`
	// The legal entity type of the project
	LegalEntityType *string `form:"legal_entity_type,omitempty" json:"legal_entity_type,omitempty" xml:"legal_entity_type,omitempty"`
	// The legal entity name of the project
	LegalEntityName *string `form:"legal_entity_name,omitempty" json:"legal_entity_name,omitempty" xml:"legal_entity_name,omitempty"`
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string `form:"legal_parent_uid,omitempty" json:"legal_parent_uid,omitempty" xml:"legal_parent_uid,omitempty"`
	// The date the project entity was dissolved
	EntityDissolutionDate *string `form:"entity_dissolution_date,omitempty" json:"entity_dissolution_date,omitempty" xml:"entity_dissolution_date,omitempty"`
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string `form:"entity_formation_document_url,omitempty" json:"entity_formation_document_url,omitempty" xml:"entity_formation_document_url,omitempty"`
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool `form:"autojoin_enabled,omitempty" json:"autojoin_enabled,omitempty" xml:"autojoin_enabled,omitempty"`
	// The date the project was formed
	FormationDate *string `form:"formation_date,omitempty" json:"formation_date,omitempty" xml:"formation_date,omitempty"`
	// The URL of the project logo
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// The URL of the project repository
	RepositoryURL *string `form:"repository_url,omitempty" json:"repository_url,omitempty" xml:"repository_url,omitempty"`
	// The URL of the project website
	WebsiteURL *string `form:"website_url,omitempty" json:"website_url,omitempty" xml:"website_url,omitempty"`
}

// UpdateProjectSettingsRequestBody is the type of the "project-service"
// service "update-project-settings" endpoint HTTP request body.
type UpdateProjectSettingsRequestBody struct {
	// The mission statement of the project
	MissionStatement *string `form:"mission_statement,omitempty" json:"mission_statement,omitempty" xml:"mission_statement,omitempty"`
	// The date the project was announced
	AnnouncementDate *string `form:"announcement_date,omitempty" json:"announcement_date,omitempty" xml:"announcement_date,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// GetProjectsResponseBody is the type of the "project-service" service
// "get-projects" endpoint HTTP response body.
type GetProjectsResponseBody struct {
	// Resources found
	Projects []*ProjectFullResponseBody `form:"projects,omitempty" json:"projects,omitempty" xml:"projects,omitempty"`
}

// CreateProjectResponseBody is the type of the "project-service" service
// "create-project" endpoint HTTP response body.
type CreateProjectResponseBody struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The stage of the project
	Stage *string `form:"stage,omitempty" json:"stage,omitempty" xml:"stage,omitempty"`
	// The category of the project
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// A list of funding models for the project
	FundingModel []string `form:"funding_model,omitempty" json:"funding_model,omitempty" xml:"funding_model,omitempty"`
	// The URL of the project charter document
	CharterURL *string `form:"charter_url,omitempty" json:"charter_url,omitempty" xml:"charter_url,omitempty"`
	// The legal entity type of the project
	LegalEntityType *string `form:"legal_entity_type,omitempty" json:"legal_entity_type,omitempty" xml:"legal_entity_type,omitempty"`
	// The legal entity name of the project
	LegalEntityName *string `form:"legal_entity_name,omitempty" json:"legal_entity_name,omitempty" xml:"legal_entity_name,omitempty"`
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string `form:"legal_parent_uid,omitempty" json:"legal_parent_uid,omitempty" xml:"legal_parent_uid,omitempty"`
	// The date the project entity was dissolved
	EntityDissolutionDate *string `form:"entity_dissolution_date,omitempty" json:"entity_dissolution_date,omitempty" xml:"entity_dissolution_date,omitempty"`
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string `form:"entity_formation_document_url,omitempty" json:"entity_formation_document_url,omitempty" xml:"entity_formation_document_url,omitempty"`
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool `form:"autojoin_enabled,omitempty" json:"autojoin_enabled,omitempty" xml:"autojoin_enabled,omitempty"`
	// The date the project was formed
	FormationDate *string `form:"formation_date,omitempty" json:"formation_date,omitempty" xml:"formation_date,omitempty"`
	// The URL of the project logo
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// The URL of the project repository
	RepositoryURL *string `form:"repository_url,omitempty" json:"repository_url,omitempty" xml:"repository_url,omitempty"`
	// The URL of the project website
	WebsiteURL *string `form:"website_url,omitempty" json:"website_url,omitempty" xml:"website_url,omitempty"`
	// The date and time the project was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the project was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The mission statement of the project
	MissionStatement *string `form:"mission_statement,omitempty" json:"mission_statement,omitempty" xml:"mission_statement,omitempty"`
	// The date the project was announced
	AnnouncementDate *string `form:"announcement_date,omitempty" json:"announcement_date,omitempty" xml:"announcement_date,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// GetOneProjectBaseResponseBody is the type of the "project-service" service
// "get-one-project-base" endpoint HTTP response body.
type GetOneProjectBaseResponseBody ProjectBaseResponseBody

// GetOneProjectSettingsResponseBody is the type of the "project-service"
// service "get-one-project-settings" endpoint HTTP response body.
type GetOneProjectSettingsResponseBody ProjectSettingsResponseBody

// UpdateProjectBaseResponseBody is the type of the "project-service" service
// "update-project-base" endpoint HTTP response body.
type UpdateProjectBaseResponseBody struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The stage of the project
	Stage *string `form:"stage,omitempty" json:"stage,omitempty" xml:"stage,omitempty"`
	// The category of the project
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// A list of funding models for the project
	FundingModel []string `form:"funding_model,omitempty" json:"funding_model,omitempty" xml:"funding_model,omitempty"`
	// The URL of the project charter document
	CharterURL *string `form:"charter_url,omitempty" json:"charter_url,omitempty" xml:"charter_url,omitempty"`
	// The legal entity type of the project
	LegalEntityType *string `form:"legal_entity_type,omitempty" json:"legal_entity_type,omitempty" xml:"legal_entity_type,omitempty"`
	// The legal entity name of the project
	LegalEntityName *string `form:"legal_entity_name,omitempty" json:"legal_entity_name,omitempty" xml:"legal_entity_name,omitempty"`
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string `form:"legal_parent_uid,omitempty" json:"legal_parent_uid,omitempty" xml:"legal_parent_uid,omitempty"`
	// The date the project entity was dissolved
	EntityDissolutionDate *string `form:"entity_dissolution_date,omitempty" json:"entity_dissolution_date,omitempty" xml:"entity_dissolution_date,omitempty"`
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string `form:"entity_formation_document_url,omitempty" json:"entity_formation_document_url,omitempty" xml:"entity_formation_document_url,omitempty"`
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool `form:"autojoin_enabled,omitempty" json:"autojoin_enabled,omitempty" xml:"autojoin_enabled,omitempty"`
	// The date the project was formed
	FormationDate *string `form:"formation_date,omitempty" json:"formation_date,omitempty" xml:"formation_date,omitempty"`
	// The URL of the project logo
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// The URL of the project repository
	RepositoryURL *string `form:"repository_url,omitempty" json:"repository_url,omitempty" xml:"repository_url,omitempty"`
	// The URL of the project website
	WebsiteURL *string `form:"website_url,omitempty" json:"website_url,omitempty" xml:"website_url,omitempty"`
}

// UpdateProjectSettingsResponseBody is the type of the "project-service"
// service "update-project-settings" endpoint HTTP response body.
type UpdateProjectSettingsResponseBody struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The date and time the project was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the project was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The mission statement of the project
	MissionStatement *string `form:"mission_statement,omitempty" json:"mission_statement,omitempty" xml:"mission_statement,omitempty"`
	// The date the project was announced
	AnnouncementDate *string `form:"announcement_date,omitempty" json:"announcement_date,omitempty" xml:"announcement_date,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// GetProjectsBadRequestResponseBody is the type of the "project-service"
// service "get-projects" endpoint HTTP response body for the "BadRequest"
// error.
type GetProjectsBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetProjectsInternalServerErrorResponseBody is the type of the
// "project-service" service "get-projects" endpoint HTTP response body for the
// "InternalServerError" error.
type GetProjectsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetProjectsServiceUnavailableResponseBody is the type of the
// "project-service" service "get-projects" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type GetProjectsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateProjectBadRequestResponseBody is the type of the "project-service"
// service "create-project" endpoint HTTP response body for the "BadRequest"
// error.
type CreateProjectBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateProjectConflictResponseBody is the type of the "project-service"
// service "create-project" endpoint HTTP response body for the "Conflict"
// error.
type CreateProjectConflictResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateProjectInternalServerErrorResponseBody is the type of the
// "project-service" service "create-project" endpoint HTTP response body for
// the "InternalServerError" error.
type CreateProjectInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateProjectServiceUnavailableResponseBody is the type of the
// "project-service" service "create-project" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type CreateProjectServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetOneProjectBaseInternalServerErrorResponseBody is the type of the
// "project-service" service "get-one-project-base" endpoint HTTP response body
// for the "InternalServerError" error.
type GetOneProjectBaseInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetOneProjectBaseNotFoundResponseBody is the type of the "project-service"
// service "get-one-project-base" endpoint HTTP response body for the
// "NotFound" error.
type GetOneProjectBaseNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetOneProjectBaseServiceUnavailableResponseBody is the type of the
// "project-service" service "get-one-project-base" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type GetOneProjectBaseServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetOneProjectSettingsInternalServerErrorResponseBody is the type of the
// "project-service" service "get-one-project-settings" endpoint HTTP response
// body for the "InternalServerError" error.
type GetOneProjectSettingsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetOneProjectSettingsNotFoundResponseBody is the type of the
// "project-service" service "get-one-project-settings" endpoint HTTP response
// body for the "NotFound" error.
type GetOneProjectSettingsNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetOneProjectSettingsServiceUnavailableResponseBody is the type of the
// "project-service" service "get-one-project-settings" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type GetOneProjectSettingsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateProjectBaseBadRequestResponseBody is the type of the "project-service"
// service "update-project-base" endpoint HTTP response body for the
// "BadRequest" error.
type UpdateProjectBaseBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateProjectBaseConflictResponseBody is the type of the "project-service"
// service "update-project-base" endpoint HTTP response body for the "Conflict"
// error.
type UpdateProjectBaseConflictResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateProjectBaseInternalServerErrorResponseBody is the type of the
// "project-service" service "update-project-base" endpoint HTTP response body
// for the "InternalServerError" error.
type UpdateProjectBaseInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateProjectBaseNotFoundResponseBody is the type of the "project-service"
// service "update-project-base" endpoint HTTP response body for the "NotFound"
// error.
type UpdateProjectBaseNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateProjectBaseServiceUnavailableResponseBody is the type of the
// "project-service" service "update-project-base" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type UpdateProjectBaseServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateProjectSettingsBadRequestResponseBody is the type of the
// "project-service" service "update-project-settings" endpoint HTTP response
// body for the "BadRequest" error.
type UpdateProjectSettingsBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateProjectSettingsInternalServerErrorResponseBody is the type of the
// "project-service" service "update-project-settings" endpoint HTTP response
// body for the "InternalServerError" error.
type UpdateProjectSettingsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateProjectSettingsNotFoundResponseBody is the type of the
// "project-service" service "update-project-settings" endpoint HTTP response
// body for the "NotFound" error.
type UpdateProjectSettingsNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateProjectSettingsServiceUnavailableResponseBody is the type of the
// "project-service" service "update-project-settings" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type UpdateProjectSettingsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteProjectBadRequestResponseBody is the type of the "project-service"
// service "delete-project" endpoint HTTP response body for the "BadRequest"
// error.
type DeleteProjectBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteProjectInternalServerErrorResponseBody is the type of the
// "project-service" service "delete-project" endpoint HTTP response body for
// the "InternalServerError" error.
type DeleteProjectInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteProjectNotFoundResponseBody is the type of the "project-service"
// service "delete-project" endpoint HTTP response body for the "NotFound"
// error.
type DeleteProjectNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteProjectServiceUnavailableResponseBody is the type of the
// "project-service" service "delete-project" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type DeleteProjectServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ReadyzServiceUnavailableResponseBody is the type of the "project-service"
// service "readyz" endpoint HTTP response body for the "ServiceUnavailable"
// error.
type ReadyzServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ProjectFullResponseBody is used to define fields on response body types.
type ProjectFullResponseBody struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The stage of the project
	Stage *string `form:"stage,omitempty" json:"stage,omitempty" xml:"stage,omitempty"`
	// The category of the project
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// A list of funding models for the project
	FundingModel []string `form:"funding_model,omitempty" json:"funding_model,omitempty" xml:"funding_model,omitempty"`
	// The URL of the project charter document
	CharterURL *string `form:"charter_url,omitempty" json:"charter_url,omitempty" xml:"charter_url,omitempty"`
	// The legal entity type of the project
	LegalEntityType *string `form:"legal_entity_type,omitempty" json:"legal_entity_type,omitempty" xml:"legal_entity_type,omitempty"`
	// The legal entity name of the project
	LegalEntityName *string `form:"legal_entity_name,omitempty" json:"legal_entity_name,omitempty" xml:"legal_entity_name,omitempty"`
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string `form:"legal_parent_uid,omitempty" json:"legal_parent_uid,omitempty" xml:"legal_parent_uid,omitempty"`
	// The date the project entity was dissolved
	EntityDissolutionDate *string `form:"entity_dissolution_date,omitempty" json:"entity_dissolution_date,omitempty" xml:"entity_dissolution_date,omitempty"`
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string `form:"entity_formation_document_url,omitempty" json:"entity_formation_document_url,omitempty" xml:"entity_formation_document_url,omitempty"`
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool `form:"autojoin_enabled,omitempty" json:"autojoin_enabled,omitempty" xml:"autojoin_enabled,omitempty"`
	// The date the project was formed
	FormationDate *string `form:"formation_date,omitempty" json:"formation_date,omitempty" xml:"formation_date,omitempty"`
	// The URL of the project logo
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// The URL of the project repository
	RepositoryURL *string `form:"repository_url,omitempty" json:"repository_url,omitempty" xml:"repository_url,omitempty"`
	// The URL of the project website
	WebsiteURL *string `form:"website_url,omitempty" json:"website_url,omitempty" xml:"website_url,omitempty"`
	// The date and time the project was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the project was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The mission statement of the project
	MissionStatement *string `form:"mission_statement,omitempty" json:"mission_statement,omitempty" xml:"mission_statement,omitempty"`
	// The date the project was announced
	AnnouncementDate *string `form:"announcement_date,omitempty" json:"announcement_date,omitempty" xml:"announcement_date,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// ProjectBaseResponseBody is used to define fields on response body types.
type ProjectBaseResponseBody struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The stage of the project
	Stage *string `form:"stage,omitempty" json:"stage,omitempty" xml:"stage,omitempty"`
	// The category of the project
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// A list of funding models for the project
	FundingModel []string `form:"funding_model,omitempty" json:"funding_model,omitempty" xml:"funding_model,omitempty"`
	// The URL of the project charter document
	CharterURL *string `form:"charter_url,omitempty" json:"charter_url,omitempty" xml:"charter_url,omitempty"`
	// The legal entity type of the project
	LegalEntityType *string `form:"legal_entity_type,omitempty" json:"legal_entity_type,omitempty" xml:"legal_entity_type,omitempty"`
	// The legal entity name of the project
	LegalEntityName *string `form:"legal_entity_name,omitempty" json:"legal_entity_name,omitempty" xml:"legal_entity_name,omitempty"`
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string `form:"legal_parent_uid,omitempty" json:"legal_parent_uid,omitempty" xml:"legal_parent_uid,omitempty"`
	// The date the project entity was dissolved
	EntityDissolutionDate *string `form:"entity_dissolution_date,omitempty" json:"entity_dissolution_date,omitempty" xml:"entity_dissolution_date,omitempty"`
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string `form:"entity_formation_document_url,omitempty" json:"entity_formation_document_url,omitempty" xml:"entity_formation_document_url,omitempty"`
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool `form:"autojoin_enabled,omitempty" json:"autojoin_enabled,omitempty" xml:"autojoin_enabled,omitempty"`
	// The date the project was formed
	FormationDate *string `form:"formation_date,omitempty" json:"formation_date,omitempty" xml:"formation_date,omitempty"`
	// The URL of the project logo
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// The URL of the project repository
	RepositoryURL *string `form:"repository_url,omitempty" json:"repository_url,omitempty" xml:"repository_url,omitempty"`
	// The URL of the project website
	WebsiteURL *string `form:"website_url,omitempty" json:"website_url,omitempty" xml:"website_url,omitempty"`
}

// ProjectSettingsResponseBody is used to define fields on response body types.
type ProjectSettingsResponseBody struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The date and time the project was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the project was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The mission statement of the project
	MissionStatement *string `form:"mission_statement,omitempty" json:"mission_statement,omitempty" xml:"mission_statement,omitempty"`
	// The date the project was announced
	AnnouncementDate *string `form:"announcement_date,omitempty" json:"announcement_date,omitempty" xml:"announcement_date,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// NewCreateProjectRequestBody builds the HTTP request body from the payload of
// the "create-project" endpoint of the "project-service" service.
func NewCreateProjectRequestBody(p *projectservice.CreateProjectPayload) *CreateProjectRequestBody {
	body := &CreateProjectRequestBody{
		Slug:                       p.Slug,
		Description:                p.Description,
		Name:                       p.Name,
		Public:                     p.Public,
		ParentUID:                  p.ParentUID,
		Stage:                      p.Stage,
		Category:                   p.Category,
		CharterURL:                 p.CharterURL,
		LegalEntityType:            p.LegalEntityType,
		LegalEntityName:            p.LegalEntityName,
		LegalParentUID:             p.LegalParentUID,
		EntityDissolutionDate:      p.EntityDissolutionDate,
		EntityFormationDocumentURL: p.EntityFormationDocumentURL,
		AutojoinEnabled:            p.AutojoinEnabled,
		FormationDate:              p.FormationDate,
		LogoURL:                    p.LogoURL,
		RepositoryURL:              p.RepositoryURL,
		WebsiteURL:                 p.WebsiteURL,
		AnnouncementDate:           p.AnnouncementDate,
		MissionStatement:           p.MissionStatement,
	}
	if p.FundingModel != nil {
		body.FundingModel = make([]string, len(p.FundingModel))
		for i, val := range p.FundingModel {
			body.FundingModel[i] = val
		}
	}
	if p.Writers != nil {
		body.Writers = make([]string, len(p.Writers))
		for i, val := range p.Writers {
			body.Writers[i] = val
		}
	}
	if p.Auditors != nil {
		body.Auditors = make([]string, len(p.Auditors))
		for i, val := range p.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewUpdateProjectBaseRequestBody builds the HTTP request body from the
// payload of the "update-project-base" endpoint of the "project-service"
// service.
func NewUpdateProjectBaseRequestBody(p *projectservice.UpdateProjectBasePayload) *UpdateProjectBaseRequestBody {
	body := &UpdateProjectBaseRequestBody{
		Slug:                       p.Slug,
		Description:                p.Description,
		Name:                       p.Name,
		Public:                     p.Public,
		ParentUID:                  p.ParentUID,
		Stage:                      p.Stage,
		Category:                   p.Category,
		CharterURL:                 p.CharterURL,
		LegalEntityType:            p.LegalEntityType,
		LegalEntityName:            p.LegalEntityName,
		LegalParentUID:             p.LegalParentUID,
		EntityDissolutionDate:      p.EntityDissolutionDate,
		EntityFormationDocumentURL: p.EntityFormationDocumentURL,
		AutojoinEnabled:            p.AutojoinEnabled,
		FormationDate:              p.FormationDate,
		LogoURL:                    p.LogoURL,
		RepositoryURL:              p.RepositoryURL,
		WebsiteURL:                 p.WebsiteURL,
	}
	if p.FundingModel != nil {
		body.FundingModel = make([]string, len(p.FundingModel))
		for i, val := range p.FundingModel {
			body.FundingModel[i] = val
		}
	}
	return body
}

// NewUpdateProjectSettingsRequestBody builds the HTTP request body from the
// payload of the "update-project-settings" endpoint of the "project-service"
// service.
func NewUpdateProjectSettingsRequestBody(p *projectservice.UpdateProjectSettingsPayload) *UpdateProjectSettingsRequestBody {
	body := &UpdateProjectSettingsRequestBody{
		MissionStatement: p.MissionStatement,
		AnnouncementDate: p.AnnouncementDate,
	}
	if p.Writers != nil {
		body.Writers = make([]string, len(p.Writers))
		for i, val := range p.Writers {
			body.Writers[i] = val
		}
	}
	if p.Auditors != nil {
		body.Auditors = make([]string, len(p.Auditors))
		for i, val := range p.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewGetProjectsResultOK builds a "project-service" service "get-projects"
// endpoint result from a HTTP "OK" response.
func NewGetProjectsResultOK(body *GetProjectsResponseBody, cacheControl *string) *projectservice.GetProjectsResult {
	v := &projectservice.GetProjectsResult{}
	v.Projects = make([]*projectservice.ProjectFull, len(body.Projects))
	for i, val := range body.Projects {
		v.Projects[i] = unmarshalProjectFullResponseBodyToProjectserviceProjectFull(val)
	}
	v.CacheControl = cacheControl

	return v
}

// NewGetProjectsBadRequest builds a project-service service get-projects
// endpoint BadRequest error.
func NewGetProjectsBadRequest(body *GetProjectsBadRequestResponseBody) *projectservice.BadRequestError {
	v := &projectservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetProjectsInternalServerError builds a project-service service
// get-projects endpoint InternalServerError error.
func NewGetProjectsInternalServerError(body *GetProjectsInternalServerErrorResponseBody) *projectservice.InternalServerError {
	v := &projectservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetProjectsServiceUnavailable builds a project-service service
// get-projects endpoint ServiceUnavailable error.
func NewGetProjectsServiceUnavailable(body *GetProjectsServiceUnavailableResponseBody) *projectservice.ServiceUnavailableError {
	v := &projectservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateProjectProjectFullCreated builds a "project-service" service
// "create-project" endpoint result from a HTTP "Created" response.
func NewCreateProjectProjectFullCreated(body *CreateProjectResponseBody) *projectservice.ProjectFull {
	v := &projectservice.ProjectFull{
		UID:                        body.UID,
		Slug:                       body.Slug,
		Description:                body.Description,
		Name:                       body.Name,
		Public:                     body.Public,
		ParentUID:                  body.ParentUID,
		Stage:                      body.Stage,
		Category:                   body.Category,
		CharterURL:                 body.CharterURL,
		LegalEntityType:            body.LegalEntityType,
		LegalEntityName:            body.LegalEntityName,
		LegalParentUID:             body.LegalParentUID,
		EntityDissolutionDate:      body.EntityDissolutionDate,
		EntityFormationDocumentURL: body.EntityFormationDocumentURL,
		AutojoinEnabled:            body.AutojoinEnabled,
		FormationDate:              body.FormationDate,
		LogoURL:                    body.LogoURL,
		RepositoryURL:              body.RepositoryURL,
		WebsiteURL:                 body.WebsiteURL,
		CreatedAt:                  body.CreatedAt,
		UpdatedAt:                  body.UpdatedAt,
		MissionStatement:           body.MissionStatement,
		AnnouncementDate:           body.AnnouncementDate,
	}
	if body.FundingModel != nil {
		v.FundingModel = make([]string, len(body.FundingModel))
		for i, val := range body.FundingModel {
			v.FundingModel[i] = val
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}

	return v
}

// NewCreateProjectBadRequest builds a project-service service create-project
// endpoint BadRequest error.
func NewCreateProjectBadRequest(body *CreateProjectBadRequestResponseBody) *projectservice.BadRequestError {
	v := &projectservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateProjectConflict builds a project-service service create-project
// endpoint Conflict error.
func NewCreateProjectConflict(body *CreateProjectConflictResponseBody) *projectservice.ConflictError {
	v := &projectservice.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateProjectInternalServerError builds a project-service service
// create-project endpoint InternalServerError error.
func NewCreateProjectInternalServerError(body *CreateProjectInternalServerErrorResponseBody) *projectservice.InternalServerError {
	v := &projectservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateProjectServiceUnavailable builds a project-service service
// create-project endpoint ServiceUnavailable error.
func NewCreateProjectServiceUnavailable(body *CreateProjectServiceUnavailableResponseBody) *projectservice.ServiceUnavailableError {
	v := &projectservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetOneProjectBaseResultOK builds a "project-service" service
// "get-one-project-base" endpoint result from a HTTP "OK" response.
func NewGetOneProjectBaseResultOK(body *GetOneProjectBaseResponseBody, etag *string) *projectservice.GetOneProjectBaseResult {
	v := &projectservice.ProjectBase{
		UID:                        body.UID,
		Slug:                       body.Slug,
		Description:                body.Description,
		Name:                       body.Name,
		Public:                     body.Public,
		ParentUID:                  body.ParentUID,
		Stage:                      body.Stage,
		Category:                   body.Category,
		CharterURL:                 body.CharterURL,
		LegalEntityType:            body.LegalEntityType,
		LegalEntityName:            body.LegalEntityName,
		LegalParentUID:             body.LegalParentUID,
		EntityDissolutionDate:      body.EntityDissolutionDate,
		EntityFormationDocumentURL: body.EntityFormationDocumentURL,
		AutojoinEnabled:            body.AutojoinEnabled,
		FormationDate:              body.FormationDate,
		LogoURL:                    body.LogoURL,
		RepositoryURL:              body.RepositoryURL,
		WebsiteURL:                 body.WebsiteURL,
	}
	if body.FundingModel != nil {
		v.FundingModel = make([]string, len(body.FundingModel))
		for i, val := range body.FundingModel {
			v.FundingModel[i] = val
		}
	}
	res := &projectservice.GetOneProjectBaseResult{
		Project: v,
	}
	res.Etag = etag

	return res
}

// NewGetOneProjectBaseInternalServerError builds a project-service service
// get-one-project-base endpoint InternalServerError error.
func NewGetOneProjectBaseInternalServerError(body *GetOneProjectBaseInternalServerErrorResponseBody) *projectservice.InternalServerError {
	v := &projectservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetOneProjectBaseNotFound builds a project-service service
// get-one-project-base endpoint NotFound error.
func NewGetOneProjectBaseNotFound(body *GetOneProjectBaseNotFoundResponseBody) *projectservice.NotFoundError {
	v := &projectservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetOneProjectBaseServiceUnavailable builds a project-service service
// get-one-project-base endpoint ServiceUnavailable error.
func NewGetOneProjectBaseServiceUnavailable(body *GetOneProjectBaseServiceUnavailableResponseBody) *projectservice.ServiceUnavailableError {
	v := &projectservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetOneProjectSettingsResultOK builds a "project-service" service
// "get-one-project-settings" endpoint result from a HTTP "OK" response.
func NewGetOneProjectSettingsResultOK(body *GetOneProjectSettingsResponseBody, etag *string) *projectservice.GetOneProjectSettingsResult {
	v := &projectservice.ProjectSettings{
		UID:              body.UID,
		CreatedAt:        body.CreatedAt,
		UpdatedAt:        body.UpdatedAt,
		MissionStatement: body.MissionStatement,
		AnnouncementDate: body.AnnouncementDate,
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	res := &projectservice.GetOneProjectSettingsResult{
		ProjectSettings: v,
	}
	res.Etag = etag

	return res
}

// NewGetOneProjectSettingsInternalServerError builds a project-service service
// get-one-project-settings endpoint InternalServerError error.
func NewGetOneProjectSettingsInternalServerError(body *GetOneProjectSettingsInternalServerErrorResponseBody) *projectservice.InternalServerError {
	v := &projectservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetOneProjectSettingsNotFound builds a project-service service
// get-one-project-settings endpoint NotFound error.
func NewGetOneProjectSettingsNotFound(body *GetOneProjectSettingsNotFoundResponseBody) *projectservice.NotFoundError {
	v := &projectservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetOneProjectSettingsServiceUnavailable builds a project-service service
// get-one-project-settings endpoint ServiceUnavailable error.
func NewGetOneProjectSettingsServiceUnavailable(body *GetOneProjectSettingsServiceUnavailableResponseBody) *projectservice.ServiceUnavailableError {
	v := &projectservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateProjectBaseProjectBaseOK builds a "project-service" service
// "update-project-base" endpoint result from a HTTP "OK" response.
func NewUpdateProjectBaseProjectBaseOK(body *UpdateProjectBaseResponseBody) *projectservice.ProjectBase {
	v := &projectservice.ProjectBase{
		UID:                        body.UID,
		Slug:                       body.Slug,
		Description:                body.Description,
		Name:                       body.Name,
		Public:                     body.Public,
		ParentUID:                  body.ParentUID,
		Stage:                      body.Stage,
		Category:                   body.Category,
		CharterURL:                 body.CharterURL,
		LegalEntityType:            body.LegalEntityType,
		LegalEntityName:            body.LegalEntityName,
		LegalParentUID:             body.LegalParentUID,
		EntityDissolutionDate:      body.EntityDissolutionDate,
		EntityFormationDocumentURL: body.EntityFormationDocumentURL,
		AutojoinEnabled:            body.AutojoinEnabled,
		FormationDate:              body.FormationDate,
		LogoURL:                    body.LogoURL,
		RepositoryURL:              body.RepositoryURL,
		WebsiteURL:                 body.WebsiteURL,
	}
	if body.FundingModel != nil {
		v.FundingModel = make([]string, len(body.FundingModel))
		for i, val := range body.FundingModel {
			v.FundingModel[i] = val
		}
	}

	return v
}

// NewUpdateProjectBaseBadRequest builds a project-service service
// update-project-base endpoint BadRequest error.
func NewUpdateProjectBaseBadRequest(body *UpdateProjectBaseBadRequestResponseBody) *projectservice.BadRequestError {
	v := &projectservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateProjectBaseConflict builds a project-service service
// update-project-base endpoint Conflict error.
func NewUpdateProjectBaseConflict(body *UpdateProjectBaseConflictResponseBody) *projectservice.ConflictError {
	v := &projectservice.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateProjectBaseInternalServerError builds a project-service service
// update-project-base endpoint InternalServerError error.
func NewUpdateProjectBaseInternalServerError(body *UpdateProjectBaseInternalServerErrorResponseBody) *projectservice.InternalServerError {
	v := &projectservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateProjectBaseNotFound builds a project-service service
// update-project-base endpoint NotFound error.
func NewUpdateProjectBaseNotFound(body *UpdateProjectBaseNotFoundResponseBody) *projectservice.NotFoundError {
	v := &projectservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateProjectBaseServiceUnavailable builds a project-service service
// update-project-base endpoint ServiceUnavailable error.
func NewUpdateProjectBaseServiceUnavailable(body *UpdateProjectBaseServiceUnavailableResponseBody) *projectservice.ServiceUnavailableError {
	v := &projectservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateProjectSettingsProjectSettingsOK builds a "project-service" service
// "update-project-settings" endpoint result from a HTTP "OK" response.
func NewUpdateProjectSettingsProjectSettingsOK(body *UpdateProjectSettingsResponseBody) *projectservice.ProjectSettings {
	v := &projectservice.ProjectSettings{
		UID:              body.UID,
		CreatedAt:        body.CreatedAt,
		UpdatedAt:        body.UpdatedAt,
		MissionStatement: body.MissionStatement,
		AnnouncementDate: body.AnnouncementDate,
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}

	return v
}

// NewUpdateProjectSettingsBadRequest builds a project-service service
// update-project-settings endpoint BadRequest error.
func NewUpdateProjectSettingsBadRequest(body *UpdateProjectSettingsBadRequestResponseBody) *projectservice.BadRequestError {
	v := &projectservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateProjectSettingsInternalServerError builds a project-service service
// update-project-settings endpoint InternalServerError error.
func NewUpdateProjectSettingsInternalServerError(body *UpdateProjectSettingsInternalServerErrorResponseBody) *projectservice.InternalServerError {
	v := &projectservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateProjectSettingsNotFound builds a project-service service
// update-project-settings endpoint NotFound error.
func NewUpdateProjectSettingsNotFound(body *UpdateProjectSettingsNotFoundResponseBody) *projectservice.NotFoundError {
	v := &projectservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateProjectSettingsServiceUnavailable builds a project-service service
// update-project-settings endpoint ServiceUnavailable error.
func NewUpdateProjectSettingsServiceUnavailable(body *UpdateProjectSettingsServiceUnavailableResponseBody) *projectservice.ServiceUnavailableError {
	v := &projectservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteProjectBadRequest builds a project-service service delete-project
// endpoint BadRequest error.
func NewDeleteProjectBadRequest(body *DeleteProjectBadRequestResponseBody) *projectservice.BadRequestError {
	v := &projectservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteProjectInternalServerError builds a project-service service
// delete-project endpoint InternalServerError error.
func NewDeleteProjectInternalServerError(body *DeleteProjectInternalServerErrorResponseBody) *projectservice.InternalServerError {
	v := &projectservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteProjectNotFound builds a project-service service delete-project
// endpoint NotFound error.
func NewDeleteProjectNotFound(body *DeleteProjectNotFoundResponseBody) *projectservice.NotFoundError {
	v := &projectservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteProjectServiceUnavailable builds a project-service service
// delete-project endpoint ServiceUnavailable error.
func NewDeleteProjectServiceUnavailable(body *DeleteProjectServiceUnavailableResponseBody) *projectservice.ServiceUnavailableError {
	v := &projectservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewReadyzServiceUnavailable builds a project-service service readyz endpoint
// ServiceUnavailable error.
func NewReadyzServiceUnavailable(body *ReadyzServiceUnavailableResponseBody) *projectservice.ServiceUnavailableError {
	v := &projectservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// ValidateGetProjectsResponseBody runs the validations defined on
// Get-ProjectsResponseBody
func ValidateGetProjectsResponseBody(body *GetProjectsResponseBody) (err error) {
	if body.Projects == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("projects", "body"))
	}
	for _, e := range body.Projects {
		if e != nil {
			if err2 := ValidateProjectFullResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateProjectResponseBody runs the validations defined on
// Create-ProjectResponseBody
func ValidateCreateProjectResponseBody(body *CreateProjectResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", *body.Slug, goa.FormatRegexp))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.Stage != nil {
		if !(*body.Stage == "Formation - Exploratory" || *body.Stage == "Formation - Engaged" || *body.Stage == "Active" || *body.Stage == "Archived" || *body.Stage == "Formation - On Hold" || *body.Stage == "Formation - Disengaged" || *body.Stage == "Formation - Confidential" || *body.Stage == "Prospect") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.stage", *body.Stage, []any{"Formation - Exploratory", "Formation - Engaged", "Active", "Archived", "Formation - On Hold", "Formation - Disengaged", "Formation - Confidential", "Prospect"}))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Active" || *body.Category == "Adopted" || *body.Category == "Archived" || *body.Category == "At-Large" || *body.Category == "Early Adoption" || *body.Category == "Emeritus" || *body.Category == "Graduated" || *body.Category == "Growth" || *body.Category == "Idle" || *body.Category == "Impact" || *body.Category == "Incubating" || *body.Category == "Kanister" || *body.Category == "Mature" || *body.Category == "Pre-LFESS" || *body.Category == "Sandbox" || *body.Category == "SIG" || *body.Category == "Standards" || *body.Category == "TAC" || *body.Category == "Working Group" || *body.Category == "TAG" || *body.Category == "NONE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Active", "Adopted", "Archived", "At-Large", "Early Adoption", "Emeritus", "Graduated", "Growth", "Idle", "Impact", "Incubating", "Kanister", "Mature", "Pre-LFESS", "Sandbox", "SIG", "Standards", "TAC", "Working Group", "TAG", "NONE"}))
		}
	}
	for _, e := range body.FundingModel {
		if !(e == "Crowdfunding" || e == "Membership" || e == "Alternate Funding") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.funding_model[*]", e, []any{"Crowdfunding", "Membership", "Alternate Funding"}))
		}
	}
	if body.CharterURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.charter_url", *body.CharterURL, goa.FormatURI))
	}
	if body.LegalEntityType != nil {
		if !(*body.LegalEntityType == "Subproject" || *body.LegalEntityType == "Incorporated Entity" || *body.LegalEntityType == "Series LLC" || *body.LegalEntityType == "Unofficial Subproject" || *body.LegalEntityType == "Internal Allocation" || *body.LegalEntityType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.legal_entity_type", *body.LegalEntityType, []any{"Subproject", "Incorporated Entity", "Series LLC", "Unofficial Subproject", "Internal Allocation", "None"}))
		}
	}
	if body.LegalParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.legal_parent_uid", *body.LegalParentUID, goa.FormatUUID))
	}
	if body.EntityDissolutionDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_dissolution_date", *body.EntityDissolutionDate, goa.FormatDate))
	}
	if body.EntityFormationDocumentURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_formation_document_url", *body.EntityFormationDocumentURL, goa.FormatURI))
	}
	if body.FormationDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.formation_date", *body.FormationDate, goa.FormatDate))
	}
	if body.LogoURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.logo_url", *body.LogoURL, goa.FormatURI))
	}
	if body.RepositoryURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.repository_url", *body.RepositoryURL, goa.FormatURI))
	}
	if body.WebsiteURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website_url", *body.WebsiteURL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.AnnouncementDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.announcement_date", *body.AnnouncementDate, goa.FormatDate))
	}
	return
}

// ValidateGetOneProjectBaseResponseBody runs the validations defined on
// Get-One-Project-BaseResponseBody
func ValidateGetOneProjectBaseResponseBody(body *GetOneProjectBaseResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", *body.Slug, goa.FormatRegexp))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.Stage != nil {
		if !(*body.Stage == "Formation - Exploratory" || *body.Stage == "Formation - Engaged" || *body.Stage == "Active" || *body.Stage == "Archived" || *body.Stage == "Formation - On Hold" || *body.Stage == "Formation - Disengaged" || *body.Stage == "Formation - Confidential" || *body.Stage == "Prospect") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.stage", *body.Stage, []any{"Formation - Exploratory", "Formation - Engaged", "Active", "Archived", "Formation - On Hold", "Formation - Disengaged", "Formation - Confidential", "Prospect"}))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Active" || *body.Category == "Adopted" || *body.Category == "Archived" || *body.Category == "At-Large" || *body.Category == "Early Adoption" || *body.Category == "Emeritus" || *body.Category == "Graduated" || *body.Category == "Growth" || *body.Category == "Idle" || *body.Category == "Impact" || *body.Category == "Incubating" || *body.Category == "Kanister" || *body.Category == "Mature" || *body.Category == "Pre-LFESS" || *body.Category == "Sandbox" || *body.Category == "SIG" || *body.Category == "Standards" || *body.Category == "TAC" || *body.Category == "Working Group" || *body.Category == "TAG" || *body.Category == "NONE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Active", "Adopted", "Archived", "At-Large", "Early Adoption", "Emeritus", "Graduated", "Growth", "Idle", "Impact", "Incubating", "Kanister", "Mature", "Pre-LFESS", "Sandbox", "SIG", "Standards", "TAC", "Working Group", "TAG", "NONE"}))
		}
	}
	for _, e := range body.FundingModel {
		if !(e == "Crowdfunding" || e == "Membership" || e == "Alternate Funding") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.funding_model[*]", e, []any{"Crowdfunding", "Membership", "Alternate Funding"}))
		}
	}
	if body.CharterURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.charter_url", *body.CharterURL, goa.FormatURI))
	}
	if body.LegalEntityType != nil {
		if !(*body.LegalEntityType == "Subproject" || *body.LegalEntityType == "Incorporated Entity" || *body.LegalEntityType == "Series LLC" || *body.LegalEntityType == "Unofficial Subproject" || *body.LegalEntityType == "Internal Allocation" || *body.LegalEntityType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.legal_entity_type", *body.LegalEntityType, []any{"Subproject", "Incorporated Entity", "Series LLC", "Unofficial Subproject", "Internal Allocation", "None"}))
		}
	}
	if body.LegalParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.legal_parent_uid", *body.LegalParentUID, goa.FormatUUID))
	}
	if body.EntityDissolutionDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_dissolution_date", *body.EntityDissolutionDate, goa.FormatDate))
	}
	if body.EntityFormationDocumentURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_formation_document_url", *body.EntityFormationDocumentURL, goa.FormatURI))
	}
	if body.FormationDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.formation_date", *body.FormationDate, goa.FormatDate))
	}
	if body.LogoURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.logo_url", *body.LogoURL, goa.FormatURI))
	}
	if body.RepositoryURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.repository_url", *body.RepositoryURL, goa.FormatURI))
	}
	if body.WebsiteURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website_url", *body.WebsiteURL, goa.FormatURI))
	}
	return
}

// ValidateGetOneProjectSettingsResponseBody runs the validations defined on
// Get-One-Project-SettingsResponseBody
func ValidateGetOneProjectSettingsResponseBody(body *GetOneProjectSettingsResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.AnnouncementDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.announcement_date", *body.AnnouncementDate, goa.FormatDate))
	}
	return
}

// ValidateUpdateProjectBaseResponseBody runs the validations defined on
// Update-Project-BaseResponseBody
func ValidateUpdateProjectBaseResponseBody(body *UpdateProjectBaseResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", *body.Slug, goa.FormatRegexp))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.Stage != nil {
		if !(*body.Stage == "Formation - Exploratory" || *body.Stage == "Formation - Engaged" || *body.Stage == "Active" || *body.Stage == "Archived" || *body.Stage == "Formation - On Hold" || *body.Stage == "Formation - Disengaged" || *body.Stage == "Formation - Confidential" || *body.Stage == "Prospect") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.stage", *body.Stage, []any{"Formation - Exploratory", "Formation - Engaged", "Active", "Archived", "Formation - On Hold", "Formation - Disengaged", "Formation - Confidential", "Prospect"}))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Active" || *body.Category == "Adopted" || *body.Category == "Archived" || *body.Category == "At-Large" || *body.Category == "Early Adoption" || *body.Category == "Emeritus" || *body.Category == "Graduated" || *body.Category == "Growth" || *body.Category == "Idle" || *body.Category == "Impact" || *body.Category == "Incubating" || *body.Category == "Kanister" || *body.Category == "Mature" || *body.Category == "Pre-LFESS" || *body.Category == "Sandbox" || *body.Category == "SIG" || *body.Category == "Standards" || *body.Category == "TAC" || *body.Category == "Working Group" || *body.Category == "TAG" || *body.Category == "NONE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Active", "Adopted", "Archived", "At-Large", "Early Adoption", "Emeritus", "Graduated", "Growth", "Idle", "Impact", "Incubating", "Kanister", "Mature", "Pre-LFESS", "Sandbox", "SIG", "Standards", "TAC", "Working Group", "TAG", "NONE"}))
		}
	}
	for _, e := range body.FundingModel {
		if !(e == "Crowdfunding" || e == "Membership" || e == "Alternate Funding") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.funding_model[*]", e, []any{"Crowdfunding", "Membership", "Alternate Funding"}))
		}
	}
	if body.CharterURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.charter_url", *body.CharterURL, goa.FormatURI))
	}
	if body.LegalEntityType != nil {
		if !(*body.LegalEntityType == "Subproject" || *body.LegalEntityType == "Incorporated Entity" || *body.LegalEntityType == "Series LLC" || *body.LegalEntityType == "Unofficial Subproject" || *body.LegalEntityType == "Internal Allocation" || *body.LegalEntityType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.legal_entity_type", *body.LegalEntityType, []any{"Subproject", "Incorporated Entity", "Series LLC", "Unofficial Subproject", "Internal Allocation", "None"}))
		}
	}
	if body.LegalParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.legal_parent_uid", *body.LegalParentUID, goa.FormatUUID))
	}
	if body.EntityDissolutionDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_dissolution_date", *body.EntityDissolutionDate, goa.FormatDate))
	}
	if body.EntityFormationDocumentURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_formation_document_url", *body.EntityFormationDocumentURL, goa.FormatURI))
	}
	if body.FormationDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.formation_date", *body.FormationDate, goa.FormatDate))
	}
	if body.LogoURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.logo_url", *body.LogoURL, goa.FormatURI))
	}
	if body.RepositoryURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.repository_url", *body.RepositoryURL, goa.FormatURI))
	}
	if body.WebsiteURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website_url", *body.WebsiteURL, goa.FormatURI))
	}
	return
}

// ValidateUpdateProjectSettingsResponseBody runs the validations defined on
// Update-Project-SettingsResponseBody
func ValidateUpdateProjectSettingsResponseBody(body *UpdateProjectSettingsResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.AnnouncementDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.announcement_date", *body.AnnouncementDate, goa.FormatDate))
	}
	return
}

// ValidateGetProjectsBadRequestResponseBody runs the validations defined on
// get-projects_BadRequest_response_body
func ValidateGetProjectsBadRequestResponseBody(body *GetProjectsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetProjectsInternalServerErrorResponseBody runs the validations
// defined on get-projects_InternalServerError_response_body
func ValidateGetProjectsInternalServerErrorResponseBody(body *GetProjectsInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetProjectsServiceUnavailableResponseBody runs the validations
// defined on get-projects_ServiceUnavailable_response_body
func ValidateGetProjectsServiceUnavailableResponseBody(body *GetProjectsServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateProjectBadRequestResponseBody runs the validations defined on
// create-project_BadRequest_response_body
func ValidateCreateProjectBadRequestResponseBody(body *CreateProjectBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateProjectConflictResponseBody runs the validations defined on
// create-project_Conflict_response_body
func ValidateCreateProjectConflictResponseBody(body *CreateProjectConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateProjectInternalServerErrorResponseBody runs the validations
// defined on create-project_InternalServerError_response_body
func ValidateCreateProjectInternalServerErrorResponseBody(body *CreateProjectInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateProjectServiceUnavailableResponseBody runs the validations
// defined on create-project_ServiceUnavailable_response_body
func ValidateCreateProjectServiceUnavailableResponseBody(body *CreateProjectServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOneProjectBaseInternalServerErrorResponseBody runs the
// validations defined on get-one-project-base_InternalServerError_response_body
func ValidateGetOneProjectBaseInternalServerErrorResponseBody(body *GetOneProjectBaseInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOneProjectBaseNotFoundResponseBody runs the validations defined
// on get-one-project-base_NotFound_response_body
func ValidateGetOneProjectBaseNotFoundResponseBody(body *GetOneProjectBaseNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOneProjectBaseServiceUnavailableResponseBody runs the validations
// defined on get-one-project-base_ServiceUnavailable_response_body
func ValidateGetOneProjectBaseServiceUnavailableResponseBody(body *GetOneProjectBaseServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOneProjectSettingsInternalServerErrorResponseBody runs the
// validations defined on
// get-one-project-settings_InternalServerError_response_body
func ValidateGetOneProjectSettingsInternalServerErrorResponseBody(body *GetOneProjectSettingsInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOneProjectSettingsNotFoundResponseBody runs the validations
// defined on get-one-project-settings_NotFound_response_body
func ValidateGetOneProjectSettingsNotFoundResponseBody(body *GetOneProjectSettingsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOneProjectSettingsServiceUnavailableResponseBody runs the
// validations defined on
// get-one-project-settings_ServiceUnavailable_response_body
func ValidateGetOneProjectSettingsServiceUnavailableResponseBody(body *GetOneProjectSettingsServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateProjectBaseBadRequestResponseBody runs the validations defined
// on update-project-base_BadRequest_response_body
func ValidateUpdateProjectBaseBadRequestResponseBody(body *UpdateProjectBaseBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateProjectBaseConflictResponseBody runs the validations defined
// on update-project-base_Conflict_response_body
func ValidateUpdateProjectBaseConflictResponseBody(body *UpdateProjectBaseConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateProjectBaseInternalServerErrorResponseBody runs the
// validations defined on update-project-base_InternalServerError_response_body
func ValidateUpdateProjectBaseInternalServerErrorResponseBody(body *UpdateProjectBaseInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateProjectBaseNotFoundResponseBody runs the validations defined
// on update-project-base_NotFound_response_body
func ValidateUpdateProjectBaseNotFoundResponseBody(body *UpdateProjectBaseNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateProjectBaseServiceUnavailableResponseBody runs the validations
// defined on update-project-base_ServiceUnavailable_response_body
func ValidateUpdateProjectBaseServiceUnavailableResponseBody(body *UpdateProjectBaseServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateProjectSettingsBadRequestResponseBody runs the validations
// defined on update-project-settings_BadRequest_response_body
func ValidateUpdateProjectSettingsBadRequestResponseBody(body *UpdateProjectSettingsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateProjectSettingsInternalServerErrorResponseBody runs the
// validations defined on
// update-project-settings_InternalServerError_response_body
func ValidateUpdateProjectSettingsInternalServerErrorResponseBody(body *UpdateProjectSettingsInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateProjectSettingsNotFoundResponseBody runs the validations
// defined on update-project-settings_NotFound_response_body
func ValidateUpdateProjectSettingsNotFoundResponseBody(body *UpdateProjectSettingsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateProjectSettingsServiceUnavailableResponseBody runs the
// validations defined on
// update-project-settings_ServiceUnavailable_response_body
func ValidateUpdateProjectSettingsServiceUnavailableResponseBody(body *UpdateProjectSettingsServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteProjectBadRequestResponseBody runs the validations defined on
// delete-project_BadRequest_response_body
func ValidateDeleteProjectBadRequestResponseBody(body *DeleteProjectBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteProjectInternalServerErrorResponseBody runs the validations
// defined on delete-project_InternalServerError_response_body
func ValidateDeleteProjectInternalServerErrorResponseBody(body *DeleteProjectInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteProjectNotFoundResponseBody runs the validations defined on
// delete-project_NotFound_response_body
func ValidateDeleteProjectNotFoundResponseBody(body *DeleteProjectNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteProjectServiceUnavailableResponseBody runs the validations
// defined on delete-project_ServiceUnavailable_response_body
func ValidateDeleteProjectServiceUnavailableResponseBody(body *DeleteProjectServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReadyzServiceUnavailableResponseBody runs the validations defined on
// readyz_ServiceUnavailable_response_body
func ValidateReadyzServiceUnavailableResponseBody(body *ReadyzServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateProjectFullResponseBody runs the validations defined on
// ProjectFullResponseBody
func ValidateProjectFullResponseBody(body *ProjectFullResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", *body.Slug, goa.FormatRegexp))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.Stage != nil {
		if !(*body.Stage == "Formation - Exploratory" || *body.Stage == "Formation - Engaged" || *body.Stage == "Active" || *body.Stage == "Archived" || *body.Stage == "Formation - On Hold" || *body.Stage == "Formation - Disengaged" || *body.Stage == "Formation - Confidential" || *body.Stage == "Prospect") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.stage", *body.Stage, []any{"Formation - Exploratory", "Formation - Engaged", "Active", "Archived", "Formation - On Hold", "Formation - Disengaged", "Formation - Confidential", "Prospect"}))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Active" || *body.Category == "Adopted" || *body.Category == "Archived" || *body.Category == "At-Large" || *body.Category == "Early Adoption" || *body.Category == "Emeritus" || *body.Category == "Graduated" || *body.Category == "Growth" || *body.Category == "Idle" || *body.Category == "Impact" || *body.Category == "Incubating" || *body.Category == "Kanister" || *body.Category == "Mature" || *body.Category == "Pre-LFESS" || *body.Category == "Sandbox" || *body.Category == "SIG" || *body.Category == "Standards" || *body.Category == "TAC" || *body.Category == "Working Group" || *body.Category == "TAG" || *body.Category == "NONE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Active", "Adopted", "Archived", "At-Large", "Early Adoption", "Emeritus", "Graduated", "Growth", "Idle", "Impact", "Incubating", "Kanister", "Mature", "Pre-LFESS", "Sandbox", "SIG", "Standards", "TAC", "Working Group", "TAG", "NONE"}))
		}
	}
	for _, e := range body.FundingModel {
		if !(e == "Crowdfunding" || e == "Membership" || e == "Alternate Funding") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.funding_model[*]", e, []any{"Crowdfunding", "Membership", "Alternate Funding"}))
		}
	}
	if body.CharterURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.charter_url", *body.CharterURL, goa.FormatURI))
	}
	if body.LegalEntityType != nil {
		if !(*body.LegalEntityType == "Subproject" || *body.LegalEntityType == "Incorporated Entity" || *body.LegalEntityType == "Series LLC" || *body.LegalEntityType == "Unofficial Subproject" || *body.LegalEntityType == "Internal Allocation" || *body.LegalEntityType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.legal_entity_type", *body.LegalEntityType, []any{"Subproject", "Incorporated Entity", "Series LLC", "Unofficial Subproject", "Internal Allocation", "None"}))
		}
	}
	if body.LegalParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.legal_parent_uid", *body.LegalParentUID, goa.FormatUUID))
	}
	if body.EntityDissolutionDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_dissolution_date", *body.EntityDissolutionDate, goa.FormatDate))
	}
	if body.EntityFormationDocumentURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_formation_document_url", *body.EntityFormationDocumentURL, goa.FormatURI))
	}
	if body.FormationDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.formation_date", *body.FormationDate, goa.FormatDate))
	}
	if body.LogoURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.logo_url", *body.LogoURL, goa.FormatURI))
	}
	if body.RepositoryURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.repository_url", *body.RepositoryURL, goa.FormatURI))
	}
	if body.WebsiteURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website_url", *body.WebsiteURL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.AnnouncementDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.announcement_date", *body.AnnouncementDate, goa.FormatDate))
	}
	return
}

// ValidateProjectBaseResponseBody runs the validations defined on
// ProjectBaseResponseBody
func ValidateProjectBaseResponseBody(body *ProjectBaseResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", *body.Slug, goa.FormatRegexp))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.Stage != nil {
		if !(*body.Stage == "Formation - Exploratory" || *body.Stage == "Formation - Engaged" || *body.Stage == "Active" || *body.Stage == "Archived" || *body.Stage == "Formation - On Hold" || *body.Stage == "Formation - Disengaged" || *body.Stage == "Formation - Confidential" || *body.Stage == "Prospect") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.stage", *body.Stage, []any{"Formation - Exploratory", "Formation - Engaged", "Active", "Archived", "Formation - On Hold", "Formation - Disengaged", "Formation - Confidential", "Prospect"}))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Active" || *body.Category == "Adopted" || *body.Category == "Archived" || *body.Category == "At-Large" || *body.Category == "Early Adoption" || *body.Category == "Emeritus" || *body.Category == "Graduated" || *body.Category == "Growth" || *body.Category == "Idle" || *body.Category == "Impact" || *body.Category == "Incubating" || *body.Category == "Kanister" || *body.Category == "Mature" || *body.Category == "Pre-LFESS" || *body.Category == "Sandbox" || *body.Category == "SIG" || *body.Category == "Standards" || *body.Category == "TAC" || *body.Category == "Working Group" || *body.Category == "TAG" || *body.Category == "NONE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Active", "Adopted", "Archived", "At-Large", "Early Adoption", "Emeritus", "Graduated", "Growth", "Idle", "Impact", "Incubating", "Kanister", "Mature", "Pre-LFESS", "Sandbox", "SIG", "Standards", "TAC", "Working Group", "TAG", "NONE"}))
		}
	}
	for _, e := range body.FundingModel {
		if !(e == "Crowdfunding" || e == "Membership" || e == "Alternate Funding") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.funding_model[*]", e, []any{"Crowdfunding", "Membership", "Alternate Funding"}))
		}
	}
	if body.CharterURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.charter_url", *body.CharterURL, goa.FormatURI))
	}
	if body.LegalEntityType != nil {
		if !(*body.LegalEntityType == "Subproject" || *body.LegalEntityType == "Incorporated Entity" || *body.LegalEntityType == "Series LLC" || *body.LegalEntityType == "Unofficial Subproject" || *body.LegalEntityType == "Internal Allocation" || *body.LegalEntityType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.legal_entity_type", *body.LegalEntityType, []any{"Subproject", "Incorporated Entity", "Series LLC", "Unofficial Subproject", "Internal Allocation", "None"}))
		}
	}
	if body.LegalParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.legal_parent_uid", *body.LegalParentUID, goa.FormatUUID))
	}
	if body.EntityDissolutionDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_dissolution_date", *body.EntityDissolutionDate, goa.FormatDate))
	}
	if body.EntityFormationDocumentURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_formation_document_url", *body.EntityFormationDocumentURL, goa.FormatURI))
	}
	if body.FormationDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.formation_date", *body.FormationDate, goa.FormatDate))
	}
	if body.LogoURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.logo_url", *body.LogoURL, goa.FormatURI))
	}
	if body.RepositoryURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.repository_url", *body.RepositoryURL, goa.FormatURI))
	}
	if body.WebsiteURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website_url", *body.WebsiteURL, goa.FormatURI))
	}
	return
}

// ValidateProjectSettingsResponseBody runs the validations defined on
// ProjectSettingsResponseBody
func ValidateProjectSettingsResponseBody(body *ProjectSettingsResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.AnnouncementDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.announcement_date", *body.AnnouncementDate, goa.FormatDate))
	}
	return
}
