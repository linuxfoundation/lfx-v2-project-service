// Code generated by goa v3.20.1, DO NOT EDIT.
//
// project-service client
//
// Command:
// $ goa gen lfx-v2-project-service/design

package projectservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "project-service" service client.
type Client struct {
	GetProjectsEndpoint goa.Endpoint
	ReadyzEndpoint      goa.Endpoint
	LivezEndpoint       goa.Endpoint
}

// NewClient initializes a "project-service" service client given the endpoints.
func NewClient(getProjects, readyz, livez goa.Endpoint) *Client {
	return &Client{
		GetProjectsEndpoint: getProjects,
		ReadyzEndpoint:      readyz,
		LivezEndpoint:       livez,
	}
}

// GetProjects calls the "get-projects" endpoint of the "project-service"
// service.
// GetProjects may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): Bad request
//   - error: internal error
func (c *Client) GetProjects(ctx context.Context, p *GetProjectsPayload) (res *GetProjectsResult, err error) {
	var ires any
	ires, err = c.GetProjectsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*GetProjectsResult), nil
}

// Readyz calls the "readyz" endpoint of the "project-service" service.
// Readyz may return the following errors:
//   - "NotReady" (type *goa.ServiceError): Service is not ready yet
//   - error: internal error
func (c *Client) Readyz(ctx context.Context) (res []byte, err error) {
	var ires any
	ires, err = c.ReadyzEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.([]byte), nil
}

// Livez calls the "livez" endpoint of the "project-service" service.
func (c *Client) Livez(ctx context.Context) (res []byte, err error) {
	var ires any
	ires, err = c.LivezEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.([]byte), nil
}
