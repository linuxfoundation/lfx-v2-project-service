// Code generated by goa v3.20.1, DO NOT EDIT.
//
// project-service endpoints
//
// Command:
// $ goa gen lfx-v2-project-service/design

package projectservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "project-service" service endpoints.
type Endpoints struct {
	GetProjects goa.Endpoint
	Readyz      goa.Endpoint
	Livez       goa.Endpoint
}

// NewEndpoints wraps the methods of the "project-service" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		GetProjects: NewGetProjectsEndpoint(s),
		Readyz:      NewReadyzEndpoint(s),
		Livez:       NewLivezEndpoint(s),
	}
}

// Use applies the given middleware to all the "project-service" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetProjects = m(e.GetProjects)
	e.Readyz = m(e.Readyz)
	e.Livez = m(e.Livez)
}

// NewGetProjectsEndpoint returns an endpoint function that calls the method
// "get-projects" of service "project-service".
func NewGetProjectsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetProjectsPayload)
		return s.GetProjects(ctx, p)
	}
}

// NewReadyzEndpoint returns an endpoint function that calls the method
// "readyz" of service "project-service".
func NewReadyzEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Readyz(ctx)
	}
}

// NewLivezEndpoint returns an endpoint function that calls the method "livez"
// of service "project-service".
func NewLivezEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Livez(ctx)
	}
}
