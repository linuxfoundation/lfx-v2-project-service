// Code generated by goa v3.20.1, DO NOT EDIT.
//
// project-service service
//
// Command:
// $ goa gen lfx-v2-project-service/design

package projectservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// The project service provides LFX Project resources.
type Service interface {
	// Get all projects.
	GetProjects(context.Context, *GetProjectsPayload) (res *GetProjectsResult, err error)
	// Check if the service is able to take inbound requests.
	Readyz(context.Context) (res []byte, err error)
	// Check if the service is alive.
	Livez(context.Context) (res []byte, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "project-service"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "project-service"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"get-projects", "readyz", "livez"}

// GetProjectsPayload is the payload type of the project-service service
// get-projects method.
type GetProjectsPayload struct {
	// Version of the API
	Version *string
	// Token to get the next page of results, if available
	PageToken *string
}

// GetProjectsResult is the result type of the project-service service
// get-projects method.
type GetProjectsResult struct {
	// Resources found
	Projects []*Project
	// Opaque token if more results are available
	PageToken *string
	// Cache control header
	CacheControl *string
}

// A representation of LFX Projects.
type Project struct {
	// Project ID -- v2 id, not related to v1 id directly
	ID *string
	// Project slug, a short slugified name of the project
	Slug *string
	// A description of the project
	Description *string
	// The pretty name of the project
	Name *string
	// A list of project managers
	Managers []string
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "BadRequest", false, false, false)
}

// MakeNotReady builds a goa.ServiceError from an error.
func MakeNotReady(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotReady", false, true, true)
}
