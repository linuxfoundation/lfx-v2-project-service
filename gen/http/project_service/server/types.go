// Code generated by goa v3.21.1, DO NOT EDIT.
//
// project-service HTTP server types
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-project-service/cmd/project-api/design

package server

import (
	projectservice "github.com/linuxfoundation/lfx-v2-project-service/gen/project_service"
	goa "goa.design/goa/v3/pkg"
)

// CreateProjectRequestBody is the type of the "project-service" service
// "create-project" endpoint HTTP request body.
type CreateProjectRequestBody struct {
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, required and must be a valid UUID
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The stage of the project
	Stage *string `form:"stage,omitempty" json:"stage,omitempty" xml:"stage,omitempty"`
	// The category of the project
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// A list of funding models for the project
	FundingModel []string `form:"funding_model,omitempty" json:"funding_model,omitempty" xml:"funding_model,omitempty"`
	// The URL of the project charter document
	CharterURL *string `form:"charter_url,omitempty" json:"charter_url,omitempty" xml:"charter_url,omitempty"`
	// The legal entity type of the project
	LegalEntityType *string `form:"legal_entity_type,omitempty" json:"legal_entity_type,omitempty" xml:"legal_entity_type,omitempty"`
	// The legal entity name of the project
	LegalEntityName *string `form:"legal_entity_name,omitempty" json:"legal_entity_name,omitempty" xml:"legal_entity_name,omitempty"`
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string `form:"legal_parent_uid,omitempty" json:"legal_parent_uid,omitempty" xml:"legal_parent_uid,omitempty"`
	// The date the project entity was dissolved
	EntityDissolutionDate *string `form:"entity_dissolution_date,omitempty" json:"entity_dissolution_date,omitempty" xml:"entity_dissolution_date,omitempty"`
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string `form:"entity_formation_document_url,omitempty" json:"entity_formation_document_url,omitempty" xml:"entity_formation_document_url,omitempty"`
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool `form:"autojoin_enabled,omitempty" json:"autojoin_enabled,omitempty" xml:"autojoin_enabled,omitempty"`
	// The date the project was formed
	FormationDate *string `form:"formation_date,omitempty" json:"formation_date,omitempty" xml:"formation_date,omitempty"`
	// The URL of the project logo
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// The URL of the project repository
	RepositoryURL *string `form:"repository_url,omitempty" json:"repository_url,omitempty" xml:"repository_url,omitempty"`
	// The URL of the project website
	WebsiteURL *string `form:"website_url,omitempty" json:"website_url,omitempty" xml:"website_url,omitempty"`
	// The date the project was announced
	AnnouncementDate *string `form:"announcement_date,omitempty" json:"announcement_date,omitempty" xml:"announcement_date,omitempty"`
	// The mission statement of the project
	MissionStatement *string `form:"mission_statement,omitempty" json:"mission_statement,omitempty" xml:"mission_statement,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// A list of project meeting coordinators by their user IDs. These users are
	// responsible for managing meetings for the project.
	MeetingCoordinators []string `form:"meeting_coordinators,omitempty" json:"meeting_coordinators,omitempty" xml:"meeting_coordinators,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// UpdateProjectBaseRequestBody is the type of the "project-service" service
// "update-project-base" endpoint HTTP request body.
type UpdateProjectBaseRequestBody struct {
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, required and must be a valid UUID
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The stage of the project
	Stage *string `form:"stage,omitempty" json:"stage,omitempty" xml:"stage,omitempty"`
	// The category of the project
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// A list of funding models for the project
	FundingModel []string `form:"funding_model,omitempty" json:"funding_model,omitempty" xml:"funding_model,omitempty"`
	// The URL of the project charter document
	CharterURL *string `form:"charter_url,omitempty" json:"charter_url,omitempty" xml:"charter_url,omitempty"`
	// The legal entity type of the project
	LegalEntityType *string `form:"legal_entity_type,omitempty" json:"legal_entity_type,omitempty" xml:"legal_entity_type,omitempty"`
	// The legal entity name of the project
	LegalEntityName *string `form:"legal_entity_name,omitempty" json:"legal_entity_name,omitempty" xml:"legal_entity_name,omitempty"`
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string `form:"legal_parent_uid,omitempty" json:"legal_parent_uid,omitempty" xml:"legal_parent_uid,omitempty"`
	// The date the project entity was dissolved
	EntityDissolutionDate *string `form:"entity_dissolution_date,omitempty" json:"entity_dissolution_date,omitempty" xml:"entity_dissolution_date,omitempty"`
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string `form:"entity_formation_document_url,omitempty" json:"entity_formation_document_url,omitempty" xml:"entity_formation_document_url,omitempty"`
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool `form:"autojoin_enabled,omitempty" json:"autojoin_enabled,omitempty" xml:"autojoin_enabled,omitempty"`
	// The date the project was formed
	FormationDate *string `form:"formation_date,omitempty" json:"formation_date,omitempty" xml:"formation_date,omitempty"`
	// The URL of the project logo
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// The URL of the project repository
	RepositoryURL *string `form:"repository_url,omitempty" json:"repository_url,omitempty" xml:"repository_url,omitempty"`
	// The URL of the project website
	WebsiteURL *string `form:"website_url,omitempty" json:"website_url,omitempty" xml:"website_url,omitempty"`
}

// UpdateProjectSettingsRequestBody is the type of the "project-service"
// service "update-project-settings" endpoint HTTP request body.
type UpdateProjectSettingsRequestBody struct {
	// The mission statement of the project
	MissionStatement *string `form:"mission_statement,omitempty" json:"mission_statement,omitempty" xml:"mission_statement,omitempty"`
	// The date the project was announced
	AnnouncementDate *string `form:"announcement_date,omitempty" json:"announcement_date,omitempty" xml:"announcement_date,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// A list of project meeting coordinators by their user IDs. These users are
	// responsible for managing meetings for the project.
	MeetingCoordinators []string `form:"meeting_coordinators,omitempty" json:"meeting_coordinators,omitempty" xml:"meeting_coordinators,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// GetProjectsResponseBody is the type of the "project-service" service
// "get-projects" endpoint HTTP response body.
type GetProjectsResponseBody struct {
	// Resources found
	Projects []*ProjectFullResponseBody `form:"projects" json:"projects" xml:"projects"`
}

// CreateProjectResponseBody is the type of the "project-service" service
// "create-project" endpoint HTTP response body.
type CreateProjectResponseBody struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, required and must be a valid UUID
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The stage of the project
	Stage *string `form:"stage,omitempty" json:"stage,omitempty" xml:"stage,omitempty"`
	// The category of the project
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// A list of funding models for the project
	FundingModel []string `form:"funding_model,omitempty" json:"funding_model,omitempty" xml:"funding_model,omitempty"`
	// The URL of the project charter document
	CharterURL *string `form:"charter_url,omitempty" json:"charter_url,omitempty" xml:"charter_url,omitempty"`
	// The legal entity type of the project
	LegalEntityType *string `form:"legal_entity_type,omitempty" json:"legal_entity_type,omitempty" xml:"legal_entity_type,omitempty"`
	// The legal entity name of the project
	LegalEntityName *string `form:"legal_entity_name,omitempty" json:"legal_entity_name,omitempty" xml:"legal_entity_name,omitempty"`
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string `form:"legal_parent_uid,omitempty" json:"legal_parent_uid,omitempty" xml:"legal_parent_uid,omitempty"`
	// The date the project entity was dissolved
	EntityDissolutionDate *string `form:"entity_dissolution_date,omitempty" json:"entity_dissolution_date,omitempty" xml:"entity_dissolution_date,omitempty"`
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string `form:"entity_formation_document_url,omitempty" json:"entity_formation_document_url,omitempty" xml:"entity_formation_document_url,omitempty"`
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool `form:"autojoin_enabled,omitempty" json:"autojoin_enabled,omitempty" xml:"autojoin_enabled,omitempty"`
	// The date the project was formed
	FormationDate *string `form:"formation_date,omitempty" json:"formation_date,omitempty" xml:"formation_date,omitempty"`
	// The URL of the project logo
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// The URL of the project repository
	RepositoryURL *string `form:"repository_url,omitempty" json:"repository_url,omitempty" xml:"repository_url,omitempty"`
	// The URL of the project website
	WebsiteURL *string `form:"website_url,omitempty" json:"website_url,omitempty" xml:"website_url,omitempty"`
	// The date and time the project was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the project was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The mission statement of the project
	MissionStatement *string `form:"mission_statement,omitempty" json:"mission_statement,omitempty" xml:"mission_statement,omitempty"`
	// The date the project was announced
	AnnouncementDate *string `form:"announcement_date,omitempty" json:"announcement_date,omitempty" xml:"announcement_date,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// A list of project meeting coordinators by their user IDs. These users are
	// responsible for managing meetings for the project.
	MeetingCoordinators []string `form:"meeting_coordinators,omitempty" json:"meeting_coordinators,omitempty" xml:"meeting_coordinators,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// GetOneProjectBaseResponseBody is the type of the "project-service" service
// "get-one-project-base" endpoint HTTP response body.
type GetOneProjectBaseResponseBody ProjectBaseResponseBody

// GetOneProjectSettingsResponseBody is the type of the "project-service"
// service "get-one-project-settings" endpoint HTTP response body.
type GetOneProjectSettingsResponseBody ProjectSettingsResponseBody

// UpdateProjectBaseResponseBody is the type of the "project-service" service
// "update-project-base" endpoint HTTP response body.
type UpdateProjectBaseResponseBody struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, required and must be a valid UUID
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The stage of the project
	Stage *string `form:"stage,omitempty" json:"stage,omitempty" xml:"stage,omitempty"`
	// The category of the project
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// A list of funding models for the project
	FundingModel []string `form:"funding_model,omitempty" json:"funding_model,omitempty" xml:"funding_model,omitempty"`
	// The URL of the project charter document
	CharterURL *string `form:"charter_url,omitempty" json:"charter_url,omitempty" xml:"charter_url,omitempty"`
	// The legal entity type of the project
	LegalEntityType *string `form:"legal_entity_type,omitempty" json:"legal_entity_type,omitempty" xml:"legal_entity_type,omitempty"`
	// The legal entity name of the project
	LegalEntityName *string `form:"legal_entity_name,omitempty" json:"legal_entity_name,omitempty" xml:"legal_entity_name,omitempty"`
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string `form:"legal_parent_uid,omitempty" json:"legal_parent_uid,omitempty" xml:"legal_parent_uid,omitempty"`
	// The date the project entity was dissolved
	EntityDissolutionDate *string `form:"entity_dissolution_date,omitempty" json:"entity_dissolution_date,omitempty" xml:"entity_dissolution_date,omitempty"`
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string `form:"entity_formation_document_url,omitempty" json:"entity_formation_document_url,omitempty" xml:"entity_formation_document_url,omitempty"`
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool `form:"autojoin_enabled,omitempty" json:"autojoin_enabled,omitempty" xml:"autojoin_enabled,omitempty"`
	// The date the project was formed
	FormationDate *string `form:"formation_date,omitempty" json:"formation_date,omitempty" xml:"formation_date,omitempty"`
	// The URL of the project logo
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// The URL of the project repository
	RepositoryURL *string `form:"repository_url,omitempty" json:"repository_url,omitempty" xml:"repository_url,omitempty"`
	// The URL of the project website
	WebsiteURL *string `form:"website_url,omitempty" json:"website_url,omitempty" xml:"website_url,omitempty"`
	// The date and time the project was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the project was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateProjectSettingsResponseBody is the type of the "project-service"
// service "update-project-settings" endpoint HTTP response body.
type UpdateProjectSettingsResponseBody struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The mission statement of the project
	MissionStatement *string `form:"mission_statement,omitempty" json:"mission_statement,omitempty" xml:"mission_statement,omitempty"`
	// The date the project was announced
	AnnouncementDate *string `form:"announcement_date,omitempty" json:"announcement_date,omitempty" xml:"announcement_date,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// A list of project meeting coordinators by their user IDs. These users are
	// responsible for managing meetings for the project.
	MeetingCoordinators []string `form:"meeting_coordinators,omitempty" json:"meeting_coordinators,omitempty" xml:"meeting_coordinators,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
	// The date and time the project was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the project was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetProjectsBadRequestResponseBody is the type of the "project-service"
// service "get-projects" endpoint HTTP response body for the "BadRequest"
// error.
type GetProjectsBadRequestResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetProjectsInternalServerErrorResponseBody is the type of the
// "project-service" service "get-projects" endpoint HTTP response body for the
// "InternalServerError" error.
type GetProjectsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetProjectsServiceUnavailableResponseBody is the type of the
// "project-service" service "get-projects" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type GetProjectsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateProjectBadRequestResponseBody is the type of the "project-service"
// service "create-project" endpoint HTTP response body for the "BadRequest"
// error.
type CreateProjectBadRequestResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateProjectConflictResponseBody is the type of the "project-service"
// service "create-project" endpoint HTTP response body for the "Conflict"
// error.
type CreateProjectConflictResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateProjectInternalServerErrorResponseBody is the type of the
// "project-service" service "create-project" endpoint HTTP response body for
// the "InternalServerError" error.
type CreateProjectInternalServerErrorResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateProjectServiceUnavailableResponseBody is the type of the
// "project-service" service "create-project" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type CreateProjectServiceUnavailableResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetOneProjectBaseInternalServerErrorResponseBody is the type of the
// "project-service" service "get-one-project-base" endpoint HTTP response body
// for the "InternalServerError" error.
type GetOneProjectBaseInternalServerErrorResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetOneProjectBaseNotFoundResponseBody is the type of the "project-service"
// service "get-one-project-base" endpoint HTTP response body for the
// "NotFound" error.
type GetOneProjectBaseNotFoundResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetOneProjectBaseServiceUnavailableResponseBody is the type of the
// "project-service" service "get-one-project-base" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type GetOneProjectBaseServiceUnavailableResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetOneProjectSettingsInternalServerErrorResponseBody is the type of the
// "project-service" service "get-one-project-settings" endpoint HTTP response
// body for the "InternalServerError" error.
type GetOneProjectSettingsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetOneProjectSettingsNotFoundResponseBody is the type of the
// "project-service" service "get-one-project-settings" endpoint HTTP response
// body for the "NotFound" error.
type GetOneProjectSettingsNotFoundResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetOneProjectSettingsServiceUnavailableResponseBody is the type of the
// "project-service" service "get-one-project-settings" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type GetOneProjectSettingsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateProjectBaseBadRequestResponseBody is the type of the "project-service"
// service "update-project-base" endpoint HTTP response body for the
// "BadRequest" error.
type UpdateProjectBaseBadRequestResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateProjectBaseConflictResponseBody is the type of the "project-service"
// service "update-project-base" endpoint HTTP response body for the "Conflict"
// error.
type UpdateProjectBaseConflictResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateProjectBaseInternalServerErrorResponseBody is the type of the
// "project-service" service "update-project-base" endpoint HTTP response body
// for the "InternalServerError" error.
type UpdateProjectBaseInternalServerErrorResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateProjectBaseNotFoundResponseBody is the type of the "project-service"
// service "update-project-base" endpoint HTTP response body for the "NotFound"
// error.
type UpdateProjectBaseNotFoundResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateProjectBaseServiceUnavailableResponseBody is the type of the
// "project-service" service "update-project-base" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type UpdateProjectBaseServiceUnavailableResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateProjectSettingsBadRequestResponseBody is the type of the
// "project-service" service "update-project-settings" endpoint HTTP response
// body for the "BadRequest" error.
type UpdateProjectSettingsBadRequestResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateProjectSettingsInternalServerErrorResponseBody is the type of the
// "project-service" service "update-project-settings" endpoint HTTP response
// body for the "InternalServerError" error.
type UpdateProjectSettingsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateProjectSettingsNotFoundResponseBody is the type of the
// "project-service" service "update-project-settings" endpoint HTTP response
// body for the "NotFound" error.
type UpdateProjectSettingsNotFoundResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateProjectSettingsServiceUnavailableResponseBody is the type of the
// "project-service" service "update-project-settings" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type UpdateProjectSettingsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteProjectBadRequestResponseBody is the type of the "project-service"
// service "delete-project" endpoint HTTP response body for the "BadRequest"
// error.
type DeleteProjectBadRequestResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteProjectInternalServerErrorResponseBody is the type of the
// "project-service" service "delete-project" endpoint HTTP response body for
// the "InternalServerError" error.
type DeleteProjectInternalServerErrorResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteProjectNotFoundResponseBody is the type of the "project-service"
// service "delete-project" endpoint HTTP response body for the "NotFound"
// error.
type DeleteProjectNotFoundResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteProjectServiceUnavailableResponseBody is the type of the
// "project-service" service "delete-project" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type DeleteProjectServiceUnavailableResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// ReadyzServiceUnavailableResponseBody is the type of the "project-service"
// service "readyz" endpoint HTTP response body for the "ServiceUnavailable"
// error.
type ReadyzServiceUnavailableResponseBody struct {
	// HTTP status code
	Code string `form:"code" json:"code" xml:"code"`
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// ProjectFullResponseBody is used to define fields on response body types.
type ProjectFullResponseBody struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, required and must be a valid UUID
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The stage of the project
	Stage *string `form:"stage,omitempty" json:"stage,omitempty" xml:"stage,omitempty"`
	// The category of the project
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// A list of funding models for the project
	FundingModel []string `form:"funding_model,omitempty" json:"funding_model,omitempty" xml:"funding_model,omitempty"`
	// The URL of the project charter document
	CharterURL *string `form:"charter_url,omitempty" json:"charter_url,omitempty" xml:"charter_url,omitempty"`
	// The legal entity type of the project
	LegalEntityType *string `form:"legal_entity_type,omitempty" json:"legal_entity_type,omitempty" xml:"legal_entity_type,omitempty"`
	// The legal entity name of the project
	LegalEntityName *string `form:"legal_entity_name,omitempty" json:"legal_entity_name,omitempty" xml:"legal_entity_name,omitempty"`
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string `form:"legal_parent_uid,omitempty" json:"legal_parent_uid,omitempty" xml:"legal_parent_uid,omitempty"`
	// The date the project entity was dissolved
	EntityDissolutionDate *string `form:"entity_dissolution_date,omitempty" json:"entity_dissolution_date,omitempty" xml:"entity_dissolution_date,omitempty"`
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string `form:"entity_formation_document_url,omitempty" json:"entity_formation_document_url,omitempty" xml:"entity_formation_document_url,omitempty"`
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool `form:"autojoin_enabled,omitempty" json:"autojoin_enabled,omitempty" xml:"autojoin_enabled,omitempty"`
	// The date the project was formed
	FormationDate *string `form:"formation_date,omitempty" json:"formation_date,omitempty" xml:"formation_date,omitempty"`
	// The URL of the project logo
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// The URL of the project repository
	RepositoryURL *string `form:"repository_url,omitempty" json:"repository_url,omitempty" xml:"repository_url,omitempty"`
	// The URL of the project website
	WebsiteURL *string `form:"website_url,omitempty" json:"website_url,omitempty" xml:"website_url,omitempty"`
	// The date and time the project was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the project was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The mission statement of the project
	MissionStatement *string `form:"mission_statement,omitempty" json:"mission_statement,omitempty" xml:"mission_statement,omitempty"`
	// The date the project was announced
	AnnouncementDate *string `form:"announcement_date,omitempty" json:"announcement_date,omitempty" xml:"announcement_date,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// A list of project meeting coordinators by their user IDs. These users are
	// responsible for managing meetings for the project.
	MeetingCoordinators []string `form:"meeting_coordinators,omitempty" json:"meeting_coordinators,omitempty" xml:"meeting_coordinators,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// ProjectBaseResponseBody is used to define fields on response body types.
type ProjectBaseResponseBody struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Whether the project is public
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// The UID of the parent project, required and must be a valid UUID
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The stage of the project
	Stage *string `form:"stage,omitempty" json:"stage,omitempty" xml:"stage,omitempty"`
	// The category of the project
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// A list of funding models for the project
	FundingModel []string `form:"funding_model,omitempty" json:"funding_model,omitempty" xml:"funding_model,omitempty"`
	// The URL of the project charter document
	CharterURL *string `form:"charter_url,omitempty" json:"charter_url,omitempty" xml:"charter_url,omitempty"`
	// The legal entity type of the project
	LegalEntityType *string `form:"legal_entity_type,omitempty" json:"legal_entity_type,omitempty" xml:"legal_entity_type,omitempty"`
	// The legal entity name of the project
	LegalEntityName *string `form:"legal_entity_name,omitempty" json:"legal_entity_name,omitempty" xml:"legal_entity_name,omitempty"`
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string `form:"legal_parent_uid,omitempty" json:"legal_parent_uid,omitempty" xml:"legal_parent_uid,omitempty"`
	// The date the project entity was dissolved
	EntityDissolutionDate *string `form:"entity_dissolution_date,omitempty" json:"entity_dissolution_date,omitempty" xml:"entity_dissolution_date,omitempty"`
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string `form:"entity_formation_document_url,omitempty" json:"entity_formation_document_url,omitempty" xml:"entity_formation_document_url,omitempty"`
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool `form:"autojoin_enabled,omitempty" json:"autojoin_enabled,omitempty" xml:"autojoin_enabled,omitempty"`
	// The date the project was formed
	FormationDate *string `form:"formation_date,omitempty" json:"formation_date,omitempty" xml:"formation_date,omitempty"`
	// The URL of the project logo
	LogoURL *string `form:"logo_url,omitempty" json:"logo_url,omitempty" xml:"logo_url,omitempty"`
	// The URL of the project repository
	RepositoryURL *string `form:"repository_url,omitempty" json:"repository_url,omitempty" xml:"repository_url,omitempty"`
	// The URL of the project website
	WebsiteURL *string `form:"website_url,omitempty" json:"website_url,omitempty" xml:"website_url,omitempty"`
	// The date and time the project was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the project was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ProjectSettingsResponseBody is used to define fields on response body types.
type ProjectSettingsResponseBody struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The mission statement of the project
	MissionStatement *string `form:"mission_statement,omitempty" json:"mission_statement,omitempty" xml:"mission_statement,omitempty"`
	// The date the project was announced
	AnnouncementDate *string `form:"announcement_date,omitempty" json:"announcement_date,omitempty" xml:"announcement_date,omitempty"`
	// A list of project writers by their user IDs
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// A list of project meeting coordinators by their user IDs. These users are
	// responsible for managing meetings for the project.
	MeetingCoordinators []string `form:"meeting_coordinators,omitempty" json:"meeting_coordinators,omitempty" xml:"meeting_coordinators,omitempty"`
	// A list of project auditors by their user IDs
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
	// The date and time the project was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the project was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewGetProjectsResponseBody builds the HTTP response body from the result of
// the "get-projects" endpoint of the "project-service" service.
func NewGetProjectsResponseBody(res *projectservice.GetProjectsResult) *GetProjectsResponseBody {
	body := &GetProjectsResponseBody{}
	if res.Projects != nil {
		body.Projects = make([]*ProjectFullResponseBody, len(res.Projects))
		for i, val := range res.Projects {
			body.Projects[i] = marshalProjectserviceProjectFullToProjectFullResponseBody(val)
		}
	} else {
		body.Projects = []*ProjectFullResponseBody{}
	}
	return body
}

// NewCreateProjectResponseBody builds the HTTP response body from the result
// of the "create-project" endpoint of the "project-service" service.
func NewCreateProjectResponseBody(res *projectservice.ProjectFull) *CreateProjectResponseBody {
	body := &CreateProjectResponseBody{
		UID:                        res.UID,
		Slug:                       res.Slug,
		Description:                res.Description,
		Name:                       res.Name,
		Public:                     res.Public,
		ParentUID:                  res.ParentUID,
		Stage:                      res.Stage,
		Category:                   res.Category,
		CharterURL:                 res.CharterURL,
		LegalEntityType:            res.LegalEntityType,
		LegalEntityName:            res.LegalEntityName,
		LegalParentUID:             res.LegalParentUID,
		EntityDissolutionDate:      res.EntityDissolutionDate,
		EntityFormationDocumentURL: res.EntityFormationDocumentURL,
		AutojoinEnabled:            res.AutojoinEnabled,
		FormationDate:              res.FormationDate,
		LogoURL:                    res.LogoURL,
		RepositoryURL:              res.RepositoryURL,
		WebsiteURL:                 res.WebsiteURL,
		CreatedAt:                  res.CreatedAt,
		UpdatedAt:                  res.UpdatedAt,
		MissionStatement:           res.MissionStatement,
		AnnouncementDate:           res.AnnouncementDate,
	}
	if res.FundingModel != nil {
		body.FundingModel = make([]string, len(res.FundingModel))
		for i, val := range res.FundingModel {
			body.FundingModel[i] = val
		}
	}
	if res.Writers != nil {
		body.Writers = make([]string, len(res.Writers))
		for i, val := range res.Writers {
			body.Writers[i] = val
		}
	}
	if res.MeetingCoordinators != nil {
		body.MeetingCoordinators = make([]string, len(res.MeetingCoordinators))
		for i, val := range res.MeetingCoordinators {
			body.MeetingCoordinators[i] = val
		}
	}
	if res.Auditors != nil {
		body.Auditors = make([]string, len(res.Auditors))
		for i, val := range res.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewGetOneProjectBaseResponseBody builds the HTTP response body from the
// result of the "get-one-project-base" endpoint of the "project-service"
// service.
func NewGetOneProjectBaseResponseBody(res *projectservice.GetOneProjectBaseResult) *GetOneProjectBaseResponseBody {
	body := &GetOneProjectBaseResponseBody{
		UID:                        res.Project.UID,
		Slug:                       res.Project.Slug,
		Description:                res.Project.Description,
		Name:                       res.Project.Name,
		Public:                     res.Project.Public,
		ParentUID:                  res.Project.ParentUID,
		Stage:                      res.Project.Stage,
		Category:                   res.Project.Category,
		CharterURL:                 res.Project.CharterURL,
		LegalEntityType:            res.Project.LegalEntityType,
		LegalEntityName:            res.Project.LegalEntityName,
		LegalParentUID:             res.Project.LegalParentUID,
		EntityDissolutionDate:      res.Project.EntityDissolutionDate,
		EntityFormationDocumentURL: res.Project.EntityFormationDocumentURL,
		AutojoinEnabled:            res.Project.AutojoinEnabled,
		FormationDate:              res.Project.FormationDate,
		LogoURL:                    res.Project.LogoURL,
		RepositoryURL:              res.Project.RepositoryURL,
		WebsiteURL:                 res.Project.WebsiteURL,
		CreatedAt:                  res.Project.CreatedAt,
		UpdatedAt:                  res.Project.UpdatedAt,
	}
	if res.Project.FundingModel != nil {
		body.FundingModel = make([]string, len(res.Project.FundingModel))
		for i, val := range res.Project.FundingModel {
			body.FundingModel[i] = val
		}
	}
	return body
}

// NewGetOneProjectSettingsResponseBody builds the HTTP response body from the
// result of the "get-one-project-settings" endpoint of the "project-service"
// service.
func NewGetOneProjectSettingsResponseBody(res *projectservice.GetOneProjectSettingsResult) *GetOneProjectSettingsResponseBody {
	body := &GetOneProjectSettingsResponseBody{
		UID:              res.ProjectSettings.UID,
		MissionStatement: res.ProjectSettings.MissionStatement,
		AnnouncementDate: res.ProjectSettings.AnnouncementDate,
		CreatedAt:        res.ProjectSettings.CreatedAt,
		UpdatedAt:        res.ProjectSettings.UpdatedAt,
	}
	if res.ProjectSettings.Writers != nil {
		body.Writers = make([]string, len(res.ProjectSettings.Writers))
		for i, val := range res.ProjectSettings.Writers {
			body.Writers[i] = val
		}
	}
	if res.ProjectSettings.MeetingCoordinators != nil {
		body.MeetingCoordinators = make([]string, len(res.ProjectSettings.MeetingCoordinators))
		for i, val := range res.ProjectSettings.MeetingCoordinators {
			body.MeetingCoordinators[i] = val
		}
	}
	if res.ProjectSettings.Auditors != nil {
		body.Auditors = make([]string, len(res.ProjectSettings.Auditors))
		for i, val := range res.ProjectSettings.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewUpdateProjectBaseResponseBody builds the HTTP response body from the
// result of the "update-project-base" endpoint of the "project-service"
// service.
func NewUpdateProjectBaseResponseBody(res *projectservice.ProjectBase) *UpdateProjectBaseResponseBody {
	body := &UpdateProjectBaseResponseBody{
		UID:                        res.UID,
		Slug:                       res.Slug,
		Description:                res.Description,
		Name:                       res.Name,
		Public:                     res.Public,
		ParentUID:                  res.ParentUID,
		Stage:                      res.Stage,
		Category:                   res.Category,
		CharterURL:                 res.CharterURL,
		LegalEntityType:            res.LegalEntityType,
		LegalEntityName:            res.LegalEntityName,
		LegalParentUID:             res.LegalParentUID,
		EntityDissolutionDate:      res.EntityDissolutionDate,
		EntityFormationDocumentURL: res.EntityFormationDocumentURL,
		AutojoinEnabled:            res.AutojoinEnabled,
		FormationDate:              res.FormationDate,
		LogoURL:                    res.LogoURL,
		RepositoryURL:              res.RepositoryURL,
		WebsiteURL:                 res.WebsiteURL,
		CreatedAt:                  res.CreatedAt,
		UpdatedAt:                  res.UpdatedAt,
	}
	if res.FundingModel != nil {
		body.FundingModel = make([]string, len(res.FundingModel))
		for i, val := range res.FundingModel {
			body.FundingModel[i] = val
		}
	}
	return body
}

// NewUpdateProjectSettingsResponseBody builds the HTTP response body from the
// result of the "update-project-settings" endpoint of the "project-service"
// service.
func NewUpdateProjectSettingsResponseBody(res *projectservice.ProjectSettings) *UpdateProjectSettingsResponseBody {
	body := &UpdateProjectSettingsResponseBody{
		UID:              res.UID,
		MissionStatement: res.MissionStatement,
		AnnouncementDate: res.AnnouncementDate,
		CreatedAt:        res.CreatedAt,
		UpdatedAt:        res.UpdatedAt,
	}
	if res.Writers != nil {
		body.Writers = make([]string, len(res.Writers))
		for i, val := range res.Writers {
			body.Writers[i] = val
		}
	}
	if res.MeetingCoordinators != nil {
		body.MeetingCoordinators = make([]string, len(res.MeetingCoordinators))
		for i, val := range res.MeetingCoordinators {
			body.MeetingCoordinators[i] = val
		}
	}
	if res.Auditors != nil {
		body.Auditors = make([]string, len(res.Auditors))
		for i, val := range res.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewGetProjectsBadRequestResponseBody builds the HTTP response body from the
// result of the "get-projects" endpoint of the "project-service" service.
func NewGetProjectsBadRequestResponseBody(res *projectservice.BadRequestError) *GetProjectsBadRequestResponseBody {
	body := &GetProjectsBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetProjectsInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "get-projects" endpoint of the "project-service"
// service.
func NewGetProjectsInternalServerErrorResponseBody(res *projectservice.InternalServerError) *GetProjectsInternalServerErrorResponseBody {
	body := &GetProjectsInternalServerErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetProjectsServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "get-projects" endpoint of the "project-service"
// service.
func NewGetProjectsServiceUnavailableResponseBody(res *projectservice.ServiceUnavailableError) *GetProjectsServiceUnavailableResponseBody {
	body := &GetProjectsServiceUnavailableResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewCreateProjectBadRequestResponseBody builds the HTTP response body from
// the result of the "create-project" endpoint of the "project-service" service.
func NewCreateProjectBadRequestResponseBody(res *projectservice.BadRequestError) *CreateProjectBadRequestResponseBody {
	body := &CreateProjectBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewCreateProjectConflictResponseBody builds the HTTP response body from the
// result of the "create-project" endpoint of the "project-service" service.
func NewCreateProjectConflictResponseBody(res *projectservice.ConflictError) *CreateProjectConflictResponseBody {
	body := &CreateProjectConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewCreateProjectInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "create-project" endpoint of the
// "project-service" service.
func NewCreateProjectInternalServerErrorResponseBody(res *projectservice.InternalServerError) *CreateProjectInternalServerErrorResponseBody {
	body := &CreateProjectInternalServerErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewCreateProjectServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "create-project" endpoint of the "project-service"
// service.
func NewCreateProjectServiceUnavailableResponseBody(res *projectservice.ServiceUnavailableError) *CreateProjectServiceUnavailableResponseBody {
	body := &CreateProjectServiceUnavailableResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetOneProjectBaseInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "get-one-project-base" endpoint of the
// "project-service" service.
func NewGetOneProjectBaseInternalServerErrorResponseBody(res *projectservice.InternalServerError) *GetOneProjectBaseInternalServerErrorResponseBody {
	body := &GetOneProjectBaseInternalServerErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetOneProjectBaseNotFoundResponseBody builds the HTTP response body from
// the result of the "get-one-project-base" endpoint of the "project-service"
// service.
func NewGetOneProjectBaseNotFoundResponseBody(res *projectservice.NotFoundError) *GetOneProjectBaseNotFoundResponseBody {
	body := &GetOneProjectBaseNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetOneProjectBaseServiceUnavailableResponseBody builds the HTTP response
// body from the result of the "get-one-project-base" endpoint of the
// "project-service" service.
func NewGetOneProjectBaseServiceUnavailableResponseBody(res *projectservice.ServiceUnavailableError) *GetOneProjectBaseServiceUnavailableResponseBody {
	body := &GetOneProjectBaseServiceUnavailableResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetOneProjectSettingsInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "get-one-project-settings" endpoint of
// the "project-service" service.
func NewGetOneProjectSettingsInternalServerErrorResponseBody(res *projectservice.InternalServerError) *GetOneProjectSettingsInternalServerErrorResponseBody {
	body := &GetOneProjectSettingsInternalServerErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetOneProjectSettingsNotFoundResponseBody builds the HTTP response body
// from the result of the "get-one-project-settings" endpoint of the
// "project-service" service.
func NewGetOneProjectSettingsNotFoundResponseBody(res *projectservice.NotFoundError) *GetOneProjectSettingsNotFoundResponseBody {
	body := &GetOneProjectSettingsNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetOneProjectSettingsServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "get-one-project-settings" endpoint of
// the "project-service" service.
func NewGetOneProjectSettingsServiceUnavailableResponseBody(res *projectservice.ServiceUnavailableError) *GetOneProjectSettingsServiceUnavailableResponseBody {
	body := &GetOneProjectSettingsServiceUnavailableResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewUpdateProjectBaseBadRequestResponseBody builds the HTTP response body
// from the result of the "update-project-base" endpoint of the
// "project-service" service.
func NewUpdateProjectBaseBadRequestResponseBody(res *projectservice.BadRequestError) *UpdateProjectBaseBadRequestResponseBody {
	body := &UpdateProjectBaseBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewUpdateProjectBaseConflictResponseBody builds the HTTP response body from
// the result of the "update-project-base" endpoint of the "project-service"
// service.
func NewUpdateProjectBaseConflictResponseBody(res *projectservice.ConflictError) *UpdateProjectBaseConflictResponseBody {
	body := &UpdateProjectBaseConflictResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewUpdateProjectBaseInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "update-project-base" endpoint of the
// "project-service" service.
func NewUpdateProjectBaseInternalServerErrorResponseBody(res *projectservice.InternalServerError) *UpdateProjectBaseInternalServerErrorResponseBody {
	body := &UpdateProjectBaseInternalServerErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewUpdateProjectBaseNotFoundResponseBody builds the HTTP response body from
// the result of the "update-project-base" endpoint of the "project-service"
// service.
func NewUpdateProjectBaseNotFoundResponseBody(res *projectservice.NotFoundError) *UpdateProjectBaseNotFoundResponseBody {
	body := &UpdateProjectBaseNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewUpdateProjectBaseServiceUnavailableResponseBody builds the HTTP response
// body from the result of the "update-project-base" endpoint of the
// "project-service" service.
func NewUpdateProjectBaseServiceUnavailableResponseBody(res *projectservice.ServiceUnavailableError) *UpdateProjectBaseServiceUnavailableResponseBody {
	body := &UpdateProjectBaseServiceUnavailableResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewUpdateProjectSettingsBadRequestResponseBody builds the HTTP response body
// from the result of the "update-project-settings" endpoint of the
// "project-service" service.
func NewUpdateProjectSettingsBadRequestResponseBody(res *projectservice.BadRequestError) *UpdateProjectSettingsBadRequestResponseBody {
	body := &UpdateProjectSettingsBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewUpdateProjectSettingsInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "update-project-settings" endpoint of
// the "project-service" service.
func NewUpdateProjectSettingsInternalServerErrorResponseBody(res *projectservice.InternalServerError) *UpdateProjectSettingsInternalServerErrorResponseBody {
	body := &UpdateProjectSettingsInternalServerErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewUpdateProjectSettingsNotFoundResponseBody builds the HTTP response body
// from the result of the "update-project-settings" endpoint of the
// "project-service" service.
func NewUpdateProjectSettingsNotFoundResponseBody(res *projectservice.NotFoundError) *UpdateProjectSettingsNotFoundResponseBody {
	body := &UpdateProjectSettingsNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewUpdateProjectSettingsServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "update-project-settings" endpoint of
// the "project-service" service.
func NewUpdateProjectSettingsServiceUnavailableResponseBody(res *projectservice.ServiceUnavailableError) *UpdateProjectSettingsServiceUnavailableResponseBody {
	body := &UpdateProjectSettingsServiceUnavailableResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewDeleteProjectBadRequestResponseBody builds the HTTP response body from
// the result of the "delete-project" endpoint of the "project-service" service.
func NewDeleteProjectBadRequestResponseBody(res *projectservice.BadRequestError) *DeleteProjectBadRequestResponseBody {
	body := &DeleteProjectBadRequestResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewDeleteProjectInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "delete-project" endpoint of the
// "project-service" service.
func NewDeleteProjectInternalServerErrorResponseBody(res *projectservice.InternalServerError) *DeleteProjectInternalServerErrorResponseBody {
	body := &DeleteProjectInternalServerErrorResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewDeleteProjectNotFoundResponseBody builds the HTTP response body from the
// result of the "delete-project" endpoint of the "project-service" service.
func NewDeleteProjectNotFoundResponseBody(res *projectservice.NotFoundError) *DeleteProjectNotFoundResponseBody {
	body := &DeleteProjectNotFoundResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewDeleteProjectServiceUnavailableResponseBody builds the HTTP response body
// from the result of the "delete-project" endpoint of the "project-service"
// service.
func NewDeleteProjectServiceUnavailableResponseBody(res *projectservice.ServiceUnavailableError) *DeleteProjectServiceUnavailableResponseBody {
	body := &DeleteProjectServiceUnavailableResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewReadyzServiceUnavailableResponseBody builds the HTTP response body from
// the result of the "readyz" endpoint of the "project-service" service.
func NewReadyzServiceUnavailableResponseBody(res *projectservice.ServiceUnavailableError) *ReadyzServiceUnavailableResponseBody {
	body := &ReadyzServiceUnavailableResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetProjectsPayload builds a project-service service get-projects endpoint
// payload.
func NewGetProjectsPayload(version *string, bearerToken *string) *projectservice.GetProjectsPayload {
	v := &projectservice.GetProjectsPayload{}
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewCreateProjectPayload builds a project-service service create-project
// endpoint payload.
func NewCreateProjectPayload(body *CreateProjectRequestBody, version *string, bearerToken *string) *projectservice.CreateProjectPayload {
	v := &projectservice.CreateProjectPayload{
		Slug:                       *body.Slug,
		Description:                *body.Description,
		Name:                       *body.Name,
		Public:                     body.Public,
		ParentUID:                  *body.ParentUID,
		Stage:                      body.Stage,
		Category:                   body.Category,
		CharterURL:                 body.CharterURL,
		LegalEntityType:            body.LegalEntityType,
		LegalEntityName:            body.LegalEntityName,
		LegalParentUID:             body.LegalParentUID,
		EntityDissolutionDate:      body.EntityDissolutionDate,
		EntityFormationDocumentURL: body.EntityFormationDocumentURL,
		AutojoinEnabled:            body.AutojoinEnabled,
		FormationDate:              body.FormationDate,
		LogoURL:                    body.LogoURL,
		RepositoryURL:              body.RepositoryURL,
		WebsiteURL:                 body.WebsiteURL,
		AnnouncementDate:           body.AnnouncementDate,
		MissionStatement:           body.MissionStatement,
	}
	if body.FundingModel != nil {
		v.FundingModel = make([]string, len(body.FundingModel))
		for i, val := range body.FundingModel {
			v.FundingModel[i] = val
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.MeetingCoordinators != nil {
		v.MeetingCoordinators = make([]string, len(body.MeetingCoordinators))
		for i, val := range body.MeetingCoordinators {
			v.MeetingCoordinators[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewGetOneProjectBasePayload builds a project-service service
// get-one-project-base endpoint payload.
func NewGetOneProjectBasePayload(uid string, version *string, bearerToken *string) *projectservice.GetOneProjectBasePayload {
	v := &projectservice.GetOneProjectBasePayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewGetOneProjectSettingsPayload builds a project-service service
// get-one-project-settings endpoint payload.
func NewGetOneProjectSettingsPayload(uid string, version *string, bearerToken *string) *projectservice.GetOneProjectSettingsPayload {
	v := &projectservice.GetOneProjectSettingsPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewUpdateProjectBasePayload builds a project-service service
// update-project-base endpoint payload.
func NewUpdateProjectBasePayload(body *UpdateProjectBaseRequestBody, uid string, version *string, bearerToken *string, etag *string) *projectservice.UpdateProjectBasePayload {
	v := &projectservice.UpdateProjectBasePayload{
		Slug:                       *body.Slug,
		Description:                *body.Description,
		Name:                       *body.Name,
		Public:                     body.Public,
		ParentUID:                  *body.ParentUID,
		Stage:                      body.Stage,
		Category:                   body.Category,
		CharterURL:                 body.CharterURL,
		LegalEntityType:            body.LegalEntityType,
		LegalEntityName:            body.LegalEntityName,
		LegalParentUID:             body.LegalParentUID,
		EntityDissolutionDate:      body.EntityDissolutionDate,
		EntityFormationDocumentURL: body.EntityFormationDocumentURL,
		AutojoinEnabled:            body.AutojoinEnabled,
		FormationDate:              body.FormationDate,
		LogoURL:                    body.LogoURL,
		RepositoryURL:              body.RepositoryURL,
		WebsiteURL:                 body.WebsiteURL,
	}
	if body.FundingModel != nil {
		v.FundingModel = make([]string, len(body.FundingModel))
		for i, val := range body.FundingModel {
			v.FundingModel[i] = val
		}
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v
}

// NewUpdateProjectSettingsPayload builds a project-service service
// update-project-settings endpoint payload.
func NewUpdateProjectSettingsPayload(body *UpdateProjectSettingsRequestBody, uid string, version *string, bearerToken *string, etag *string) *projectservice.UpdateProjectSettingsPayload {
	v := &projectservice.UpdateProjectSettingsPayload{
		MissionStatement: body.MissionStatement,
		AnnouncementDate: body.AnnouncementDate,
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.MeetingCoordinators != nil {
		v.MeetingCoordinators = make([]string, len(body.MeetingCoordinators))
		for i, val := range body.MeetingCoordinators {
			v.MeetingCoordinators[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v
}

// NewDeleteProjectPayload builds a project-service service delete-project
// endpoint payload.
func NewDeleteProjectPayload(uid string, version *string, bearerToken *string, etag *string) *projectservice.DeleteProjectPayload {
	v := &projectservice.DeleteProjectPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v
}

// ValidateCreateProjectRequestBody runs the validations defined on
// Create-ProjectRequestBody
func ValidateCreateProjectRequestBody(body *CreateProjectRequestBody) (err error) {
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ParentUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("parent_uid", "body"))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", *body.Slug, goa.FormatRegexp))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.Stage != nil {
		if !(*body.Stage == "Formation - Exploratory" || *body.Stage == "Formation - Engaged" || *body.Stage == "Active" || *body.Stage == "Archived" || *body.Stage == "Formation - On Hold" || *body.Stage == "Formation - Disengaged" || *body.Stage == "Formation - Confidential" || *body.Stage == "Prospect") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.stage", *body.Stage, []any{"Formation - Exploratory", "Formation - Engaged", "Active", "Archived", "Formation - On Hold", "Formation - Disengaged", "Formation - Confidential", "Prospect"}))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Active" || *body.Category == "Adopted" || *body.Category == "Archived" || *body.Category == "At-Large" || *body.Category == "Early Adoption" || *body.Category == "Emeritus" || *body.Category == "Graduated" || *body.Category == "Growth" || *body.Category == "Idle" || *body.Category == "Impact" || *body.Category == "Incubating" || *body.Category == "Kanister" || *body.Category == "Mature" || *body.Category == "Pre-LFESS" || *body.Category == "Sandbox" || *body.Category == "SIG" || *body.Category == "Standards" || *body.Category == "TAC" || *body.Category == "Working Group" || *body.Category == "TAG" || *body.Category == "NONE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Active", "Adopted", "Archived", "At-Large", "Early Adoption", "Emeritus", "Graduated", "Growth", "Idle", "Impact", "Incubating", "Kanister", "Mature", "Pre-LFESS", "Sandbox", "SIG", "Standards", "TAC", "Working Group", "TAG", "NONE"}))
		}
	}
	for _, e := range body.FundingModel {
		if !(e == "Crowdfunding" || e == "Membership" || e == "Alternate Funding") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.funding_model[*]", e, []any{"Crowdfunding", "Membership", "Alternate Funding"}))
		}
	}
	if body.CharterURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.charter_url", *body.CharterURL, goa.FormatURI))
	}
	if body.LegalEntityType != nil {
		if !(*body.LegalEntityType == "Subproject" || *body.LegalEntityType == "Incorporated Entity" || *body.LegalEntityType == "Series LLC" || *body.LegalEntityType == "Unofficial Subproject" || *body.LegalEntityType == "Internal Allocation" || *body.LegalEntityType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.legal_entity_type", *body.LegalEntityType, []any{"Subproject", "Incorporated Entity", "Series LLC", "Unofficial Subproject", "Internal Allocation", "None"}))
		}
	}
	if body.LegalParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.legal_parent_uid", *body.LegalParentUID, goa.FormatUUID))
	}
	if body.EntityDissolutionDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_dissolution_date", *body.EntityDissolutionDate, goa.FormatDate))
	}
	if body.EntityFormationDocumentURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_formation_document_url", *body.EntityFormationDocumentURL, goa.FormatURI))
	}
	if body.FormationDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.formation_date", *body.FormationDate, goa.FormatDate))
	}
	if body.LogoURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.logo_url", *body.LogoURL, goa.FormatURI))
	}
	if body.RepositoryURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.repository_url", *body.RepositoryURL, goa.FormatURI))
	}
	if body.WebsiteURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website_url", *body.WebsiteURL, goa.FormatURI))
	}
	if body.AnnouncementDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.announcement_date", *body.AnnouncementDate, goa.FormatDate))
	}
	return
}

// ValidateUpdateProjectBaseRequestBody runs the validations defined on
// Update-Project-BaseRequestBody
func ValidateUpdateProjectBaseRequestBody(body *UpdateProjectBaseRequestBody) (err error) {
	if body.Slug == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("slug", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ParentUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("parent_uid", "body"))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.slug", *body.Slug, goa.FormatRegexp))
	}
	if body.Slug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.slug", *body.Slug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.Stage != nil {
		if !(*body.Stage == "Formation - Exploratory" || *body.Stage == "Formation - Engaged" || *body.Stage == "Active" || *body.Stage == "Archived" || *body.Stage == "Formation - On Hold" || *body.Stage == "Formation - Disengaged" || *body.Stage == "Formation - Confidential" || *body.Stage == "Prospect") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.stage", *body.Stage, []any{"Formation - Exploratory", "Formation - Engaged", "Active", "Archived", "Formation - On Hold", "Formation - Disengaged", "Formation - Confidential", "Prospect"}))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Active" || *body.Category == "Adopted" || *body.Category == "Archived" || *body.Category == "At-Large" || *body.Category == "Early Adoption" || *body.Category == "Emeritus" || *body.Category == "Graduated" || *body.Category == "Growth" || *body.Category == "Idle" || *body.Category == "Impact" || *body.Category == "Incubating" || *body.Category == "Kanister" || *body.Category == "Mature" || *body.Category == "Pre-LFESS" || *body.Category == "Sandbox" || *body.Category == "SIG" || *body.Category == "Standards" || *body.Category == "TAC" || *body.Category == "Working Group" || *body.Category == "TAG" || *body.Category == "NONE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Active", "Adopted", "Archived", "At-Large", "Early Adoption", "Emeritus", "Graduated", "Growth", "Idle", "Impact", "Incubating", "Kanister", "Mature", "Pre-LFESS", "Sandbox", "SIG", "Standards", "TAC", "Working Group", "TAG", "NONE"}))
		}
	}
	for _, e := range body.FundingModel {
		if !(e == "Crowdfunding" || e == "Membership" || e == "Alternate Funding") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.funding_model[*]", e, []any{"Crowdfunding", "Membership", "Alternate Funding"}))
		}
	}
	if body.CharterURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.charter_url", *body.CharterURL, goa.FormatURI))
	}
	if body.LegalEntityType != nil {
		if !(*body.LegalEntityType == "Subproject" || *body.LegalEntityType == "Incorporated Entity" || *body.LegalEntityType == "Series LLC" || *body.LegalEntityType == "Unofficial Subproject" || *body.LegalEntityType == "Internal Allocation" || *body.LegalEntityType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.legal_entity_type", *body.LegalEntityType, []any{"Subproject", "Incorporated Entity", "Series LLC", "Unofficial Subproject", "Internal Allocation", "None"}))
		}
	}
	if body.LegalParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.legal_parent_uid", *body.LegalParentUID, goa.FormatUUID))
	}
	if body.EntityDissolutionDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_dissolution_date", *body.EntityDissolutionDate, goa.FormatDate))
	}
	if body.EntityFormationDocumentURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity_formation_document_url", *body.EntityFormationDocumentURL, goa.FormatURI))
	}
	if body.FormationDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.formation_date", *body.FormationDate, goa.FormatDate))
	}
	if body.LogoURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.logo_url", *body.LogoURL, goa.FormatURI))
	}
	if body.RepositoryURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.repository_url", *body.RepositoryURL, goa.FormatURI))
	}
	if body.WebsiteURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website_url", *body.WebsiteURL, goa.FormatURI))
	}
	return
}

// ValidateUpdateProjectSettingsRequestBody runs the validations defined on
// Update-Project-SettingsRequestBody
func ValidateUpdateProjectSettingsRequestBody(body *UpdateProjectSettingsRequestBody) (err error) {
	if body.AnnouncementDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.announcement_date", *body.AnnouncementDate, goa.FormatDate))
	}
	return
}
