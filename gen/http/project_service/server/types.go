// Code generated by goa v3.20.1, DO NOT EDIT.
//
// project-service HTTP server types
//
// Command:
// $ goa gen lfx-v2-project-service/design

package server

import (
	projectservice "lfx-v2-project-service/gen/project_service"

	goa "goa.design/goa/v3/pkg"
)

// GetProjectsResponseBody is the type of the "project-service" service
// "get-projects" endpoint HTTP response body.
type GetProjectsResponseBody struct {
	// Resources found
	Projects []*ProjectResponseBody `form:"projects" json:"projects" xml:"projects"`
	// Opaque token if more results are available
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty" xml:"page_token,omitempty"`
}

// GetProjectsBadRequestResponseBody is the type of the "project-service"
// service "get-projects" endpoint HTTP response body for the "BadRequest"
// error.
type GetProjectsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ReadyzNotReadyResponseBody is the type of the "project-service" service
// "readyz" endpoint HTTP response body for the "NotReady" error.
type ReadyzNotReadyResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	// Project ID -- v2 id, not related to v1 id directly
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// A list of project managers
	Managers []string `form:"managers,omitempty" json:"managers,omitempty" xml:"managers,omitempty"`
}

// NewGetProjectsResponseBody builds the HTTP response body from the result of
// the "get-projects" endpoint of the "project-service" service.
func NewGetProjectsResponseBody(res *projectservice.GetProjectsResult) *GetProjectsResponseBody {
	body := &GetProjectsResponseBody{
		PageToken: res.PageToken,
	}
	if res.Projects != nil {
		body.Projects = make([]*ProjectResponseBody, len(res.Projects))
		for i, val := range res.Projects {
			body.Projects[i] = marshalProjectserviceProjectToProjectResponseBody(val)
		}
	} else {
		body.Projects = []*ProjectResponseBody{}
	}
	return body
}

// NewGetProjectsBadRequestResponseBody builds the HTTP response body from the
// result of the "get-projects" endpoint of the "project-service" service.
func NewGetProjectsBadRequestResponseBody(res *goa.ServiceError) *GetProjectsBadRequestResponseBody {
	body := &GetProjectsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewReadyzNotReadyResponseBody builds the HTTP response body from the result
// of the "readyz" endpoint of the "project-service" service.
func NewReadyzNotReadyResponseBody(res *goa.ServiceError) *ReadyzNotReadyResponseBody {
	body := &ReadyzNotReadyResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetProjectsPayload builds a project-service service get-projects endpoint
// payload.
func NewGetProjectsPayload(version *string, pageToken *string) *projectservice.GetProjectsPayload {
	v := &projectservice.GetProjectsPayload{}
	v.Version = version
	v.PageToken = pageToken

	return v
}
