// Code generated by goa v3.20.1, DO NOT EDIT.
//
// project-service HTTP client encoders and decoders
//
// Command:
// $ goa gen lfx-v2-project-service/design

package client

import (
	"bytes"
	"context"
	"io"
	projectservice "lfx-v2-project-service/gen/project_service"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetProjectsRequest instantiates a HTTP request object with method and
// path set to call the "project-service" service "get-projects" endpoint
func (c *Client) BuildGetProjectsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetProjectsProjectServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project-service", "get-projects", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetProjectsRequest returns an encoder for requests sent to the
// project-service get-projects server.
func EncodeGetProjectsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*projectservice.GetProjectsPayload)
		if !ok {
			return goahttp.ErrInvalidType("project-service", "get-projects", "*projectservice.GetProjectsPayload", v)
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		if p.PageToken != nil {
			values.Add("page_token", *p.PageToken)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetProjectsResponse returns a decoder for responses returned by the
// project-service get-projects endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetProjectsResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeGetProjectsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetProjectsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "get-projects", err)
			}
			err = ValidateGetProjectsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "get-projects", err)
			}
			var (
				cacheControl *string
			)
			cacheControlRaw := resp.Header.Get("Cache-Control")
			if cacheControlRaw != "" {
				cacheControl = &cacheControlRaw
			}
			res := NewGetProjectsResultOK(&body, cacheControl)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetProjectsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "get-projects", err)
			}
			err = ValidateGetProjectsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "get-projects", err)
			}
			return nil, NewGetProjectsBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project-service", "get-projects", resp.StatusCode, string(body))
		}
	}
}

// BuildReadyzRequest instantiates a HTTP request object with method and path
// set to call the "project-service" service "readyz" endpoint
func (c *Client) BuildReadyzRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReadyzProjectServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project-service", "readyz", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeReadyzResponse returns a decoder for responses returned by the
// project-service readyz endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeReadyzResponse may return the following errors:
//   - "NotReady" (type *goa.ServiceError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeReadyzResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "readyz", err)
			}
			return body, nil
		case http.StatusServiceUnavailable:
			var (
				body ReadyzNotReadyResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "readyz", err)
			}
			err = ValidateReadyzNotReadyResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project-service", "readyz", err)
			}
			return nil, NewReadyzNotReady(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project-service", "readyz", resp.StatusCode, string(body))
		}
	}
}

// BuildLivezRequest instantiates a HTTP request object with method and path
// set to call the "project-service" service "livez" endpoint
func (c *Client) BuildLivezRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LivezProjectServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project-service", "livez", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeLivezResponse returns a decoder for responses returned by the
// project-service livez endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeLivezResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project-service", "livez", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project-service", "livez", resp.StatusCode, string(body))
		}
	}
}

// unmarshalProjectResponseBodyToProjectserviceProject builds a value of type
// *projectservice.Project from a value of type *ProjectResponseBody.
func unmarshalProjectResponseBodyToProjectserviceProject(v *ProjectResponseBody) *projectservice.Project {
	res := &projectservice.Project{
		ID:          v.ID,
		Slug:        v.Slug,
		Description: v.Description,
		Name:        v.Name,
	}
	if v.Managers != nil {
		res.Managers = make([]string, len(v.Managers))
		for i, val := range v.Managers {
			res.Managers[i] = val
		}
	}

	return res
}
