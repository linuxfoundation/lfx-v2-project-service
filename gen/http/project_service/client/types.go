// Code generated by goa v3.20.1, DO NOT EDIT.
//
// project-service HTTP client types
//
// Command:
// $ goa gen lfx-v2-project-service/design

package client

import (
	projectservice "lfx-v2-project-service/gen/project_service"

	goa "goa.design/goa/v3/pkg"
)

// GetProjectsResponseBody is the type of the "project-service" service
// "get-projects" endpoint HTTP response body.
type GetProjectsResponseBody struct {
	// Resources found
	Projects []*ProjectResponseBody `form:"projects,omitempty" json:"projects,omitempty" xml:"projects,omitempty"`
	// Opaque token if more results are available
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty" xml:"page_token,omitempty"`
}

// GetProjectsBadRequestResponseBody is the type of the "project-service"
// service "get-projects" endpoint HTTP response body for the "BadRequest"
// error.
type GetProjectsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ReadyzNotReadyResponseBody is the type of the "project-service" service
// "readyz" endpoint HTTP response body for the "NotReady" error.
type ReadyzNotReadyResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ProjectResponseBody is used to define fields on response body types.
type ProjectResponseBody struct {
	// Project ID -- v2 id, not related to v1 id directly
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Project slug, a short slugified name of the project
	Slug *string `form:"slug,omitempty" json:"slug,omitempty" xml:"slug,omitempty"`
	// A description of the project
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The pretty name of the project
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// A list of project managers
	Managers []string `form:"managers,omitempty" json:"managers,omitempty" xml:"managers,omitempty"`
}

// NewGetProjectsResultOK builds a "project-service" service "get-projects"
// endpoint result from a HTTP "OK" response.
func NewGetProjectsResultOK(body *GetProjectsResponseBody, cacheControl *string) *projectservice.GetProjectsResult {
	v := &projectservice.GetProjectsResult{
		PageToken: body.PageToken,
	}
	v.Projects = make([]*projectservice.Project, len(body.Projects))
	for i, val := range body.Projects {
		v.Projects[i] = unmarshalProjectResponseBodyToProjectserviceProject(val)
	}
	v.CacheControl = cacheControl

	return v
}

// NewGetProjectsBadRequest builds a project-service service get-projects
// endpoint BadRequest error.
func NewGetProjectsBadRequest(body *GetProjectsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewReadyzNotReady builds a project-service service readyz endpoint NotReady
// error.
func NewReadyzNotReady(body *ReadyzNotReadyResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetProjectsResponseBody runs the validations defined on
// Get-ProjectsResponseBody
func ValidateGetProjectsResponseBody(body *GetProjectsResponseBody) (err error) {
	if body.Projects == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("projects", "body"))
	}
	return
}

// ValidateGetProjectsBadRequestResponseBody runs the validations defined on
// get-projects_BadRequest_response_body
func ValidateGetProjectsBadRequestResponseBody(body *GetProjectsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateReadyzNotReadyResponseBody runs the validations defined on
// readyz_NotReady_response_body
func ValidateReadyzNotReadyResponseBody(body *ReadyzNotReadyResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
