// Code generated by goa v3.20.1, DO NOT EDIT.
//
// project-service HTTP client CLI support package
//
// Command:
// $ goa gen lfx-v2-project-service/design

package cli

import (
	"flag"
	"fmt"
	projectservicec "lfx-v2-project-service/gen/http/project_service/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `project-service (get-projects|readyz|livez)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` project-service get-projects --version "1" --page-token "****"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		projectServiceFlags = flag.NewFlagSet("project-service", flag.ContinueOnError)

		projectServiceGetProjectsFlags         = flag.NewFlagSet("get-projects", flag.ExitOnError)
		projectServiceGetProjectsVersionFlag   = projectServiceGetProjectsFlags.String("version", "", "")
		projectServiceGetProjectsPageTokenFlag = projectServiceGetProjectsFlags.String("page-token", "", "")

		projectServiceReadyzFlags = flag.NewFlagSet("readyz", flag.ExitOnError)

		projectServiceLivezFlags = flag.NewFlagSet("livez", flag.ExitOnError)
	)
	projectServiceFlags.Usage = projectServiceUsage
	projectServiceGetProjectsFlags.Usage = projectServiceGetProjectsUsage
	projectServiceReadyzFlags.Usage = projectServiceReadyzUsage
	projectServiceLivezFlags.Usage = projectServiceLivezUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "project-service":
			svcf = projectServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "project-service":
			switch epn {
			case "get-projects":
				epf = projectServiceGetProjectsFlags

			case "readyz":
				epf = projectServiceReadyzFlags

			case "livez":
				epf = projectServiceLivezFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "project-service":
			c := projectservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-projects":
				endpoint = c.GetProjects()
				data, err = projectservicec.BuildGetProjectsPayload(*projectServiceGetProjectsVersionFlag, *projectServiceGetProjectsPageTokenFlag)
			case "readyz":
				endpoint = c.Readyz()
			case "livez":
				endpoint = c.Livez()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// projectServiceUsage displays the usage of the project-service command and
// its subcommands.
func projectServiceUsage() {
	fmt.Fprintf(os.Stderr, `The project service provides LFX Project resources.
Usage:
    %[1]s [globalflags] project-service COMMAND [flags]

COMMAND:
    get-projects: Get all projects.
    readyz: Check if the service is able to take inbound requests.
    livez: Check if the service is alive.

Additional help:
    %[1]s project-service COMMAND --help
`, os.Args[0])
}
func projectServiceGetProjectsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] project-service get-projects -version STRING -page-token STRING

Get all projects.
    -version STRING: 
    -page-token STRING: 

Example:
    %[1]s project-service get-projects --version "1" --page-token "****"
`, os.Args[0])
}

func projectServiceReadyzUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] project-service readyz

Check if the service is able to take inbound requests.

Example:
    %[1]s project-service readyz
`, os.Args[0])
}

func projectServiceLivezUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] project-service livez

Check if the service is alive.

Example:
    %[1]s project-service livez
`, os.Args[0])
}
