// Code generated by goa v3.21.1, DO NOT EDIT.
//
// project-service client HTTP transport
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-project-service/api/project/v1/design -o
// api/project/v1

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the project-service service endpoint HTTP clients.
type Client struct {
	// GetProjects Doer is the HTTP client used to make requests to the
	// get-projects endpoint.
	GetProjectsDoer goahttp.Doer

	// CreateProject Doer is the HTTP client used to make requests to the
	// create-project endpoint.
	CreateProjectDoer goahttp.Doer

	// GetOneProjectBase Doer is the HTTP client used to make requests to the
	// get-one-project-base endpoint.
	GetOneProjectBaseDoer goahttp.Doer

	// GetOneProjectSettings Doer is the HTTP client used to make requests to the
	// get-one-project-settings endpoint.
	GetOneProjectSettingsDoer goahttp.Doer

	// UpdateProjectBase Doer is the HTTP client used to make requests to the
	// update-project-base endpoint.
	UpdateProjectBaseDoer goahttp.Doer

	// UpdateProjectSettings Doer is the HTTP client used to make requests to the
	// update-project-settings endpoint.
	UpdateProjectSettingsDoer goahttp.Doer

	// DeleteProject Doer is the HTTP client used to make requests to the
	// delete-project endpoint.
	DeleteProjectDoer goahttp.Doer

	// Readyz Doer is the HTTP client used to make requests to the readyz endpoint.
	ReadyzDoer goahttp.Doer

	// Livez Doer is the HTTP client used to make requests to the livez endpoint.
	LivezDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the project-service service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetProjectsDoer:           doer,
		CreateProjectDoer:         doer,
		GetOneProjectBaseDoer:     doer,
		GetOneProjectSettingsDoer: doer,
		UpdateProjectBaseDoer:     doer,
		UpdateProjectSettingsDoer: doer,
		DeleteProjectDoer:         doer,
		ReadyzDoer:                doer,
		LivezDoer:                 doer,
		RestoreResponseBody:       restoreBody,
		scheme:                    scheme,
		host:                      host,
		decoder:                   dec,
		encoder:                   enc,
	}
}

// GetProjects returns an endpoint that makes HTTP requests to the
// project-service service get-projects server.
func (c *Client) GetProjects() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetProjectsRequest(c.encoder)
		decodeResponse = DecodeGetProjectsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetProjectsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetProjectsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project-service", "get-projects", err)
		}
		return decodeResponse(resp)
	}
}

// CreateProject returns an endpoint that makes HTTP requests to the
// project-service service create-project server.
func (c *Client) CreateProject() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateProjectRequest(c.encoder)
		decodeResponse = DecodeCreateProjectResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateProjectRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateProjectDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project-service", "create-project", err)
		}
		return decodeResponse(resp)
	}
}

// GetOneProjectBase returns an endpoint that makes HTTP requests to the
// project-service service get-one-project-base server.
func (c *Client) GetOneProjectBase() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetOneProjectBaseRequest(c.encoder)
		decodeResponse = DecodeGetOneProjectBaseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetOneProjectBaseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOneProjectBaseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project-service", "get-one-project-base", err)
		}
		return decodeResponse(resp)
	}
}

// GetOneProjectSettings returns an endpoint that makes HTTP requests to the
// project-service service get-one-project-settings server.
func (c *Client) GetOneProjectSettings() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetOneProjectSettingsRequest(c.encoder)
		decodeResponse = DecodeGetOneProjectSettingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetOneProjectSettingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOneProjectSettingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project-service", "get-one-project-settings", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateProjectBase returns an endpoint that makes HTTP requests to the
// project-service service update-project-base server.
func (c *Client) UpdateProjectBase() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateProjectBaseRequest(c.encoder)
		decodeResponse = DecodeUpdateProjectBaseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateProjectBaseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateProjectBaseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project-service", "update-project-base", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateProjectSettings returns an endpoint that makes HTTP requests to the
// project-service service update-project-settings server.
func (c *Client) UpdateProjectSettings() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateProjectSettingsRequest(c.encoder)
		decodeResponse = DecodeUpdateProjectSettingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateProjectSettingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateProjectSettingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project-service", "update-project-settings", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteProject returns an endpoint that makes HTTP requests to the
// project-service service delete-project server.
func (c *Client) DeleteProject() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteProjectRequest(c.encoder)
		decodeResponse = DecodeDeleteProjectResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteProjectRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteProjectDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project-service", "delete-project", err)
		}
		return decodeResponse(resp)
	}
}

// Readyz returns an endpoint that makes HTTP requests to the project-service
// service readyz server.
func (c *Client) Readyz() goa.Endpoint {
	var (
		decodeResponse = DecodeReadyzResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildReadyzRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReadyzDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project-service", "readyz", err)
		}
		return decodeResponse(resp)
	}
}

// Livez returns an endpoint that makes HTTP requests to the project-service
// service livez server.
func (c *Client) Livez() goa.Endpoint {
	var (
		decodeResponse = DecodeLivezResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLivezRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LivezDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("project-service", "livez", err)
		}
		return decodeResponse(resp)
	}
}
