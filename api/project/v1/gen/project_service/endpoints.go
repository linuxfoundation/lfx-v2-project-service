// Code generated by goa v3.21.1, DO NOT EDIT.
//
// project-service endpoints
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-project-service/api/project/v1/design -o
// api/project/v1

package projectservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "project-service" service endpoints.
type Endpoints struct {
	GetProjects           goa.Endpoint
	CreateProject         goa.Endpoint
	GetOneProjectBase     goa.Endpoint
	GetOneProjectSettings goa.Endpoint
	UpdateProjectBase     goa.Endpoint
	UpdateProjectSettings goa.Endpoint
	DeleteProject         goa.Endpoint
	Readyz                goa.Endpoint
	Livez                 goa.Endpoint
}

// NewEndpoints wraps the methods of the "project-service" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		GetProjects:           NewGetProjectsEndpoint(s, a.JWTAuth),
		CreateProject:         NewCreateProjectEndpoint(s, a.JWTAuth),
		GetOneProjectBase:     NewGetOneProjectBaseEndpoint(s, a.JWTAuth),
		GetOneProjectSettings: NewGetOneProjectSettingsEndpoint(s, a.JWTAuth),
		UpdateProjectBase:     NewUpdateProjectBaseEndpoint(s, a.JWTAuth),
		UpdateProjectSettings: NewUpdateProjectSettingsEndpoint(s, a.JWTAuth),
		DeleteProject:         NewDeleteProjectEndpoint(s, a.JWTAuth),
		Readyz:                NewReadyzEndpoint(s),
		Livez:                 NewLivezEndpoint(s),
	}
}

// Use applies the given middleware to all the "project-service" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetProjects = m(e.GetProjects)
	e.CreateProject = m(e.CreateProject)
	e.GetOneProjectBase = m(e.GetOneProjectBase)
	e.GetOneProjectSettings = m(e.GetOneProjectSettings)
	e.UpdateProjectBase = m(e.UpdateProjectBase)
	e.UpdateProjectSettings = m(e.UpdateProjectSettings)
	e.DeleteProject = m(e.DeleteProject)
	e.Readyz = m(e.Readyz)
	e.Livez = m(e.Livez)
}

// NewGetProjectsEndpoint returns an endpoint function that calls the method
// "get-projects" of service "project-service".
func NewGetProjectsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetProjectsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetProjects(ctx, p)
	}
}

// NewCreateProjectEndpoint returns an endpoint function that calls the method
// "create-project" of service "project-service".
func NewCreateProjectEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateProjectPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateProject(ctx, p)
	}
}

// NewGetOneProjectBaseEndpoint returns an endpoint function that calls the
// method "get-one-project-base" of service "project-service".
func NewGetOneProjectBaseEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetOneProjectBasePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetOneProjectBase(ctx, p)
	}
}

// NewGetOneProjectSettingsEndpoint returns an endpoint function that calls the
// method "get-one-project-settings" of service "project-service".
func NewGetOneProjectSettingsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetOneProjectSettingsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetOneProjectSettings(ctx, p)
	}
}

// NewUpdateProjectBaseEndpoint returns an endpoint function that calls the
// method "update-project-base" of service "project-service".
func NewUpdateProjectBaseEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateProjectBasePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateProjectBase(ctx, p)
	}
}

// NewUpdateProjectSettingsEndpoint returns an endpoint function that calls the
// method "update-project-settings" of service "project-service".
func NewUpdateProjectSettingsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateProjectSettingsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateProjectSettings(ctx, p)
	}
}

// NewDeleteProjectEndpoint returns an endpoint function that calls the method
// "delete-project" of service "project-service".
func NewDeleteProjectEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteProjectPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteProject(ctx, p)
	}
}

// NewReadyzEndpoint returns an endpoint function that calls the method
// "readyz" of service "project-service".
func NewReadyzEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Readyz(ctx)
	}
}

// NewLivezEndpoint returns an endpoint function that calls the method "livez"
// of service "project-service".
func NewLivezEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Livez(ctx)
	}
}
