// Code generated by goa v3.21.1, DO NOT EDIT.
//
// project-service service
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-project-service/api/project/v1/design -o
// api/project/v1

package projectservice

import (
	"context"

	"goa.design/goa/v3/security"
)

// The project service provides LFX Project resources.
type Service interface {
	// Get all projects.
	GetProjects(context.Context, *GetProjectsPayload) (res *GetProjectsResult, err error)
	// Create a new project.
	CreateProject(context.Context, *CreateProjectPayload) (res *ProjectFull, err error)
	// Get a single project's base information.
	GetOneProjectBase(context.Context, *GetOneProjectBasePayload) (res *GetOneProjectBaseResult, err error)
	// Get a single project's settings.
	GetOneProjectSettings(context.Context, *GetOneProjectSettingsPayload) (res *GetOneProjectSettingsResult, err error)
	// Update an existing project's base information.
	UpdateProjectBase(context.Context, *UpdateProjectBasePayload) (res *ProjectBase, err error)
	// Update an existing project's settings.
	UpdateProjectSettings(context.Context, *UpdateProjectSettingsPayload) (res *ProjectSettings, err error)
	// Delete an existing project.
	DeleteProject(context.Context, *DeleteProjectPayload) (err error)
	// Check if the service is able to take inbound requests.
	Readyz(context.Context) (res []byte, err error)
	// Check if the service is alive.
	Livez(context.Context) (res []byte, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "lfx-v2-project-service"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "project-service"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [9]string{"get-projects", "create-project", "get-one-project-base", "get-one-project-settings", "update-project-base", "update-project-settings", "delete-project", "readyz", "livez"}

type BadRequestError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

type ConflictError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// CreateProjectPayload is the payload type of the project-service service
// create-project method.
type CreateProjectPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// Project slug, a short slugified name of the project
	Slug string
	// A description of the project
	Description string
	// The pretty name of the project
	Name string
	// Whether the project is public
	Public *bool
	// The UID of the parent project, required and must be a valid UUID
	ParentUID string
	// The stage of the project
	Stage *string
	// The category of the project
	Category *string
	// A list of funding models for the project
	FundingModel []string
	// The URL of the project charter document
	CharterURL *string
	// The legal entity type of the project
	LegalEntityType *string
	// The legal entity name of the project
	LegalEntityName *string
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string
	// The date the project entity was dissolved
	EntityDissolutionDate *string
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool
	// The date the project was formed
	FormationDate *string
	// The URL of the project logo
	LogoURL *string
	// The URL of the project repository
	RepositoryURL *string
	// The URL of the project website
	WebsiteURL *string
	// The date the project was announced
	AnnouncementDate *string
	// The mission statement of the project
	MissionStatement *string
	// A list of project writers by their LFIDs (usernames)
	Writers []string
	// A list of project meeting coordinators by their LFIDs (usernames). These
	// users are responsible for managing meetings for the project.
	MeetingCoordinators []string
	// A list of project auditors by their LFIDs (usernames)
	Auditors []string
}

// DeleteProjectPayload is the payload type of the project-service service
// delete-project method.
type DeleteProjectPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Version of the API
	Version *string
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string
}

// GetOneProjectBasePayload is the payload type of the project-service service
// get-one-project-base method.
type GetOneProjectBasePayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string
}

// GetOneProjectBaseResult is the result type of the project-service service
// get-one-project-base method.
type GetOneProjectBaseResult struct {
	Project *ProjectBase
	// ETag header value
	Etag *string
}

// GetOneProjectSettingsPayload is the payload type of the project-service
// service get-one-project-settings method.
type GetOneProjectSettingsPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string
}

// GetOneProjectSettingsResult is the result type of the project-service
// service get-one-project-settings method.
type GetOneProjectSettingsResult struct {
	ProjectSettings *ProjectSettings
	// ETag header value
	Etag *string
}

// GetProjectsPayload is the payload type of the project-service service
// get-projects method.
type GetProjectsPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
}

// GetProjectsResult is the result type of the project-service service
// get-projects method.
type GetProjectsResult struct {
	// Resources found
	Projects []*ProjectFull
	// Cache control header
	CacheControl *string
}

type InternalServerError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

type NotFoundError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// ProjectBase is the result type of the project-service service
// update-project-base method.
type ProjectBase struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string
	// Project slug, a short slugified name of the project
	Slug *string
	// A description of the project
	Description *string
	// The pretty name of the project
	Name *string
	// Whether the project is public
	Public *bool
	// The UID of the parent project, required and must be a valid UUID
	ParentUID *string
	// The stage of the project
	Stage *string
	// The category of the project
	Category *string
	// A list of funding models for the project
	FundingModel []string
	// The URL of the project charter document
	CharterURL *string
	// The legal entity type of the project
	LegalEntityType *string
	// The legal entity name of the project
	LegalEntityName *string
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string
	// The date the project entity was dissolved
	EntityDissolutionDate *string
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool
	// The date the project was formed
	FormationDate *string
	// The URL of the project logo
	LogoURL *string
	// The URL of the project repository
	RepositoryURL *string
	// The URL of the project website
	WebsiteURL *string
	// The date and time the project was created
	CreatedAt *string
	// The date and time the project was last updated
	UpdatedAt *string
}

// ProjectFull is the result type of the project-service service create-project
// method.
type ProjectFull struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string
	// Project slug, a short slugified name of the project
	Slug *string
	// A description of the project
	Description *string
	// The pretty name of the project
	Name *string
	// Whether the project is public
	Public *bool
	// The UID of the parent project, required and must be a valid UUID
	ParentUID *string
	// The stage of the project
	Stage *string
	// The category of the project
	Category *string
	// A list of funding models for the project
	FundingModel []string
	// The URL of the project charter document
	CharterURL *string
	// The legal entity type of the project
	LegalEntityType *string
	// The legal entity name of the project
	LegalEntityName *string
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string
	// The date the project entity was dissolved
	EntityDissolutionDate *string
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool
	// The date the project was formed
	FormationDate *string
	// The URL of the project logo
	LogoURL *string
	// The URL of the project repository
	RepositoryURL *string
	// The URL of the project website
	WebsiteURL *string
	// The date and time the project was created
	CreatedAt *string
	// The date and time the project was last updated
	UpdatedAt *string
	// The mission statement of the project
	MissionStatement *string
	// The date the project was announced
	AnnouncementDate *string
	// A list of project writers by their LFIDs (usernames)
	Writers []string
	// A list of project meeting coordinators by their LFIDs (usernames). These
	// users are responsible for managing meetings for the project.
	MeetingCoordinators []string
	// A list of project auditors by their LFIDs (usernames)
	Auditors []string
}

// ProjectSettings is the result type of the project-service service
// update-project-settings method.
type ProjectSettings struct {
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string
	// The mission statement of the project
	MissionStatement *string
	// The date the project was announced
	AnnouncementDate *string
	// A list of project writers by their LFIDs (usernames)
	Writers []string
	// A list of project meeting coordinators by their LFIDs (usernames). These
	// users are responsible for managing meetings for the project.
	MeetingCoordinators []string
	// A list of project auditors by their LFIDs (usernames)
	Auditors []string
	// The date and time the project was created
	CreatedAt *string
	// The date and time the project was last updated
	UpdatedAt *string
}

type ServiceUnavailableError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// UpdateProjectBasePayload is the payload type of the project-service service
// update-project-base method.
type UpdateProjectBasePayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Version of the API
	Version *string
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string
	// Project slug, a short slugified name of the project
	Slug string
	// A description of the project
	Description string
	// The pretty name of the project
	Name string
	// Whether the project is public
	Public *bool
	// The UID of the parent project, required and must be a valid UUID
	ParentUID string
	// The stage of the project
	Stage *string
	// The category of the project
	Category *string
	// A list of funding models for the project
	FundingModel []string
	// The URL of the project charter document
	CharterURL *string
	// The legal entity type of the project
	LegalEntityType *string
	// The legal entity name of the project
	LegalEntityName *string
	// The UID of the legal parent entity, should be empty if there is none
	LegalParentUID *string
	// The date the project entity was dissolved
	EntityDissolutionDate *string
	// The URL of the project entity formation document
	EntityFormationDocumentURL *string
	// Whether autojoin is enabled for the project
	AutojoinEnabled *bool
	// The date the project was formed
	FormationDate *string
	// The URL of the project logo
	LogoURL *string
	// The URL of the project repository
	RepositoryURL *string
	// The URL of the project website
	WebsiteURL *string
}

// UpdateProjectSettingsPayload is the payload type of the project-service
// service update-project-settings method.
type UpdateProjectSettingsPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Version of the API
	Version *string
	// Project UID -- v2 uid, not related to v1 id directly
	UID *string
	// The mission statement of the project
	MissionStatement *string
	// The date the project was announced
	AnnouncementDate *string
	// A list of project writers by their LFIDs (usernames)
	Writers []string
	// A list of project meeting coordinators by their LFIDs (usernames). These
	// users are responsible for managing meetings for the project.
	MeetingCoordinators []string
	// A list of project auditors by their LFIDs (usernames)
	Auditors []string
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return ""
}

// ErrorName returns "BadRequestError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequestError".
func (e *BadRequestError) GoaErrorName() string {
	return "BadRequest"
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return ""
}

// ErrorName returns "ConflictError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ConflictError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ConflictError".
func (e *ConflictError) GoaErrorName() string {
	return "Conflict"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return ""
}

// ErrorName returns "InternalServerError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalServerError".
func (e *InternalServerError) GoaErrorName() string {
	return "InternalServerError"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return ""
}

// ErrorName returns "NotFoundError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFoundError".
func (e *NotFoundError) GoaErrorName() string {
	return "NotFound"
}

// Error returns an error description.
func (e *ServiceUnavailableError) Error() string {
	return ""
}

// ErrorName returns "ServiceUnavailableError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ServiceUnavailableError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ServiceUnavailableError".
func (e *ServiceUnavailableError) GoaErrorName() string {
	return "ServiceUnavailable"
}
